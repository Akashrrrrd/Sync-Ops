Directory structure:
└── Frontend/
    ├── README.md
    ├── eslint.config.js
    ├── index.html
    ├── package.json
    ├── vercel.json
    ├── vite.config.js
    ├── public/
    └── src/
        ├── App.css
        ├── App.jsx
        ├── firebase.js
        ├── index.css
        ├── main.jsx
        ├── api/
        │   └── userApi.js
        ├── assets/
        ├── components/
        │   ├── ScrollToTop.jsx
        │   ├── ThemeContext.jsx
        │   ├── Login/
        │   │   ├── Login.css
        │   │   └── Login.jsx
        │   ├── Navbar/
        │   │   ├── AIModal.css
        │   │   ├── Navbar.css
        │   │   └── Navbar.jsx
        │   ├── Sidebar/
        │   │   ├── Sidebar.css
        │   │   └── Sidebar.jsx
        │   └── i18n/
        │       └── i18n.js
        └── pages/
            ├── AIAccessibility/
            │   ├── AIAccessibility.css
            │   └── AIAccessibility.jsx
            ├── AIBot/
            │   ├── AIBot.css
            │   └── AIBot.jsx
            ├── AIFeedback/
            │   ├── AIFeedback.css
            │   └── AIFeedback.jsx
            ├── AIWorkflow/
            │   ├── AIWorkflow.css
            │   └── AIWorkflow.jsx
            ├── Analytics/
            │   ├── Analytics.css
            │   └── Analytics.jsx
            ├── ChatRoom/
            │   ├── ChatRoom.css
            │   └── ChatRoom.jsx
            ├── ContentAnonymizer/
            │   ├── ContentAnonymizer.css
            │   └── ContentAnonymizer.jsx
            ├── ContentGeneration/
            │   ├── ContentGeneration.css
            │   └── ContentGeneration.jsx
            ├── ContentRewrite/
            │   ├── ContentRewrite.css
            │   └── ContentRewrite.jsx
            ├── ContextualLearning/
            │   ├── ContextualLearning.css
            │   └── ContextualLearning.jsx
            ├── Dashboard/
            │   ├── Dashboard.css
            │   └── Dashboard.jsx
            ├── DataInsights/
            │   ├── DataInsights.css
            │   └── DataInsights.jsx
            ├── FAQ/
            │   ├── FAQ.css
            │   └── FAQ.jsx
            ├── FormFiller/
            │   ├── FormFiller.css
            │   └── FormFiller.jsx
            ├── IdeaGeneration/
            │   ├── IdeaGeneration.css
            │   └── IdeaGeneration.jsx
            ├── Profile/
            │   ├── Profile.css
            │   └── Profile.jsx
            ├── Projects/
            │   ├── Projects.css
            │   └── Projects.jsx
            ├── Prompts/
            │   ├── Prompts.css
            │   └── Prompts.jsx
            ├── Resources/
            │   ├── Resources.css
            │   └── Resources.jsx
            ├── Settings/
            │   ├── Settings.css
            │   └── Settings.jsx
            ├── Summarization/
            │   ├── Summarization.css
            │   └── Summarization.jsx
            ├── Tasks/
            │   ├── Tasks.css
            │   └── Tasks.jsx
            └── Translation/
                ├── Translation.css
                └── Translation.jsx

================================================
File: README.md
================================================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh



================================================
File: eslint.config.js
================================================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]



================================================
File: index.html
================================================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/png" href="src/assets/logo.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>SyncOps</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>



================================================
File: package.json
================================================
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@chakra-ui/react": "^3.1.2",
    "@emotion/react": "^11.13.3",
    "@emotion/styled": "^11.13.0",
    "@google/generative-ai": "^0.21.0",
    "@huggingface/inference": "^2.8.1",
    "@mui/material": "^6.1.7",
    "@radix-ui/react-tooltip": "^1.1.3",
    "axios": "^1.9.0",
    "chrome-ai": "^1.11.1",
    "cors": "^2.8.5",
    "cursor": "^0.1.5",
    "dompurify": "^3.2.3",
    "dotenv": "^16.4.5",
    "express": "^5.1.0",
    "fabric": "^6.5.3",
    "firebase": "^11.0.2",
    "framer-motion": "^11.11.17",
    "i18next": "^23.16.5",
    "immer": "^10.1.1",
    "lodash": "^4.17.21",
    "lucide-react": "^0.451.0",
    "marked": "^15.0.3",
    "openai": "^4.72.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-i18next": "^15.1.1",
    "react-icons": "^5.3.0",
    "react-router-dom": "^6.26.2",
    "react-toastify": "^10.0.6",
    "recharts": "^2.12.7",
    "socket.io-client": "^4.8.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.11.1",
    "@types/react": "^18.3.10",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.2",
    "eslint": "^9.11.1",
    "eslint-plugin-react": "^7.37.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.12",
    "globals": "^15.9.0",
    "vite": "^5.4.8"
  }
}



================================================
File: vercel.json
================================================
{
    "rewrites":  [
      {"source": "/(.*)", "destination": "/"}
    ]
  }


================================================
File: vite.config.js
================================================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})




================================================
File: src/App.css
================================================
.app-container {
  display: flex;
}

.main-content {
  flex-grow: 1;
  padding: 1rem;
  overflow-y: auto;
}

::-webkit-scrollbar {
  width: 8px;
  background-color: transparent;
}

::-webkit-scrollbar-thumb {
  background-color: #007bff;
  border-radius: 10px;
  border: 2px solid transparent;
  background-clip: padding-box;
  transition: background-color 0.3s ease;
}

::-webkit-scrollbar-thumb:hover {
  background-color: #0056b3;
}

::-webkit-scrollbar-track {
  background: rgba(0, 0, 0, 0.1);
  border-radius: 10px;
}

.scrollable {
  scrollbar-width: thin;
  scrollbar-color: #007bff rgba(0, 0, 0, 0.1);
}



================================================
File: src/App.jsx
================================================
import React, { useState, useEffect } from "react";
import {
  BrowserRouter as Router,
  Routes,
  Route,
  Navigate,
} from "react-router-dom";
import { auth } from "./firebase";
import { onAuthStateChanged } from "firebase/auth";

// Import components
import Navbar from "./components/Navbar/Navbar";
import Sidebar from "./components/Sidebar/Sidebar";
import Login from "./components/Login/Login";
import Dashboard from "./pages/Dashboard/Dashboard";
import Projects from "./pages/Projects/Projects";
import Tasks from "./pages/Tasks/Tasks";
import Analytics from "./pages/Analytics/Analytics";
import Resources from "./pages/Resources/Resources";
import ChatRoom from "./pages/ChatRoom/ChatRoom";
import Prompts from "./pages/Prompts/Prompts";
import Summarization from "./pages/Summarization/Summarization";
import ContentGeneration from "./pages/ContentGeneration/ContentGeneration";
import IdeaGeneration from "./pages/IdeaGeneration/IdeaGeneration";
import ContentRewrite from "./pages/ContentRewrite/ContentRewrite";
import Translation from "./pages/Translation/Translation";
import FormFiller from "./pages/FormFiller/FormFiller";
import DataInsights from "./pages/DataInsights/DataInsights";
import Profile from "./pages/Profile/Profile";
import Settings from "./pages/Settings/Settings";
import FAQ from "./pages/FAQ/FAQ";
import AIFeedback from "./pages/AIFeedback/AIFeedback";
import AIWorkflow from "./pages/AIWorkflow/AIWorkflow";
import ContextualLearning from "./pages/ContextualLearning/ContextualLearning";
import ContentAnonymizer from "./pages/ContentAnonymizer/ContentAnonymizer";
import AIAccessibility from "./pages/AIAccessibility/AIAccessibility";
import ScrollToTop from "./components/ScrollToTop"; // Import ScrollToTop component
import AIBot from "./pages/AIBot/AIBot"; // Import the new AIBot component
import "./App.css";
import "./components/i18n/i18n";

function App() {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [isSidebarExpanded, setIsSidebarExpanded] = useState(true);
  const [userRole, setUserRole] = useState(null);
  const [isAIBotOpen, setIsAIBotOpen] = useState(false); // State for AI Bot

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      setUser(currentUser);
      setUserRole(currentUser ? "user" : null); // Default role
      setLoading(false);
    });

    return () => unsubscribe();
  }, []);

  const toggleSidebar = () => {
    setIsSidebarExpanded(!isSidebarExpanded);
  };

  const toggleAIBot = () => {
    setIsAIBotOpen(!isAIBotOpen);
  };

  const handleLogin = (role = "user") => {
    setUser(auth.currentUser);
    setUserRole(role);
  };

  const handleLogout = () => {
    auth.signOut();
    setUser(null);
    setUserRole(null);
  };

  if (loading) {
    return <div className="loading-com">Loading...</div>;
  }

  return (
    <Router>
      <ScrollToTop /> {/* Add ScrollToTop component here */}
      <div className="app">
        {user ? (
          <>
            <Navbar
              isLoggedIn={!!user}
              handleLogout={handleLogout}
              userRole={userRole}
            />
            <div className="app-container">
              <Sidebar
                isExpanded={isSidebarExpanded}
                toggleSidebar={toggleSidebar}
                userRole={userRole}
              />
              <div
                className={`main-content ${
                  isSidebarExpanded ? "sidebar-expanded" : "sidebar-collapsed"
                }`}
              >
                <Routes>
                  <Route
                    path="/dashboard"
                    element={<Dashboard userRole={userRole} />}
                  />
                  <Route
                    path="/projects"
                    element={<Projects userRole={userRole} />}
                  />
                  <Route
                    path="/tasks"
                    element={<Tasks userRole={userRole} />}
                  />
                  <Route
                    path="/analytics"
                    element={<Analytics userRole={userRole} />}
                  />
                  <Route
                    path="/resources"
                    element={<Resources userRole={userRole} />}
                  />
                  <Route
                    path="/chatroom"
                    element={<ChatRoom userRole={userRole} />}
                  />
                  <Route
                    path="/dynamic-prompts"
                    element={<Prompts userRole={userRole} />}
                  />
                  <Route
                    path="/summarization"
                    element={<Summarization userRole={userRole} />}
                  />
                  <Route
                    path="/content-generation"
                    element={<ContentGeneration userRole={userRole} />}
                  />
                  <Route
                    path="/idea-generation"
                    element={<IdeaGeneration userRole={userRole} />}
                  />
                  <Route
                    path="/content-rewrite"
                    element={<ContentRewrite userRole={userRole} />}
                  />
                  <Route
                    path="/translation"
                    element={<Translation userRole={userRole} />}
                  />
                  <Route
                    path="/intelligent-form-filler"
                    element={<FormFiller userRole={userRole} />}
                  />
                  <Route
                    path="/data-insights-generator"
                    element={<DataInsights userRole={userRole} />}
                  />
                  <Route
                    path="/ai-feedback"
                    element={<AIFeedback userRole={userRole} />}
                  />
                  <Route
                    path="/profile"
                    element={<Profile userRole={userRole} />}
                  />
                  <Route
                    path="/settings"
                    element={<Settings userRole={userRole} />}
                  />
                  <Route path="/help" element={<FAQ userRole={userRole} />} />
                  <Route
                    path="/ai-workflow"
                    element={<AIWorkflow userRole={userRole} />}
                  />
                  <Route
                    path="/contextual-learning"
                    element={<ContextualLearning userRole={userRole} />}
                  />
                  <Route
                    path="/content-anonymizer"
                    element={<ContentAnonymizer userRole={userRole} />}
                  />
                  <Route
                    path="/vocal-script"
                    element={<AIAccessibility userRole={userRole} />}
                  />
                  <Route path="*" element={<Navigate to="/dashboard" />} />
                </Routes>
              </div>
              
              {/* AI Bot Component */}
              <AIBot isOpen={isAIBotOpen} toggleAIBot={toggleAIBot} />
            </div>
          </>
        ) : (
          <Routes>
            <Route path="/login" element={<Login onLogin={handleLogin} />} />
            <Route path="*" element={<Navigate to="/login" />} />
          </Routes>
        )}
      </div>
    </Router>
  );
}

export default App;


================================================
File: src/firebase.js
================================================
import { initializeApp } from "firebase/app";
import {
  getAuth,
  GoogleAuthProvider,
  GithubAuthProvider,
  browserLocalPersistence,
  setPersistence,
} from "firebase/auth";
import { getFirestore } from "firebase/firestore";

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyAdJtpQlX9F_jmASjjZhMlSV-RUpk32dLs",
  authDomain: "syncops-b6980.firebaseapp.com",
  projectId: "syncops-b6980",
  storageBucket: "syncops-b6980.firebasestorage.app",
  messagingSenderId: "567120163013",
  appId: "1:567120163013:web:0dda98d33c123fe9e340ac",
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

// Initialize services
const auth = getAuth(app);
const firestore = getFirestore(app);

// Set persistence to local storage
setPersistence(auth, browserLocalPersistence).catch((error) => {
  console.error("Error setting persistence:", error);
});

const googleProvider = new GoogleAuthProvider();
const githubProvider = new GithubAuthProvider();

export { app, auth, firestore, googleProvider, githubProvider };



================================================
File: src/index.css
================================================
body {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
/* Modern Loading Animation */
.loading-com {
  font-family: "Poppins", sans-serif; /* More modern font */
  font-size: 30px; /* Slightly larger font for better visibility */
  font-weight: 500; /* Medium weight for smooth appearance */
  color: #3498db; /* Blue color */
  text-transform: uppercase;
  letter-spacing: 3px;
  text-align: center;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  animation: fadeInOut 1.5s ease-in-out infinite,
    dotAnimation 1.5s steps(5, end) infinite;
  text-shadow: 0px 0px 10px rgba(52, 152, 219, 0.7); /* Soft glow for professional look */
}

.loading-com::after {
  content: ".";
  animation: dotAnimation 1.5s steps(5, end) infinite;
}

/* Fade-in, fade-out effect for smooth text appearance */
@keyframes fadeInOut {
  0% {
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}

/* Dots animation */
@keyframes dotAnimation {
  0% {
    content: ".";
  }
  25% {
    content: "..";
  }
  50% {
    content: "...";
  }
  75% {
    content: "..";
  }
  100% {
    content: ".";
  }
}

/* Adding a subtle scaling effect for extra dynamic feel */
.loading-com {
  animation: fadeInOut 1.5s ease-in-out infinite,
    dotAnimation 1.5s steps(5, end) infinite,
    scaleEffect 1.5s ease-in-out infinite;
}

@keyframes scaleEffect {
  0% {
    transform: translate(-50%, -50%) scale(1);
  }
  50% {
    transform: translate(-50%, -50%) scale(1.1);
  }
  100% {
    transform: translate(-50%, -50%) scale(1);
  }
}



================================================
File: src/main.jsx
================================================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App.jsx'
import './index.css'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)



================================================
File: src/api/userApi.js
================================================
const API_BASE_URL = "http://localhost:5000/api";

export async function getUserData(uid) {
  try {
    const response = await fetch(`${API_BASE_URL}/user/${uid}`);
    if (!response.ok) {
      throw new Error("Failed to fetch user data");
    }
    return await response.json();
  } catch (error) {
    console.error("Error fetching user data:", error);
    throw error;
  }
}

export async function setUserData(uid, data) {
  try {
    const response = await fetch(`${API_BASE_URL}/user/${uid}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });
    if (!response.ok) {
      throw new Error("Failed to save user data");
    }
    return await response.json();
  } catch (error) {
    console.error("Error saving user data:", error);
    throw error;
  }
}




================================================
File: src/components/ScrollToTop.jsx
================================================
import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const ScrollToTop = () => {
  const location = useLocation();

  useEffect(() => {
    // Scroll smoothly to the top when the route changes
    window.scrollTo({ top: 0, behavior: "smooth" });
  }, [location]);

  return null;
};

export default ScrollToTop;



================================================
File: src/components/ThemeContext.jsx
================================================
import React, { createContext, useContext, useState, useEffect } from 'react';

// Create a Context for the theme
const ThemeContext = createContext();

// Create a ThemeProvider component
export const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState('light');

  // Load theme from localStorage
  useEffect(() => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
      setTheme(savedTheme);
    }
  }, []);

  // Toggle theme function
  const toggleTheme = () => {
    const newTheme = theme === 'light' ? 'dark' : 'light';
    setTheme(newTheme);
    localStorage.setItem('theme', newTheme); // Save the theme to localStorage
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = () => useContext(ThemeContext);



================================================
File: src/components/Login/Login.css
================================================
@import url("https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap");

:root {
  --ai-primary: #00a3ff;
  --ai-secondary: #6366f1;
  --ai-accent: #0ea5e9;
  --ai-gradient: linear-gradient(
    135deg,
    var(--ai-primary) 0%,
    var(--ai-secondary) 100%
  );
  --ai-surface: #f8fafc;
  --ai-text: #0f172a;
  --ai-text-secondary: #64748b;
  --ai-border: #e2e8f0;
  --ai-shadow: rgba(0, 163, 255, 0.1);
}

.login-auth-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  width: 100vw;
  padding: 0;
  background: linear-gradient(135deg, #eef2ff 0%, #e0e7ff 100%);
  font-family: "Inter", sans-serif;
}

.login-auth-content {
  display: flex;
  width: 100vw;
  height: 100vh;
  background-color: #ffffff;
  overflow: hidden;
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
}

.login-auth-logo-container {
  flex: 1;
  background: var(--ai-gradient);
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 3rem;
  color: #fff;
  text-align: center;
  position: relative;
  overflow: hidden;
}

.login-auth-logo-container::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: radial-gradient(
    circle at center,
    rgba(255, 255, 255, 0.1) 0%,
    transparent 70%
  );
  animation: pulse 4s infinite;
}

@keyframes pulse {
  0% {
    transform: scale(1);
    opacity: 0.5;
  }
  50% {
    transform: scale(1.5);
    opacity: 0.7;
  }
  100% {
    transform: scale(1);
    opacity: 0.5;
  }
}

.login-auth-logo-container h2 {
  font-size: 2.5rem;
  margin-bottom: 1rem;
  font-weight: 700;
  background: linear-gradient(to right, #fff, #e0e7ff);
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
}

.login-auth-logo-container p {
  font-size: 1.1rem;
  opacity: 0.9;
  line-height: 1.6;
  max-width: 80%;
}

.login-auth-logo {
  max-width: 70%;
  max-height: 70%;
  object-fit: contain;
  margin-bottom: 2rem;
  animation: floatAnimation 6s ease-in-out infinite;
}

@keyframes floatAnimation {
  0% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-20px);
  }
  100% {
    transform: translateY(0);
  }
}

.login-auth-form-container {
  flex: 1;
  padding: 3rem 4rem;
  overflow-y: auto;
  background: var(--ai-surface);
}

.login-auth-title {
  font-size: 32px;
  font-weight: 700;
  color: var(--ai-text);
  margin-bottom: 0.75rem;
  position: relative;
}

.login-auth-title::after {
  content: "";
  position: absolute;
  bottom: -8px;
  left: 0;
  width: 60px;
  height: 4px;
  background: var(--ai-gradient);
  border-radius: 2px;
}

.login-auth-subtitle {
  font-size: 16px;
  color: var(--ai-text-secondary);
  margin-bottom: 2.5rem;
  line-height: 1.6;
}

.login-auth-form {
  margin-bottom: 2.5rem;
}

.login-auth-input-row {
  display: flex;
  gap: 1.5rem;
  margin-bottom: 1rem;
}

.login-auth-input-group {
  flex: 1;
  margin-bottom: 1rem;
}

.login-auth-input-group label {
  font-size: 16px;
  font-weight: 500;
  color: var(--ai-text);
  margin-bottom: 0.5rem;
  display: block;
}

.login-input-wrapper {
  position: relative;
  display: flex;
  align-items: center;
}

.login-input-icon {
  position: absolute;
  left: 12px;
  color: var(--ai-text-secondary);
  font-size: 18px;
  transition: color 0.3s ease;
}

.login-auth-input-group input:focus + .login-input-icon {
  color: var(--ai-primary);
}

.login-auth-input-group input,
.login-auth-select {
  width: 100%;
  padding: 1rem 1rem 1rem 2.75rem;
  font-size: 15px;
  border: 1px solid var(--ai-border);
  border-radius: 12px;
  transition: all 0.3s ease;
  background-color: white;
  color: var(--ai-text);
}

.login-auth-input-group input:focus,
.login-auth-select:focus {
  border-color: var(--ai-primary);
  box-shadow: 0 0 0 4px var(--ai-shadow);
  transform: translateY(-1px);
}

.login-password-toggle {
  position: absolute;
  right: 12px;
  background: none;
  border: none;
  cursor: pointer;
  color: var(--ai-text-secondary);
  font-size: 18px;
  transition: color 0.3s ease;
}

.login-password-toggle:hover {
  color: var(--ai-primary);
}

.login-auth-button {
  width: 25%;
  margin-left: 240px;
  padding: 1.1rem;
  background: var(--ai-gradient);
  color: white;
  border: none;
  border-radius: 50px;
  font-size: 18px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.login-auth-button::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255, 255, 255, 0.2),
    transparent
  );
  transition: 0.5s;
}

.login-auth-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px var(--ai-shadow);
}

.login-auth-button:hover::before {
  left: 100%;
}

.login-auth-error {
  background-color: #fee2e2;
  color: #dc2626;
  padding: 1rem;
  border-radius: 12px;
  margin-bottom: 1.5rem;
  font-size: 14px;
  border: 1px solid #fecaca;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.login-auth-separator {
  display: flex;
  align-items: center;
  margin: 2rem 0;
  position: relative;
  text-align: center;
}

.login-auth-separator::before,
.login-auth-separator::after {
  content: "";
  flex: 1;
  border-bottom: 1px solid var(--ai-border);
}

.login-auth-separator span {
  padding: 0 12px;
  font-size: 14px;
  color: var(--ai-text-secondary);
  background: var(--ai-surface);
}

.login-auth-social-buttons {
  display: flex;
  justify-content: center;
  gap: 20px; /* Slight gap between buttons */
  margin: 20px 0; /* Vertical margin for spacing */
}

.login-auth-social-button {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 50px; /* Adjust the button size to fit the icon */
  height: 50px;
  background-color: #ffffff; /* Clean white background */
  border: none;
  border-radius: 50%;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */
  cursor: pointer;
  padding: 0; /* Remove any padding */
  transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}

.login-auth-social-button:hover {
  transform: scale(1.1); /* Slight zoom on hover */
  box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15); /* Enhanced shadow on hover */
}

.login-auth-social-button:active {
  transform: scale(1); /* Reset zoom on click */
  box-shadow: 0 3px 4px rgba(0, 0, 0, 0.1); /* Reduced shadow on click */
}

.social-icon {
  width: 30px; /* Icon size that fits the button */
  height: 30px;
}

.login-auth-switch {
  margin-top: 2.5rem;
  text-align: center;
  font-size: 15px;
  color: var(--ai-text-secondary);
}

.login-auth-switch a {
  color: var(--ai-primary);
  font-weight: 600;
  text-decoration: none;
  transition: all 0.3s ease;
}

.login-auth-switch a:hover {
  color: var(--ai-secondary);
  text-decoration: none;
  transform: translateY(-1px);
}

@media (max-width: 768px) {
  .login-auth-content {
    flex-direction: column;
    height: auto;
  }

  .login-auth-logo-container {
    padding: 2rem;
  }

  .login-auth-form-container {
    padding: 2rem;
  }

  .login-auth-input-row {
    flex-direction: column;
  }

  .login-auth-social-buttons {
    flex-direction: column;
  }

  .login-auth-title {
    font-size: 28px;
  }

  .login-auth-logo-container h2 {
    font-size: 2rem;
  }
}

.login-span-header {
  color: var(--ai-primary);
  font-weight: 600;
}

.login-guest-button {
  position: relative;
  width: 40%;
  padding: 1.1rem;
  margin-top: 15px;
  margin-left: 200px;
  background: linear-gradient(145deg, #4a4a4a, #3a3a3a);
  color: #f0f0f0;
  border: none;
  border-radius: 50px;
  font-weight: 600;
  font-size: 16px;
  text-transform: uppercase;
  letter-spacing: 1px;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
  overflow: hidden;
  outline: none;
}

.login-guest-button::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    120deg,
    transparent,
    rgba(255, 255, 255, 0.3),
    transparent
  );
  transition: all 0.6s ease;
}

.login-guest-button:hover::before {
  left: 100%;
}

.login-guest-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15), 0 2px 4px rgba(0, 0, 0, 0.12);
  background: linear-gradient(145deg, #525252, #414141);
}

.login-guest-button:active {
  transform: translateY(1px);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.06);
  background: linear-gradient(145deg, #3a3a3a, #2a2a2a);
}

.login-guest-button::after {
  content: "â†’";
  position: absolute;
  right: 15px;
  top: 50%;
  transform: translateY(-50%);
  opacity: 0;
  transition: opacity 0.3s ease;
}

.login-guest-button:hover::after {
  opacity: 1;
}



================================================
File: src/components/Login/Login.jsx
================================================
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import {
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signInWithPopup,
} from "firebase/auth";
import {
  auth,
  googleProvider,
  githubProvider,
} from "./../../firebase";

import { getUserData, setUserData } from "../../api/userApi";

import logo from "./../../assets/logo.png";
import google_icon from "./../../assets/google-icon.png";
import github_icon from "./../../assets/github-icon.png";
import "./Login.css";

const Login = ({ onLogin }) => {
  const navigate = useNavigate();
  const [isLogin, setIsLogin] = useState(true);
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);

  const handleUserData = async (user, additionalData = {}) => {
    try {
      // Try to get user data from backend
      let userData = await getUserData(user.uid);

      // If no user data, set it
      if (!userData) {
        userData = {
          uid: user.uid,
          email: user.email,
          firstName: additionalData.firstName || "",
          lastName: additionalData.lastName || "",
          createdAt: new Date(),
          ...additionalData,
        };
        await setUserData(user.uid, userData);
      }

      onLogin(userData);
      toast.success("Login successful!", {
        position: "top-right",
        autoClose: 3000,
      });
      navigate("/dashboard");
    } catch (error) {
      console.error("Error saving user data:", error);
      toast.error("Unable to save user data", {
        position: "top-right",
        autoClose: 3000,
      });
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      let userCredential;
      if (isLogin) {
        userCredential = await signInWithEmailAndPassword(
          auth,
          email,
          password
        );
        await handleUserData(userCredential.user);
      } else {
        if (!firstName || !lastName) {
          toast.error("Please provide first and last name", {
            position: "top-right",
            autoClose: 3000,
          });
          return;
        }

        userCredential = await createUserWithEmailAndPassword(
          auth,
          email,
          password
        );
        await handleUserData(userCredential.user, {
          firstName,
          lastName,
        });
      }
    } catch (error) {
      console.error("Authentication error:", error);
      switch (error.code) {
        case "auth/email-already-in-use":
          toast.error("Email is already registered", {
            position: "top-right",
            autoClose: 3000,
          });
          break;
        case "auth/invalid-email":
          toast.error("Invalid email address", {
            position: "top-right",
            autoClose: 3000,
          });
          break;
        case "auth/weak-password":
          toast.error("Password is too weak", {
            position: "top-right",
            autoClose: 3000,
          });
          break;
        case "auth/wrong-password":
          toast.error("Incorrect password", {
            position: "top-right",
            autoClose: 3000,
          });
          break;
        default:
          toast.error("Authentication failed", {
            position: "top-right",
            autoClose: 3000,
          });
      }
    }
  };

  const handleGuestLogin = async () => {
    try {
      const guestEmail = `guest_${Date.now()}@syncops.com`;
      const guestPassword = `Guest_${Math.random().toString(36).substring(2)}`;

      const userCredential = await createUserWithEmailAndPassword(
        auth,
        guestEmail,
        guestPassword
      );
      await handleUserData(userCredential.user, {
        isGuest: true,
        firstName: "Guest",
        lastName: "User",
      });
    } catch (error) {
      console.error("Guest login error:", error);
      toast.error("Guest login failed", {
        position: "top-right",
        autoClose: 3000,
      });
    }
  };

  const handleSocialLogin = async (providerType) => {
    try {
      const provider =
        providerType === "google" ? googleProvider : githubProvider;
      const userCredential = await signInWithPopup(auth, provider);

      const nameParts = userCredential.user.displayName
        ? userCredential.user.displayName.split(" ")
        : ["", ""];

      await handleUserData(userCredential.user, {
        firstName: nameParts[0],
        lastName: nameParts[1] || "",
        photoURL: userCredential.user.photoURL,
      });
    } catch (error) {
      console.error("Social login error:", error);
      toast.error("Social login failed", {
        position: "top-right",
        autoClose: 3000,
      });
    }
  };

  const toggleView = (e) => {
    // Prevent the default link behavior
    e.preventDefault();
    // Reset form fields when switching views
    setFirstName("");
    setLastName("");
    setEmail("");
    setPassword("");
    // Toggle between login and signup
    setIsLogin(!isLogin);
  };

  const togglePasswordVisibility = () => {
    setShowPassword(!showPassword);
  };

  return (
    <div className="login-auth-container">
      <ToastContainer />
      <div className="login-auth-content">
        {/* Logo Section */}
        <div className="login-auth-logo-container">
          <img src={logo} alt="SyncOps Logo" className="login-auth-logo" />
          <h2>
            Welcome to <span className="login-span-header">SyncOps</span>
          </h2>
          <p>Team Collaboration and Tools for Large Scale Projects</p>
        </div>

        {/* Form Section */}
        <div className="login-auth-form-container">
          <h2 className="login-auth-title">
            {isLogin
              ? "Welcome Back to SyncOps"
              : "Create Your SyncOps Account"}
          </h2>
          <p className="login-auth-subtitle">
            {isLogin
              ? "Log in to your SyncOps account to continue"
              : "Sign up to start collaborating on large-scale projects"}
          </p>

          {/* Form */}
          <form onSubmit={handleSubmit} className="login-auth-form">
            {/* Signup Fields */}
            {!isLogin && (
              <div className="login-auth-input-row">
                <div className="login-auth-input-group">
                  <label htmlFor="firstName">First Name</label>
                  <div className="login-input-wrapper">
                    <input
                      id="firstName"
                      type="text"
                      value={firstName}
                      onChange={(e) => setFirstName(e.target.value)}
                      placeholder="Your First Name"
                      required
                    />
                    <span className="login-input-icon">👤</span>
                  </div>
                </div>
                <div className="login-auth-input-group">
                  <label htmlFor="lastName">Last Name</label>
                  <div className="login-input-wrapper">
                    <input
                      id="lastName"
                      type="text"
                      value={lastName}
                      onChange={(e) => setLastName(e.target.value)}
                      placeholder="Your Last Name"
                      required
                    />
                    <span className="login-input-icon">👤</span>
                  </div>
                </div>
              </div>
            )}

            {/* Common Fields */}
            <div className="login-auth-input-group">
              <label htmlFor="email">Email Address</label>
              <div className="login-input-wrapper">
                <input
                  id="email"
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  placeholder="Enter your email"
                  required
                />
                <span className="login-input-icon">✉️</span>
              </div>
            </div>

            <div className="login-auth-input-group">
              <label htmlFor="password">Password</label>
              <div className="login-input-wrapper">
                <input
                  id="password"
                  type={showPassword ? "text" : "password"}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  placeholder={
                    isLogin ? "Enter your password" : "Create a strong password"
                  }
                  required
                />
                <span className="login-input-icon">🔒</span>
                <button
                  type="button"
                  className="login-password-toggle"
                  onClick={togglePasswordVisibility}
                >
                  {showPassword ? "👁️" : "👁️‍🗨️"}
                </button>
              </div>
            </div>

            {/* Submit Button */}
            <button type="submit" className="login-auth-button">
              {isLogin ? "Log In" : "Sign Up"}
            </button>
          </form>

          {/* Guest Login Button */}
          <button onClick={handleGuestLogin} className="login-guest-button">
            Continue as Guest
          </button>

          {/* Social Login */}
          <div className="login-auth-separator">
            <span>OR</span>
          </div>
          <div className="login-auth-social-buttons">
            <button
              className="login-auth-social-button login-auth-google"
              onClick={() => handleSocialLogin("google")}
            >
              <img src={google_icon} alt="Google" className="social-icon" />
            </button>
            <button
              className="login-auth-social-button login-auth-github"
              onClick={() => handleSocialLogin("github")}
            >
              <img src={github_icon} alt="GitHub" className="social-icon" />
            </button>
          </div>

          {/* Switch between login and signup */}
          <div className="login-auth-switch">
            <p>
              {isLogin
                ? "Don't have an account? "
                : "Already have an account? "}
              <a href="#" onClick={toggleView}>
                {isLogin ? "Sign up now" : "Log in"}
              </a>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Login;



================================================
File: src/components/Navbar/AIModal.css
================================================
/* AI Modal Overlay */
.ai-assistant-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    cursor: pointer;
  }
  
  /* AI Modal */
  .ai-assistant-modal {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: #ffffff;
    width: 90%;
    max-width: 500px;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.25);
    z-index: 1100;
  }
  
  /* Modal Content */
  .ai-assistant-content {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  textarea {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
  }
  
  .ai-actions {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
  }
  
  .close-btn,
  .submit-btn {
    background-color: #4a90e2;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 10px 20px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .close-btn:hover {
    background-color: #d9534f;
  }
  
  .submit-btn:hover {
    background-color: #357ab9;
  }
  


================================================
File: src/components/Navbar/Navbar.css
================================================
/* Import font */
@import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap");

/* CSS Variables */
:root {
  /* Colors */
  --primary-color: #1a56db;
  --primary-hover: #1e429f;
  --success-color: #22c55e;
  --text-primary: #1a202c;
  --text-secondary: #4b5563;
  --text-tertiary: #6b7280;
  --text-light: #64748b;

  /* Backgrounds */
  --bg-primary: #ffffff;
  --bg-secondary: #f9fafb;
  --bg-tertiary: #f3f4f6;
  --bg-gradient: linear-gradient(to bottom, #ffffff, #f8fafc);

  /* Borders */
  --border-color: #e5e7eb;
  --border-light: rgba(0, 0, 0, 0.12);

  /* Shadows */
  --shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.08);
  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
    0 2px 4px -1px rgba(0, 0, 0, 0.06);
  --shadow-lg: 0 0 0 1px rgba(0, 0, 0, 0.05), 0 4px 6px rgba(0, 0, 0, 0.05),
    0 10px 20px rgba(0, 0, 0, 0.1);

  /* Transitions */
  --transition-default: all 0.2s ease;
  --transition-smooth: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);
}

/* ===== Navbar Styles ===== */
.navbar {
  background-color: var(--bg-primary);
  box-shadow: var(--shadow-sm);
  position: sticky;
  top: 0;
  z-index: 1000;
}

.navbar-container {
  max-width: 1280px;
  margin: 0 auto;
  padding: 0.75rem 2rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

/* Logo */
.navbar-logo {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.logo-image {
  height: 36px;
  width: auto;
}

.logo-text {
  font-size: 1.5rem;
  font-weight: 600;
  color: var(--primary-color);
  letter-spacing: -0.025em;
}

/* Navigation Menu */
.navbar-menu {
  display: flex;
  gap: 2rem;
  margin: 0 2rem;
}

.nav-link {
  color: var(--text-secondary);
  text-decoration: none;
  font-weight: 500;
  font-size: 0.9375rem;
  padding: 0.5rem 0;
  transition: var(--transition-default);
  border-bottom: 2px solid transparent;
}

.nav-link:hover {
  color: var(--primary-color);
  border-bottom-color: var(--primary-color);
}

/* Navbar Actions */
.navbar-actions {
  display: flex;
  align-items: center;
  gap: 1.25rem;
}

/* Navigation Menu */
.navbar-menu {
  display: flex;
  gap: 2rem;
  margin: 0 2rem;
}

.nav-link {
  color: var(--text-secondary);
  text-decoration: none;
  font-weight: 500;
  font-size: 0.9375rem;
  padding: 0.5rem 0;
  transition: var(--transition-default);
  border-bottom: 2px solid transparent;
}

.nav-link:hover, .nav-link:active, .nav-link.active {
  color: var(--primary-color);
  border-bottom-color: var(--primary-color);
}

/* Navbar Actions */
.navbar-actions {
  display: flex;
  align-items: center;
  gap: 1.25rem;
}

/* Search Component */
.search-container {
  position: relative;
}

.search-input {
  width: 240px;
  padding: 0.625rem 1rem 0.625rem 2.5rem;
  border: 1px solid var(--border-color);
  border-radius: 0.375rem;
  font-size: 0.875rem;
  background-color: var(--bg-secondary);
  transition: var(--transition-default);
}

.search-input:focus {
  border-color: var(--primary-color);
  box-shadow: 0 0 0 3px rgba(26, 86, 219, 0.1);
  outline: none;
}

.search-button {
  position: absolute;
  left: -0.6rem;
  top: 50%;
  transform: translateY(-50%);
  background: none;
  border: none;
  padding: 0;
  cursor: pointer;
}

.search-icon {
  width: 1.25rem;
  height: 1.25rem;
  stroke: var(--text-tertiary);
  stroke-width: 2;
  fill: none;
}

/* AI Assistant Button */
.ai-assistant-button {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.625rem 1rem;
  background-color: var(--bg-tertiary);
  border: none;
  border-radius: 0.375rem;
  font-weight: 500;
  color: var(--text-primary);
  cursor: pointer;
  transition: var(--transition-default);
}

.ai-assistant-button:hover {
  background-color: var(--border-color);
}

.ai-icon {
  width: 1.25rem;
  height: 1.25rem;
  fill: var(--primary-color);
}

/* Profile Menu */
.profile-menu {
  position: relative;
  display: inline-block;
}

.profile-button {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem;
  background: none;
  border: none;
  cursor: pointer;
  border-radius: 0.375rem;
}

.profile-button:hover {
  background-color: var(--bg-tertiary);
}

.profile-name {
  font-weight: 500;
  color: var(--text-primary);
}

.chevron-icon {
  width: 1.25rem;
  height: 1.25rem;
  fill: var(--text-tertiary);
  transition: transform 0.2s ease;
}

/* Profile Dropdown */
.profile-dropdown {
  position: absolute;
  top: calc(100% + 0.5rem);
  right: 0;
  background-color: var(--bg-primary);
  border-radius: 0.5rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  min-width: 12rem;
  opacity: 0;
  visibility: hidden;
  transform: translateY(-10px);
  transition: all 0.2s ease;
}

/* Show dropdown on hover */
.profile-menu:hover .profile-dropdown {
  opacity: 1;
  visibility: visible;
  transform: translateY(0);
}

/* Rotate chevron on hover */
.profile-menu:hover .chevron-icon {
  transform: rotate(180deg);
}

.dropdown-item {
  display: block;
  padding: 0.75rem 1rem;
  color: var(--text-primary);
  text-decoration: none;
  font-size: 0.875rem;
  transition: background-color 0.2s ease;
}

.dropdown-item:hover {
  background-color: var(--bg-tertiary);
}

.dropdown-divider {
  height: 1px;
  background-color: var(--border-color);
  margin: 0.25rem 0;
}

/* Add small buffer zone to prevent unwanted dropdown closing */
.profile-menu::after {
  content: "";
  position: absolute;
  height: 0.5rem;
  width: 100%;
  bottom: -0.5rem;
  left: 0;
}

/* Ensure dropdown items are clickable */
.profile-dropdown {
  z-index: 100;
}

/* Make sure first and last items have rounded corners */
.dropdown-item:first-child {
  border-top-left-radius: 0.5rem;
  border-top-right-radius: 0.5rem;
}

.dropdown-item:last-child {
  border-bottom-left-radius: 0.5rem;
  border-bottom-right-radius: 0.5rem;
}

/* Login Button */
.login-button {
  padding: 0.625rem 1.25rem;
  background-color: var(--primary-color);
  color: var(--bg-primary);
  border: none;
  border-radius: 0.375rem;
  font-weight: 500;
  text-decoration: none;
  transition: var(--transition-default);
}

.login-button:hover {
  background-color: var(--primary-hover);
}

/* ===== AI Modal Styles ===== */
/* Overlay */
.ai-modal-overlay {
  position: fixed;
  inset: 0;
  background: transparent;
  backdrop-filter: blur(8px);
  z-index: 1000;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  animation: fadeIn 0.2s ease-out forwards;
}

/* Modal Container */
.ai-modal {
  position: relative;
  margin-left: 475px;
  width: 90%;
  max-width: 680px;
  height: 80vh;
  max-height: 800px;
  background: var(--bg-primary);
  border-radius: 16px;
  box-shadow: var(--shadow-lg);
  z-index: 1001;
  overflow: hidden;
  opacity: 0;
  transform: scale(0.95);
  animation: modalEnter 0.3s cubic-bezier(0.16, 1, 0.3, 1) forwards;
}

.ai-modal-content {
  display: flex;
  flex-direction: column;
  height: 100%;
  background: var(--bg-gradient);
}

/* Modal Header */
.ai-modal-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 20px 24px;
  background: var(--bg-primary);
  border-bottom: 1px solid var(--border-light);
}

.ai-modal-title {
  font-size: 1.125rem;
  font-weight: 600;
  color: var(--text-primary);
  display: flex;
  align-items: center;
  gap: 8px;
}

.ai-modal-title::before {
  content: "";
  display: inline-block;
  width: 8px;
  height: 8px;
  background: var(--success-color);
  border-radius: 50%;
  animation: pulse 2s infinite;
}

.ai-modal-close {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 32px;
  height: 32px;
  padding: 0;
  background: transparent;
  border: none;
  border-radius: 8px;
  color: var(--text-light);
  cursor: pointer;
  transition: var(--transition-default);
}

.ai-modal-close:hover {
  background-color: var(--bg-tertiary);
  color: var(--text-primary);
}

/* Chat Container */
.chat-container {
  flex: 1;
  overflow-y: auto;
  padding: 24px;
  scroll-behavior: smooth;
  background: var(--bg-gradient);
}

/* Message Styles */
.chat-message {
  margin-bottom: 20px;
  opacity: 0;
  animation: messageAppear 0.3s ease forwards;
}

.message-content {
  max-width: 85%;
  padding: 14px 18px;
  border-radius: 16px;
  font-size: 0.9375rem;
  line-height: 1.5;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  position: relative;
}

.user-message {
  display: flex;
  justify-content: flex-end;
}

.user-message .message-content {
  background: linear-gradient(135deg, #2563eb, #1d4ed8);
  color: var(--bg-primary);
  border-bottom-right-radius: 4px;
}

.ai-message .message-content {
  background: var(--bg-tertiary);
  color: var(--text-primary);
  border: 1px solid var(--border-light);
  border-bottom-left-radius: 4px;
}

.message-timestamp {
  font-size: 0.75rem;
  color: var(--text-light);
  margin-top: 6px;
  display: block;
}

/* Input Container */
.chat-input-container {
  padding: 20px 24px;
  background: var(--bg-primary);
  border-top: 1px solid var(--border-light);
  display: flex;
  gap: 12px;
  align-items: flex-end;
}

.chat-input {
  flex: 1;
  min-height: 40px;
  max-height: 40px;
  padding: 14px 16px;
  background: var(--bg-tertiary);
  border: 1px solid var(--border-light);
  border-radius: 12px;
  resize: none;
  font-size: 0.9375rem;
  line-height: 1.5;
  color: var(--text-primary);
  transition: var(--transition-default);
}

.chat-input:focus {
  outline: none;
  border-color: #2563eb;
  background: var(--bg-primary);
  box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
}

.chat-send-button {
  width: 48px;
  height: 48px;
  background: #2563eb;
  color: white;
  border: none;
  border-radius: 12px;
  cursor: pointer;
  transition: var(--transition-default);
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
}

.chat-send-button:hover {
  background: var(--primary-hover);
  transform: translateY(-1px);
}

.chat-send-button:active {
  transform: translateY(0);
}

.chat-send-button:disabled {
  background: #cbd5e1;
  cursor: not-allowed;
  transform: none;
}

.ai-modal-actions {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.clear-chat-button {
  padding: 0.5rem 1rem;
  background-color: #f3f4f6;
  border: none;
  border-radius: 0.375rem;
  color: #4b5563;
  font-size: 0.875rem;
  cursor: pointer;
  transition: background-color 0.2s;
}

.clear-chat-button:hover {
  background-color: #e5e7eb;
}

/* Typing Indicator */
.typing-indicator {
  display: flex;
  gap: 4px;
  padding: 16px;
  background: var(--bg-tertiary);
  border-radius: 16px;
  width: fit-content;
}

.typing-indicator span {
  width: 6px;
  height: 6px;
  background: #2563eb;
  border-radius: 50%;
  animation: bounce 1.4s infinite ease-in-out;
  opacity: 0.6;
}

/* ===== Animations ===== */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes modalEnter {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes messageAppear {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes pulse {
  0% {
    box-shadow: 0 0 0 0 rgba(34, 197, 94, 0.4);
  }
  70% {
    box-shadow: 0 0 0 6px rgba(34, 197, 94, 0);
  }
  100% {
    box-shadow: 0 0 0 0 rgba(34, 197, 94, 0);
  }
}

@keyframes bounce {
  0%,
  80%,
  100% {
    transform: translateY(0);
  }
  40% {
    transform: translateY(-4px);
  }
}

/* ===== Responsive Styles ===== */
/* Desktop and Tablet Landscape */
@media (max-width: 1024px) {
  .navbar-menu {
    display: none;
  }

  .search-input {
    width: 180px;
  }

  .ai-modal {
    margin-left: 0;
  }
}

/* Tablet Portrait */
@media (max-width: 768px) {
  .ai-modal {
    width: 95%;
  }

  .ai-modal-actions {
    flex-direction: column-reverse;
  }

  .ai-modal-button {
    width: 100%;
  }
}

/* Mobile */
@media (max-width: 640px) {
  .navbar-container {
    padding: 0.75rem 1rem;
  }

  .search-container {
    display: none;
  }

  .ai-modal {
    width: 100%;
    height: 100vh;
    max-height: none;
    border-radius: 0;
  }

  .chat-input-container {
    padding: 16px;
  }

  .message-content {
    max-width: 90%;
    font-size: 0.875rem;
  }
}

/* Height-based media query */
@media (min-height: 900px) {
  .ai-modal {
    height: 800px;
  }
}

/* ===== Dark Mode Styles ===== */
@media (prefers-color-scheme: dark) {
  :root {
    /* Dark mode colors */
    --bg-primary: #1f2937;
    --bg-secondary: #2d3748;
    --bg-tertiary: #374151;
    --text-primary: #f3f4f6;
    --text-secondary: #e5e7eb;
    --text-tertiary: #d1d5db;
    --border-color: #4b5563;
    --border-light: rgba(255, 255, 255, 0.1);
    --bg-gradient: linear-gradient(to bottom, #1f2937, #111827);
  }

  /* Dark mode specific overrides */
  .navbar {
    border-bottom: 1px solid var(--border-color);
  }

  .ai-modal {
    background-color: var(--bg-primary);
    border-color: var(--border-light);
  }

  .ai-modal-content {
    background: var(--bg-gradient);
  }

  .chat-container {
    background: var(--bg-gradient);
  }

  .ai-message .message-content {
    background-color: var(--bg-secondary);
    color: var(--text-primary);
    border-color: var(--border-light);
  }

  .chat-input {
    background-color: var(--bg-secondary);
    border-color: var(--text-tertiary);
    color: var(--text-primary);
  }

  .chat-input:focus {
    background-color: var(--bg-secondary);
    border-color: #3b82f6;
  }

  .message-timestamp {
    color: var(--text-light);
  }

  .typing-indicator {
    background-color: var(--bg-secondary);
  }

  /* Dark mode button states */
  .ai-assistant-button:hover {
    background-color: var(--bg-secondary);
  }

  .ai-modal-close:hover {
    background-color: var(--bg-secondary);
    color: var(--text-primary);
  }
}

/* ===== Modal Button Actions ===== */
.ai-modal-actions {
  display: flex;
  gap: 1rem;
  margin-top: 1rem;
}

.ai-modal-button {
  padding: 0.5rem 1rem;
  border-radius: 0.375rem;
  font-weight: 500;
  transition: var(--transition-default);
  cursor: pointer;
}

.ai-modal-button-primary {
  background-color: var(--primary-color);
  color: var(--bg-primary);
  border: none;
}

.ai-modal-button-primary:hover {
  background-color: var(--primary-hover);
}

.ai-modal-button-secondary {
  background-color: var(--bg-tertiary);
  color: var(--text-primary);
  border: 1px solid var(--border-color);
}

.ai-modal-button-secondary:hover {
  background-color: var(--border-color);
}

.markdown-content {
  line-height: 1.5;
}

.markdown-content p {
  margin: 0.5em 0;
}

.markdown-content code {
  background-color: rgba(0, 0, 0, 0.1);
  padding: 2px 4px;
  border-radius: 3px;
  font-family: monospace;
}

.markdown-content pre {
  background-color: rgba(0, 0, 0, 0.05);
  padding: 1em;
  border-radius: 4px;
  overflow-x: auto;
  margin: 1em 0;
}

.markdown-content blockquote {
  border-left: 3px solid #ccc;
  margin: 1em 0;
  padding-left: 1em;
  color: #666;
}

.markdown-content ul,
.markdown-content ol {
  margin: 0.5em 0;
  padding-left: 2em;
}

.markdown-content li {
  margin: 0.3em 0;
}

.markdown-content a {
  color: #0066cc;
  text-decoration: none;
}

.markdown-content a:hover {
  text-decoration: underline;
}

.markdown-content strong {
  font-weight: 600;
}

.markdown-content em {
  font-style: italic;
}

.markdown-content h1,
.markdown-content h2,
.markdown-content h3,
.markdown-content h4,
.markdown-content h5,
.markdown-content h6 {
  margin: 1em 0 0.5em;
  font-weight: 600;
  line-height: 1.3;
}

.markdown-content h1 {
  font-size: 2em;
}

.markdown-content h2 {
  font-size: 1.5em;
}

.markdown-content h3 {
  font-size: 1.3em;
}

.markdown-content h4 {
  font-size: 1.2em;
}

.markdown-content h5 {
  font-size: 1.1em;
}

.markdown-content h6 {
  font-size: 1em;
}

.markdown-content img {
  max-width: 100%;
  height: auto;
  margin: 1em 0;
  border-radius: 4px;
}

.markdown-content table {
  border-collapse: collapse;
  width: 100%;
  margin: 1em 0;
}

.markdown-content table th,
.markdown-content table td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: left;
}

.markdown-content table th {
  background-color: #f5f5f5;
  font-weight: 600;
}

.markdown-content table tr:nth-child(even) {
  background-color: #f9f9f9;
}

.markdown-content hr {
  border: none;
  border-top: 1px solid #ddd;
  margin: 1em 0;
}

/* Style adjustments for dark mode if needed */
@media (prefers-color-scheme: dark) {
  .markdown-content code {
    background-color: rgba(255, 255, 255, 0.1);
  }

  .markdown-content pre {
    background-color: rgba(255, 255, 255, 0.05);
  }

  .markdown-content blockquote {
    border-left-color: #666;
    color: #999;
  }

  .markdown-content a {
    color: #66b3ff;
  }

  .markdown-content table th {
    background-color: #2d2d2d;
  }

  .markdown-content table td,
  .markdown-content table th {
    border-color: #444;
  }

  .markdown-content table tr:nth-child(even) {
    background-color: #2a2a2a;
  }

  .markdown-content hr {
    border-top-color: #444;
  }
}

/* Mobile responsiveness */
@media (max-width: 768px) {
  .markdown-content {
    font-size: 0.95em;
  }

  .markdown-content pre {
    padding: 0.75em;
  }

  .markdown-content table {
    display: block;
    overflow-x: auto;
    white-space: nowrap;
  }
}

.dropdown {
  position: absolute;
  top: 100%;
  left: 0;
  width: 100%;
  background: #fff;
  border: 1px solid rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  margin-top: 0.5rem;
  box-shadow: 0 8px 12px rgba(0, 0, 0, 0.15);
  z-index: 10;
  overflow: hidden; /* Ensure no overflow for rounded corners */
  animation: fadeIn 0.3s ease-in-out;
}

.dropdown-item {
  padding: 0.75rem 1rem;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 0.9rem;
  font-weight: 500;
  color: #333;
  display: flex;
  align-items: center;
  gap: 0.5rem; /* Space for potential icons */
}

.dropdown-item:hover {
  background-color: #f9f9f9;
  color: #007bff; /* Add a primary color for hover text */
  transform: scale(1.02); /* Subtle zoom effect */
}

/* Divider between items */
.dropdown-item + .dropdown-item {
  border-top: 1px solid rgba(0, 0, 0, 0.05);
}

/* Add smooth fade-in animation */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}



================================================
File: src/components/Navbar/Navbar.jsx
================================================
"use client";

import { useState, useRef, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import { marked } from "marked";
import DOMPurify from "dompurify";
import "./Navbar.css";
import "./AIModal.css";
import logo from "./../../assets/logo.png";

import { NavLink } from "react-router-dom";

// Constants
const API_KEY = "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";
const STORAGE_KEY = "ai_chat_history";

// Configure marked options
marked.setOptions({
  breaks: true,
  gfm: true,
  headerIds: false,
  mangle: false,
});

// ChatMessage Component remains the same
const ChatMessage = ({ message }) => {
  const renderMarkdown = (content) => {
    const rawHtml = marked(content);
    const sanitizedHtml = DOMPurify.sanitize(rawHtml, {
      ALLOWED_TAGS: [
        "p",
        "br",
        "strong",
        "em",
        "code",
        "pre",
        "blockquote",
        "ul",
        "ol",
        "li",
        "a",
      ],
      ALLOWED_ATTR: ["href", "target", "rel"],
    });

    return { __html: sanitizedHtml };
  };

  return (
    <div
      className={`chat-message ${
        message.type === "user" ? "user-message" : "ai-message"
      }`}
    >
      <div className="message-content">
        <div
          dangerouslySetInnerHTML={renderMarkdown(message.content)}
          className="markdown-content"
        />
        <span className="message-timestamp">{message.timestamp}</span>
      </div>
    </div>
  );
};

// LoadingIndicator Component remains the same
const LoadingIndicator = () => (
  <div className="chat-message ai-message">
    <div className="message-content">
      <div className="typing-indicator">
        <span></span>
        <span></span>
        <span></span>
      </div>
    </div>
  </div>
);

// SearchBar Component remains the same
const SearchBar = () => {
  const [query, setQuery] = useState("");
  const [suggestions, setSuggestions] = useState([]);
  const navigate = useNavigate();

  // Mock data for search suggestions
  const items = [
    { id: 1, name: "Dynamic Prompts", path: "/dynamic-prompts" },
    { id: 2, name: "Content Generation", path: "/content-generation" },
    { id: 3, name: "Content Rewrite", path: "/content-rewrite" },
    { id: 4, name: "Summarization", path: "/summarization" },
    { id: 5, name: "Translation", path: "/translation" },
    { id: 6, name: "Idea Generation", path: "/idea-generation" },
    { id: 7, name: "Data Insights", path: "/data-insights-generator" },
    { id: 8, name: "Contextual Learning", path: "/contextual-learning" },
    { id: 9, name: "Content Anonymizer", path: "/content-anonymizer" },
    { id: 10, name: "Vocalscript", path: "/vocal-script" },
  ];

  // Handle input change and filter suggestions
  const handleInputChange = (e) => {
    const value = e.target.value;
    setQuery(value);

    if (value.trim() !== "") {
      const filteredSuggestions = items.filter((item) =>
        item.name.toLowerCase().includes(value.toLowerCase())
      );
      setSuggestions(filteredSuggestions);
    } else {
      setSuggestions([]);
    }
  };

  // Handle click on a suggestion
  const handleSuggestionClick = (path) => {
    navigate(path); // Navigate to the selected path
    setQuery("");
    setSuggestions([]);
  };

  return (
    <div className="search-container">
      <input
        type="text"
        placeholder="Search AI-enhanced..."
        className="search-input"
        value={query}
        onChange={handleInputChange}
      />
      <button className="search-button">
        <svg
          className="search-icon"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
          />
        </svg>
      </button>
      {suggestions.length > 0 && (
        <div className="dropdown">
          {suggestions.map((item) => (
            <div
              key={item.id}
              className="dropdown-item"
              onClick={() => handleSuggestionClick(item.path)}
            >
              {item.name}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

// AIModal Component remains the same (no changes needed)
const AIModal = ({
  isOpen,
  onClose,
  chatMessages,
  aiQuery,
  setAIQuery,
  handleAISubmit,
  isLoading,
  chatContainerRef,
  handleClearChat,
}) => {
  const handleKeyPress = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleAISubmit();
    }
  };

  if (!isOpen) return null;

  return (
    <>
      <div className="ai-modal-overlay" onClick={onClose}></div>
      <div className="ai-modal">
        <div className="ai-modal-content">
          <div className="ai-modal-header">
            <h2 className="ai-modal-title">AI Assistant</h2>
            <div className="ai-modal-actions">
              <button className="clear-chat-button" onClick={handleClearChat}>
                Clear Chat
              </button>
              <button className="ai-modal-close" onClick={onClose}>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <line x1="18" y1="6" x2="6" y2="18"></line>
                  <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
              </button>
            </div>
          </div>

          <div className="chat-container" ref={chatContainerRef}>
            {chatMessages.map((message, index) => (
              <ChatMessage key={index} message={message} />
            ))}
            {isLoading && <LoadingIndicator />}
          </div>

          <div className="chat-input-container">
            <textarea
              className="chat-input"
              placeholder="Type your message... (Markdown supported)"
              value={aiQuery}
              onChange={(e) => setAIQuery(e.target.value)}
              onKeyPress={handleKeyPress}
            ></textarea>
            <button
              className="chat-send-button"
              onClick={handleAISubmit}
              disabled={isLoading || !aiQuery.trim()}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              >
                <line x1="22" y1="2" x2="11" y2="13"></line>
                <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </>
  );
};

// Updated ProfileMenu Component
const ProfileMenu = ({
  userType,
  isLoggedIn,
  isProfileMenuOpen,
  toggleProfileMenu,
  handleSignOut,
}) => {
  // If user is a guest, return the login button in the same container
  if (userType === "guest") {
    return (
      <div className="profile-menu">
        <Link to="/login">
          <button className="login-button">Login</button>
        </Link>
      </div>
    );
  }

  // Existing logic for logged-in and non-guest users remains the same
  return (
    <div className="profile-menu">
      {isLoggedIn ? (
        <>
          <button className="profile-button" onClick={toggleProfileMenu}>
            <span className="profile-name">Profile</span>
            <svg
              className="chevron-icon"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M19 9l-7 7-7-7"
              />
            </svg>
          </button>

          {isProfileMenuOpen && (
            <div className="profile-dropdown">
              <Link to="/profile" className="dropdown-item">
                Profile
              </Link>
              <Link to="/settings" className="dropdown-item">
                Settings
              </Link>
              <Link to="/help" className="dropdown-item">
                Help & Support
              </Link>
              <div className="dropdown-divider"></div>
              <Link className="dropdown-item" onClick={handleSignOut}>
                Sign Out
              </Link>
            </div>
          )}
        </>
      ) : (
        <Link to="/login">
          <button className="login-button">Login</button>
        </Link>
      )}
    </div>
  );
};

// Main Navbar Component
const Navbar = ({ isLoggedIn, handleLogout, userType }) => {
  const [isProfileMenuOpen, setProfileMenuOpen] = useState(false);
  const [isAIAssistantOpen, setAIAssistantOpen] = useState(false);
  const [aiQuery, setAIQuery] = useState("");
  const [chatMessages, setChatMessages] = useState(() => {
    const savedHistory = localStorage.getItem(STORAGE_KEY);
    return savedHistory ? JSON.parse(savedHistory) : [];
  });
  const [isLoading, setIsLoading] = useState(false);
  const chatContainerRef = useRef(null);
  const navigate = useNavigate();

  // Save chat history to localStorage whenever it changes
  useEffect(() => {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(chatMessages));
  }, [chatMessages]);

  // Scroll to bottom whenever messages change
  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop =
        chatContainerRef.current.scrollHeight;
    }
  }, [chatMessages]);

  const toggleProfileMenu = () => setProfileMenuOpen(!isProfileMenuOpen);

  const toggleAIAssistant = () => {
    setAIAssistantOpen(!isAIAssistantOpen);
    if (!isAIAssistantOpen) {
      setAIQuery("");
    }
  };

  const handleSignOut = () => {
    handleLogout();
    setProfileMenuOpen(false);
    navigate("/login");
  };

  const handleClearChat = () => {
    setChatMessages([]);
    localStorage.removeItem(STORAGE_KEY);
  };

  const handleAISubmit = async () => {
    if (!aiQuery.trim()) return;

    const userMessage = {
      type: "user",
      content: aiQuery,
      timestamp: new Date().toLocaleTimeString([], {
        hour: "2-digit",
        minute: "2-digit",
      }),
    };

    // Format previous messages for context
    const previousMessages = chatMessages.map((msg) => ({
      role: msg.type === "user" ? "user" : "assistant",
      content: msg.content,
    }));

    setChatMessages((prev) => [...prev, userMessage]);
    setAIQuery("");
    setIsLoading(true);

    try {
      const response = await fetch(
        "https://api.perplexity.ai/chat/completions",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${API_KEY}`,
          },
          body: JSON.stringify({
            model: "sonar",
            messages: [
              {
                role: "system",
                content:
                  "You are a helpful AI assistant for SyncOps, a project management and collaboration platform. Provide concise, helpful responses to user queries.",
              },
              ...previousMessages,
              {
                role: "user",
                content: aiQuery,
              },
            ],
            temperature: 0.7,
            max_tokens: 500,
          }),
        }
      );

      if (!response.ok) {
        throw new Error(`API request failed with status: ${response.status}`);
      }

      const data = await response.json();
      const aiResponse = {
        type: "ai",
        content:
          data.choices?.[0]?.message?.content ||
          "No response generated. Please try again.",
        timestamp: new Date().toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
        }),
      };

      setChatMessages((prev) => [...prev, aiResponse]);
    } catch (error) {
      console.error("Error with Perplexity API:", error);
      const errorResponse = {
        type: "ai",
        content:
          "Sorry, I couldn't process your request at the moment. Please try again later.",
        timestamp: new Date().toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
        }),
      };
      setChatMessages((prev) => [...prev, errorResponse]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <nav className="navbar">
      <div className="navbar-container">
        <div className="navbar-logo">
          <img
            src={logo || "/placeholder.svg"}
            alt="Logo"
            className="logo-image"
          />
          <span className="logo-text">SyncOps</span>
        </div>

        <div className="navbar-menu">
          <NavLink to="/dashboard" className="nav-link">
            Dashboard
          </NavLink>
          <NavLink to="/projects" className="nav-link">
            Projects
          </NavLink>
          <NavLink to="/tasks" className="nav-link">
            Tasks
          </NavLink>
          <NavLink to="/analytics" className="nav-link">
            Analytics
          </NavLink>
          <NavLink to="/resources" className="nav-link">
            Resources
          </NavLink>
          <NavLink to="/chatroom" className="nav-link">
            Chat
          </NavLink>
        </div>

        <div className="navbar-actions">
          <SearchBar />

          <button className="ai-assistant-button" onClick={toggleAIAssistant}>
            <svg
              className="ai-icon"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M3 10h11M9 21V3M4 14l5 5m0-5l-5-5"
              />
            </svg>
            AI
          </button>

          <ProfileMenu
            isLoggedIn={isLoggedIn}
            isProfileMenuOpen={isProfileMenuOpen}
            toggleProfileMenu={toggleProfileMenu}
            handleSignOut={handleSignOut}
            userType={userType}
          />
        </div>
      </div>

      <AIModal
        isOpen={isAIAssistantOpen}
        onClose={toggleAIAssistant}
        chatMessages={chatMessages}
        aiQuery={aiQuery}
        setAIQuery={setAIQuery}
        handleAISubmit={handleAISubmit}
        isLoading={isLoading}
        chatContainerRef={chatContainerRef}
        handleClearChat={handleClearChat}
      />
    </nav>
  );
};

export default Navbar;



================================================
File: src/components/Sidebar/Sidebar.css
================================================
:root {
  /* Global Variables */
  --navbar-height: 60px;
  --sidebar-width: 240px;
  --sidebar-collapsed-width: 70px;

  /* Color Palette */
  --sidebar-bg: linear-gradient(145deg, #1a1e2a, #242832);
  --sidebar-hover-bg: linear-gradient(145deg, #2c3242, #353a45);
  --icon-color: #00bcd4; /* Cyan blue */
  --text-color: #e6e6e6;
  --active-bg: #e6e6e6;
  --active-text-color: #1a1e2a;
  --sidebar-border: rgba(255, 255, 255, 0.07);
  --sidebar-item-hover: rgba(255, 255, 255, 0.05);

  /* Shadows and Transitions */
  --box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
  --transition-speed: 0.25s;
  --transition-timing: cubic-bezier(0.4, 0, 0.2, 1);
}

/* Sidebar Styles */
.sidebar {
  width: var(--sidebar-width);
  height: calc(100vh - 80px); /* Adjusted for header */
  position: fixed;
  top: 66px; /* Margin for header */
  left: 0;
  background: var(--sidebar-bg);
  display: flex;
  flex-direction: column;
  padding: 0.75rem 0; /* Reduced padding */
  box-shadow: var(--box-shadow);
  overflow: hidden; /* Changed from overflow-x to overflow */
  will-change: width;
  transition: width var(--transition-speed) var(--transition-timing),
    transform var(--transition-speed) var(--transition-timing);
  z-index: 1000;
  backface-visibility: hidden;
  transform: translateZ(0);
  border-right: 1px solid rgba(255, 255, 255, 0.03);
}

.sidebar.collapsed {
  width: var(--sidebar-collapsed-width);
}

/* Sidebar Header */
.sidebar-header {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  padding: 0 1rem;
  margin-bottom: 0.75rem; 
  border-bottom: 1px solid var(--sidebar-border);
  height: 50px;
}

.menu-button {
  background: transparent;
  border: none;
  color: var(--icon-color);
  font-size: 1.5rem;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0.5rem;
  border-radius: 50%;
  transition: color 0.2s ease, background-color 0.2s ease, transform 0.2s ease, box-shadow 0.2s ease;
  width: 36px;
  height: 36px;
}

.menu-button:hover {
  color: #fff;
  background-color: rgba(0, 188, 212, 0.1);
  transform: scale(1.05);
  box-shadow: 0 0 15px rgba(0, 188, 212, 0.2);
}

.menu-button:active {
  transform: scale(0.95);
}

/* Sidebar List */
.sidebar-list {
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
  flex-direction: column;
  gap: 0.25rem; /* Slightly increased gap for better spacing */
  padding: 0 0.5rem;
}

.sidebar-item {
  width: 100%;
  position: relative;
}

.sidebar-link {
  display: flex;
  align-items: center;
  padding: 0.65rem 0.75rem;
  color: var(--text-color);
  text-decoration: none;
  border-radius: 8px;
  margin: 0 0.25rem;
  transition: all 0.2s ease;
  position: relative;
  overflow: hidden;
  font-weight: 500;
  letter-spacing: 0.2px;
}

.sidebar-link::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 4px;
  height: 100%;
  background: var(--icon-color);
  transform: scaleY(0);
  transform-origin: bottom;
  transition: transform 0.3s ease;
  opacity: 0.7;
  border-radius: 0 2px 2px 0;
}

.sidebar-link:hover {
  /* background-color: var(--sidebar-item-hover); */
  transform: translateX(2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.sidebar-link:hover::before {
  transform: scaleY(0.6);
}

.icon {
  font-size: 1.4rem;
  color: var(--icon-color);
  margin-right: 0.75rem;
  transition: transform 0.2s ease, color 0.2s ease;
  position: relative;
  z-index: 2;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 24px;
  height: 24px;
}

.label {
  white-space: nowrap;
  overflow: hidden;
  opacity: 1;
  transition: opacity var(--transition-speed) ease, transform 0.2s ease;
  position: relative;
  z-index: 2;
  font-size: 0.95rem;
}

/* Active Link - Enhanced */
.active-link {
  background: var(--active-bg);
  color: var(--active-text-color);
  box-shadow: 0 4px 15px rgba(0, 188, 212, 0.3);
  font-weight: 600;
}

.active-link::before {
  transform: scaleY(1) !important;
  opacity: 1;
}

.active-link .icon {
  color: var(--active-text-color);
  transform: scale(1.1);
}

.active-link .label {
  transform: translateX(2px);
}

/* Add subtle right border for active link */
.active-link::after {
  content: "";
  position: absolute;
  top: 0;
  right: 0;
  height: 100%;
  width: 3px;
  background: linear-gradient(to bottom, transparent, var(--icon-color), transparent);
  opacity: 0.5;
}

/* Collapsed Sidebar - Enhanced */
.sidebar.collapsed .label {
  width: 0;
  opacity: 0;
  transform: translateX(-20px);
  overflow: hidden;
}

.sidebar.collapsed .sidebar-link {
  justify-content: center;
  padding: 0.75rem 0;
}

.sidebar.collapsed .icon {
  margin-right: 0;
  font-size: 1.5rem;
}

.sidebar.collapsed .active-link::before {
  width: 100%;
  height: 3px;
  top: auto;
  bottom: 0;
  left: 0;
  transform: scaleX(1) !important;
}

.sidebar.collapsed .active-link::after {
  display: none;
}

/* Tooltip for collapsed sidebar */
.sidebar.collapsed .sidebar-link {
  position: relative;
}

.sidebar.collapsed .sidebar-link:hover::after {
  content: attr(data-title);
  position: absolute;
  left: 100%;
  top: 50%;
  transform: translateY(-50%);
  background: #2c3242;
  color: var(--text-color);
  padding: 0.5rem 0.75rem;
  border-radius: 6px;
  font-size: 0.875rem;
  white-space: nowrap;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
  z-index: 1000;
  margin-left: 10px;
  font-weight: 500;
  letter-spacing: 0.2px;
}

/* Add a small arrow for the tooltip */
.sidebar.collapsed .sidebar-link:hover::before {
  content: "";
  position: absolute;
  left: calc(100% - 5px);
  top: 50%;
  transform: translateY(-50%) rotate(45deg);
  width: 10px;
  height: 10px;
  background: #2c3242;
  z-index: 999;
}

/* Main Content */
.main-content {
  margin-left: var(--sidebar-width);
  padding: 20px;
  transition: margin-left var(--transition-speed) var(--transition-timing);
  will-change: margin-left;
}

.main-content.sidebar-collapsed {
  margin-left: var(--sidebar-collapsed-width);
} 

/* Category Dividers - New */
.sidebar-category {
  font-size: 0.75rem;
  text-transform: uppercase;
  color: rgba(255, 255, 255, 0.4);
  padding: 0.75rem 1.25rem 0.5rem;
  letter-spacing: 1px;
  font-weight: 600;
  margin-top: 0.5rem;
}

/* Responsive Considerations - Enhanced */
@media (max-width: 768px) {
  .sidebar {
    top: 0; /* Reset top position for mobile */
    height: 100vh; /* Full height on mobile */
    left: -var(--sidebar-width);
    transition: left var(--transition-speed) var(--transition-timing),
      visibility var(--transition-speed) var(--transition-timing);
    box-shadow: none;
  }

  .sidebar.collapsed {
    left: -var(--sidebar-collapsed-width);
  }

  .sidebar.expanded {
    left: 0;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
  }

  .main-content {
    margin-left: 0;
  }
  
  /* Ensure active indicators are visible on mobile */
  .active-link::before {
    width: 5px; /* Slightly wider for better visibility on mobile */
  }
  
  /* Mobile overlay when sidebar is open */
  .sidebar-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 999;
    opacity: 0;
    pointer-events: none;
    transition: opacity var(--transition-speed) ease;
  }
  
  .sidebar-overlay.active {
    opacity: 1;
    pointer-events: all;
  }
}

/* Subtle hover effect for menu items */
.sidebar-link:hover .icon {
  transform: translateY(-1px);
}

.sidebar-link:hover .label {
  transform: translateX(3px);
}

/* Active item glow effect */
.active-link {
  position: relative;
}

.active-link::before {
  box-shadow: 0 0 10px rgba(0, 188, 212, 0.5);
}

/* Subtle separator between groups of items */
.sidebar-separator {
  height: 1px;
  background: linear-gradient(to right, transparent, var(--sidebar-border), transparent);
  margin: 0.75rem 1rem;
  opacity: 0.5;
}

/* Collapsed state improvements */
.sidebar.collapsed .sidebar-link:hover {
  background-color: var(--sidebar-item-hover);
  transform: scale(1.1);
}

.sidebar.collapsed .active-link {
  background-color: var(--active-bg);
  transform: scale(1.1);
}

/* Subtle scroll indicator when content overflows */
.sidebar::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  height: 30px;
  background: linear-gradient(to top, var(--sidebar-bg), transparent);
  pointer-events: none;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.sidebar.has-overflow::after {
  opacity: 1;
}


================================================
File: src/components/Sidebar/Sidebar.jsx
================================================
"use client"

import React, { useState, useEffect } from "react";
import { useLocation } from "react-router-dom";
import {
  FaBars,
  FaRobot, // AI Icon for Dynamic Prompts
  FaTextWidth, // For Summarization
  FaLanguage, // For Translation
  FaPen, // For Write API
  FaSync, // For Content Rewrite
  FaRegLightbulb, // For Idea Generation
  FaChartLine,
  FaBrain,
  FaUserSecret,
  FaMicrophoneAlt
} from "react-icons/fa";
import { Link } from "react-router-dom";
import "./Sidebar.css";

const Sidebar = () => {
  const [isExpanded, setIsExpanded] = useState(true);
  const location = useLocation();

  const toggleSidebar = () => {
    setIsExpanded(!isExpanded);
  };

  // Check if a link is active based on the current path
  const isActive = (path) => {
    // Convert both to lowercase for case-insensitive comparison
    const currentPath = location.pathname.toLowerCase();
    path = path.toLowerCase();
    
    // Check if the current path matches the link path
    return currentPath === path;
  };

  useEffect(() => {
    document.body.style.setProperty(
      "--sidebar-width",
      isExpanded ? "240px" : "70px"
    );
  }, [isExpanded]);

  const sidebarItems = [
    {
      icon: <FaRobot />,
      name: "Dynamic Prompts",
      link: "/dynamic-prompts",
    },
    {
      icon: <FaPen />,
      name: "Content Generation",
      link: "/content-generation",
    },
    {
      icon: <FaSync />,
      name: "Content Rewrite",
      link: "/content-rewrite",
    },
    {
      icon: <FaTextWidth />,
      name: "Summarization",
      link: "/summarization",
    },
    {
      icon: <FaLanguage />,
      name: "Translation",
      link: "/translation",
    },
    {
      icon: <FaRegLightbulb />,
      name: "Idea Generation",
      link: "/idea-generation",
    },
    {
      icon: <FaChartLine />,
      name: "Data Insights",
      link: "/data-insights-generator",
    },
    {
      icon: <FaBrain />,
      name: "Contextual Learning",
      link: "/contextual-learning",
    },
    {
      icon: <FaUserSecret />,
      name: "Content Anonymizer",
      link: "/content-anonymizer",
    },
    {
      icon: <FaMicrophoneAlt />,
      name: "VocalScript",
      link: "/vocal-script",
    },
  ];

  return (
    <nav className={`sidebar ${isExpanded ? "expanded" : "collapsed"}`}>
      <div className="sidebar-header">
        <button onClick={toggleSidebar} className="menu-button">
          <FaBars />
        </button>
      </div>
      <ul className="sidebar-list">
        {sidebarItems.map((item, index) => (
          <li key={index} className="sidebar-item">
            <Link
              to={item.link}
              className={`sidebar-link ${isActive(item.link) ? "active-link" : ""}`}
              data-title={item.name}
            >
              <span className="icon">{item.icon}</span>
              {isExpanded && <span className="label">{item.name}</span>}
            </Link>
          </li>
        ))}
      </ul>
    </nav>
  );
};

export default Sidebar;


================================================
File: src/components/i18n/i18n.js
================================================
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';

const resources = {
  en: {
    translation: {
      "AI Powered Assistance": "AI Powered Assistance",
      "Search for tasks or content...": "Search for tasks or content...",
      "Submit": "Submit",
      "Response": "Response",
      "English": "English",
      "Spanish": "Spanish",
      // Add other translations here
    },
  },
  es: {
    translation: {
      "AI Powered Assistance": "Asistencia impulsada por IA",
      "Search for tasks or content...": "Buscar tareas o contenido...",
      "Submit": "Enviar",
      "Response": "Respuesta",
      "English": "InglÃ©s",
      "Spanish": "EspaÃ±ol",
      // Add other translations here
    },
  },
};

i18n.use(initReactI18next).init({
  resources,
  lng: 'en',  // Set the default language to English
  interpolation: {
    escapeValue: false,  // React already escapes HTML
  },
});

export default i18n;



================================================
File: src/pages/AIAccessibility/AIAccessibility.css
================================================
.access-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 80vh;
  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
  padding: 20px;
  border-radius: 25px;
}

.access-card {
  background: white;
  border-radius: 20px;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
  width: 100%;
  max-width: 1500px;
  overflow: hidden;
  transition: transform 0.3s ease;
  position: relative;
}

.access-card:hover {
  transform: translateY(0px);
}

.access-header {
  padding: 30px;
  background: linear-gradient(135deg, #00c6ff 0%, #0072ff 100%);
  color: white;
  text-align: center;
}

.access-title {
  font-size: 2.5rem;
  font-weight: 700;
  margin: 0;
  background: linear-gradient(to right, #fff, #e0e0e0);
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
}

.access-subtitle {
  font-size: 1.1rem;
  opacity: 0.9;
  margin: 10px 0 0;
}

.access-content {
  padding: 30px;
}

.access-input-group {
  margin-bottom: 20px;
}

.access-textarea {
  width: 95%;
  height: 150px;
  padding: 15px;
  border: 2px solid #e0e0e0;
  border-radius: 12px;
  font-size: 1rem;
  resize: none;
  transition: border-color 0.3s ease, box-shadow 0.3s ease;
  margin-bottom: 15px;
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
}

.access-textarea:focus {
  outline: none;
  border-color: #0072ff;
  box-shadow: 0 0 0 3px rgba(0, 114, 255, 0.1);
}

.access-voice-select {
  width: 98%;
  padding: 12px;
  border: 2px solid #e0e0e0;
  border-radius: 12px;
  font-size: 1rem;
  background-color: white;
  cursor: pointer;
  transition: all 0.3s ease;
}

.access-voice-select:focus {
  outline: none;
  border-color: #0072ff;
  box-shadow: 0 0 0 3px rgba(0, 114, 255, 0.1);
}

.access-controls {
  display: flex;
  gap: 15px;
  justify-content: center;
  margin-top: 20px;
}

.access-button {
  padding: 12px 24px;
  border: none;
  border-radius: 50px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  background: linear-gradient(135deg, #00c6ff 0%, #0072ff 100%);
  color: white;
  min-width: 180px;
  max-width: 300px;
  display: inline-block;
  text-align: center;
  letter-spacing: 1px;
  box-shadow: 0 4px 12px rgba(0, 114, 255, 0.2);
  text-transform: uppercase;
}

.access-button:hover:not(.access-button-disabled) {
  transform: translateY(0px);
  box-shadow: 0 12px 24px rgba(0, 114, 255, 0.3);
  background: linear-gradient(135deg, #0072ff 0%, #00c6ff 100%);
}

.access-button:active:not(.access-button-disabled) {
  transform: translateY(0);
  box-shadow: 0 6px 16px rgba(0, 114, 255, 0.2);
}

.access-button-disabled {
  background: #e0e0e0;
  color: #9e9e9e;
  cursor: not-allowed;
  box-shadow: none;
}

.access-button-disabled:hover {
  transform: none;
  box-shadow: none;
}

.access-button-stop {
  background: linear-gradient(135deg, #ff6b6b 0%, #ee0000 100%);
}

.access-error {
  color: #ff6b6b;
  text-align: center;
  margin: 10px 0;
  padding: 10px;
  border-radius: 8px;
  background-color: rgba(255, 107, 107, 0.1);
}

.access-footer {
  margin-top: 20px;
  text-align: center;
}

.access-status {
  color: #666;
  font-size: 0.9rem;
  margin: 0;
}

/* Mode selection styles */
.mode-selection .access-content {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 200px;
}

.mode-buttons {
  display: flex;
  gap: 20px;
  justify-content: center;
}

.mode-button {
  padding: 20px 40px;
  font-size: 1.2rem;
}

.mode-switch-button {
  position: absolute;
  bottom: 20px;
  left: 50%;
  transform: translateX(-50%);
  background: linear-gradient(135deg, #6b66ff 0%, #4b45ff 100%);
}

/* Video container styles */
.access-video-container {
  display: flex;
  flex-direction: column;
  gap: 20px;
  margin-bottom: 20px;
}

.access-file-input {
  display: none;
}

.access-video-upload-area {
  width: 100%;
  min-height: 300px;
  border: 3px dashed #e0e0e0;
  border-radius: 12px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  transition: all 0.3s ease;
  background-color: #f8f9fa;
}

.access-video-upload-area:hover {
  border-color: #0072ff;
  background-color: rgba(0, 114, 255, 0.05);
}

.access-upload-placeholder {
  text-align: center;
  color: #666;
}

.upload-icon {
  font-size: 3rem;
  margin-bottom: 15px;
  display: block;
}

.upload-hint {
  font-size: 0.9rem;
  color: #999;
  margin-top: 8px;
}

.access-video-preview {
  width: 100%;
  max-height: 400px;
  border-radius: 12px;
  object-fit: contain;
}

/* Loading states */
.access-loading {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 10px;
  color: #0072ff;
}

.access-loading-spinner {
  width: 20px;
  height: 20px;
  border: 3px solid #f3f3f3;
  border-top: 3px solid #0072ff;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .access-card {
    margin: 10px;
  }

  .access-title {
    font-size: 2rem;
  }

  .mode-buttons {
    flex-direction: column;
  }

  .access-controls {
    flex-direction: column;
  }

  .access-button {
    width: 100%;
  }

  .access-video-upload-area {
    min-height: 200px;
  }
}

/* Accessibility improvements */
.access-button:focus,
.access-video-upload-area:focus {
  outline: none;
  box-shadow: 0 0 0 3px rgba(0, 114, 255, 0.3);
}

/* Animation for status updates */
.access-status {
  animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}



================================================
File: src/pages/AIAccessibility/AIAccessibility.jsx
================================================
"use client"

import React, { useState, useEffect, useRef } from "react";
import "./AIAccessibility.css";

const AIAccessibility = () => {
  const [mode, setMode] = useState(null);
  const [content, setContent] = useState("");
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [voices, setVoices] = useState([]);
  const [selectedVoice, setSelectedVoice] = useState("en-US");
  const [videoFile, setVideoFile] = useState(null);
  const [videoUrl, setVideoUrl] = useState(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const fileInputRef = useRef(null);
  const mediaRecorderRef = useRef(null);
  const audioChunksRef = useRef([]);

  // API Configuration - Perplexity API
  const PERPLEXITY_API_KEY = "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";
  const PERPLEXITY_API_URL = "https://api.perplexity.ai/chat/completions";

  // Constants for video validation
  const MAX_VIDEO_SIZE = 20 * 1024 * 1024; // 20MB
  const SUPPORTED_FORMATS = ["video/mp4", "video/webm", "video/quicktime"];

  useEffect(() => {
    if (mode === "speech") {
      const loadVoices = () => {
        const availableVoices = window.speechSynthesis.getVoices();
        setVoices(availableVoices.length ? availableVoices : []);
      };

      window.speechSynthesis.onvoiceschanged = loadVoices;
      loadVoices();
    }
  }, [mode]);

  useEffect(() => {
    return () => {
      if (videoUrl) {
        URL.revokeObjectURL(videoUrl);
      }
    };
  }, [videoUrl]);

  const processWithAI = async (text) => {
    try {
      setIsLoading(true);
      setError(null);

      const response = await fetch(PERPLEXITY_API_URL, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${PERPLEXITY_API_KEY}`
        },
        body: JSON.stringify({
          model: "sonar",
          messages: [
            {
              role: "system",
              content: "You are an AI assistant that enhances text to make it more natural and accessible for text-to-speech applications."
            },
            {
              role: "user",
              content: `Enhance this text for natural speech synthesis, making it more conversational and easier to understand when spoken aloud: ${text}`
            }
          ],
          temperature: 0.7,
          max_tokens: 1024
        }),
      });

      if (!response.ok) {
        throw new Error("AI text processing failed");
      }

      const data = await response.json();
      return data.choices[0].message.content;
    } catch (err) {
      console.error("AI Processing Error:", err);
      return text;
    } finally {
      setIsLoading(false);
    }
  };

  const extractFrameFromVideo = async (videoFile) => {
    return new Promise((resolve, reject) => {
      const video = document.createElement("video");
      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d");

      video.onloadeddata = () => {
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        ctx.drawImage(video, 0, 0);
        canvas.toBlob(
          (blob) => {
            resolve(blob);
          },
          "image/jpeg",
          0.95
        );
      };

      video.onerror = reject;
      video.src = URL.createObjectURL(videoFile);
      video.load();
    });
  };

  const processVideoWithAI = async (videoFile) => {
    try {
      if (!SUPPORTED_FORMATS.includes(videoFile.type)) {
        setError("Unsupported video format. Please use MP4, WebM, or MOV.");
        return;
      }

      if (videoFile.size > MAX_VIDEO_SIZE) {
        setError("Video file is too large. Maximum size is 20MB.");
        return;
      }

      setIsProcessing(true);
      setError(null);

      const frameBlob = await extractFrameFromVideo(videoFile);
      const frameBase64 = await new Promise((resolve) => {
        const reader = new FileReader();
        reader.onloadend = () => resolve(reader.result.split(",")[1]);
        reader.readAsDataURL(frameBlob);
      });

      // For Perplexity, we'll describe the image since it doesn't directly support image input
      // We'll create a detailed description of what we're trying to do
      const response = await fetch(PERPLEXITY_API_URL, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${PERPLEXITY_API_KEY}`
        },
        body: JSON.stringify({
          model: "sonar",
          messages: [
            {
              role: "system",
              content: "You are an AI assistant that helps analyze video content for accessibility purposes."
            },
            {
              role: "user",
              content: `I've extracted a frame from a video to analyze its content. Based on common video content patterns, please provide a detailed description of what might be happening in this video. Include possible subjects, actions, settings, and any other relevant details that would help someone who cannot see the video understand its content. This is for accessibility purposes.`
            }
          ],
          temperature: 0.4,
          max_tokens: 2048
        }),
      });

      if (!response.ok) {
        throw new Error("Video processing failed");
      }

      const data = await response.json();
      setContent(data.choices[0].message.content);
    } catch (err) {
      console.error("Video Processing Error:", err);
      setError("Failed to process video");
    } finally {
      setIsProcessing(false);
    }
  };

  const handleTextToSpeech = async () => {
    if (!content.trim()) {
      setError("Please enter some text to convert to speech.");
      return;
    }

    try {
      const enhancedText = await processWithAI(content);
      const speech = new SpeechSynthesisUtterance(enhancedText);

      const selectedVoiceObj =
        voices.find((voice) => voice.lang === selectedVoice) || voices[0];

      if (selectedVoiceObj) {
        speech.voice = selectedVoiceObj;
      }

      speech.rate = 1;
      speech.pitch = 1;

      speech.onstart = () => setIsSpeaking(true);
      speech.onend = () => setIsSpeaking(false);
      speech.onerror = () => {
        setIsSpeaking(false);
        setError("Speech synthesis error");
      };

      window.speechSynthesis.cancel();
      window.speechSynthesis.speak(speech);
    } catch (err) {
      console.error("Speech Error:", err);
      setError("Failed to convert text to speech");
    }
  };

  const handleVideoUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      if (!file.type.startsWith("video/")) {
        setError("Please upload a valid video file.");
        return;
      }

      if (file.size > MAX_VIDEO_SIZE) {
        setError("Video file size should be less than 20MB.");
        return;
      }

      setVideoFile(file);
      setVideoUrl(URL.createObjectURL(file));
      setError(null);
      setContent("");
    }
  };

  const handleProcessVideo = async () => {
    if (!videoFile) {
      setError("Please upload a video first.");
      return;
    }
    await processVideoWithAI(videoFile);
  };

  const stopTextToSpeech = () => {
    window.speechSynthesis.cancel();
    setIsSpeaking(false);
  };

  const handleVoiceChange = (e) => {
    setSelectedVoice(e.target.value);
  };

  const triggerFileInput = () => {
    fileInputRef.current.click();
  };

  const startSpeechRecognition = () => {
    if (!("webkitSpeechRecognition" in window)) {
      setError("Speech recognition not supported in this browser");
      return;
    }

    const recognition = new window.webkitSpeechRecognition();
    recognition.continuous = false;
    recognition.interimResults = false;
    recognition.lang = selectedVoice;

    recognition.onstart = () => {
      setIsRecording(true);
      setError(null);
    };

    recognition.onresult = async (event) => {
      const transcript = event.results[0][0].transcript;
      const enhancedTranscript = await processWithAI(transcript);
      setContent(enhancedTranscript);
    };

    recognition.onerror = (event) => {
      setIsRecording(false);
      setError(`Speech recognition error: ${event.error}`);
    };

    recognition.onend = () => {
      setIsRecording(false);
    };

    recognition.start();
  };

  if (!mode) {
    return (
      <div className="access-container">
        <div className="access-card mode-selection">
          <div className="access-header">
            <h1 className="access-title">Choose Mode</h1>
            <p className="access-subtitle">
              Select your preferred conversion mode
            </p>
          </div>
          <div className="access-content">
            <div className="mode-buttons">
              <button
                className="access-button mode-button"
                onClick={() => setMode("speech")}
              >
                Text to Speech
              </button>
              {/* <button
                className="access-button mode-button"
                onClick={() => setMode("video")}
              >
                Video to Text
              </button> */}
              <button
                className="access-button mode-button"
                onClick={() => setMode("audio")}
              >
                Speech to Text
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="access-container">
      <div className="access-card">
        <div className="access-header">
          <h1 className="access-title">
            {mode === "speech"
              ? "AI-Powered Text to Speech"
              : mode === "video"
              ? "Video to Text Converter"
              : "Speech to Text Converter"}
          </h1>
          <p className="access-subtitle">Powered by Perplexity AI</p>
        </div>

        <div className="access-content">
          {mode === "speech" ? (
            <div className="access-input-group">
              <textarea
                className="access-textarea"
                placeholder="Enter your text here... AI will enhance it for natural speech"
                value={content}
                onChange={(e) => setContent(e.target.value)}
                disabled={isSpeaking}
              />

              <select
                className="access-voice-select"
                value={selectedVoice}
                onChange={handleVoiceChange}
                disabled={isSpeaking}
              >
                {voices.map((voice) => (
                  <option key={voice.name} value={voice.lang}>
                    {`${voice.name} (${voice.lang})`}
                  </option>
                ))}
              </select>
            </div>
          ) : mode === "video" ? (
            <div className="access-video-container">
              <input
                type="file"
                ref={fileInputRef}
                onChange={handleVideoUpload}
                accept="video/*"
                className="access-file-input"
              />

              <div
                className="access-video-upload-area"
                onClick={triggerFileInput}
              >
                {videoUrl ? (
                  <video
                    src={videoUrl}
                    className="access-video-preview"
                    controls
                  />
                ) : (
                  <div className="access-upload-placeholder">
                    <i className="upload-icon">📁</i>
                    <p>Click to upload video or drag and drop</p>
                    <p className="upload-hint">
                      Supported formats: MP4, WebM, MOV (max 20MB)
                    </p>
                  </div>
                )}
              </div>

              <textarea
                className="access-textarea"
                value={content}
                readOnly
                placeholder="Video analysis will appear here..."
              />
            </div>
          ) : (
            <div className="access-audio-container">
              <textarea
                className="access-textarea"
                value={content}
                readOnly
                placeholder="Speech recognition results will appear here..."
              />

              <select
                className="access-voice-select"
                value={selectedVoice}
                onChange={handleVoiceChange}
                disabled={isRecording}
              >
                {voices.map((voice) => (
                  <option key={voice.name} value={voice.lang}>
                    {`${voice.name} (${voice.lang})`}
                  </option>
                ))}
              </select>
            </div>
          )}

          {error && (
            <div className="access-error">
              <p>{error}</p>
            </div>
          )}

          <div className="access-controls">
            {mode === "speech" ? (
              <>
                <button
                  className={`access-button ${
                    isSpeaking || isLoading ? "access-button-disabled" : ""
                  }`}
                  onClick={handleTextToSpeech}
                  disabled={isSpeaking || isLoading}
                >
                  {isLoading
                    ? "Enhancing text..."
                    : isSpeaking
                    ? "Speaking..."
                    : "Convert to Speech"}
                </button>

                {isSpeaking && (
                  <button
                    className="access-button access-button-stop"
                    onClick={stopTextToSpeech}
                  >
                    Stop Speaking
                  </button>
                )}
              </>
            ) : mode === "video" ? (
              <button
                className={`access-button ${
                  isProcessing ? "access-button-disabled" : ""
                }`}
                onClick={handleProcessVideo}
                disabled={isProcessing || !videoFile}
              >
                {isProcessing ? "Processing Video..." : "Analyze Video"}
              </button>
            ) : (
              <button
                className={`access-button ${
                  isRecording ? "access-button-disabled" : ""
                }`}
                onClick={startSpeechRecognition}
                disabled={isRecording}
              >
                {isRecording ? "Listening..." : "Start Speech Recognition"}
              </button>
            )}
          </div>

          <div className="access-footer">
            <button
              className="access-button access-button-back"
              onClick={() => setMode(null)}
            >
              Back to Mode Selection
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AIAccessibility;


================================================
File: src/pages/AIBot/AIBot.css
================================================
/* components/AIBot/AIBot.css */
:root {
  --ai-bot-primary: #9cabc5;
  --ai-bot-primary-dark: #9cabc5;
  --ai-bot-text: #333;
  --ai-bot-text-light: #666;
  --ai-bot-bg: #fff;
  --ai-bot-border: #e0e0e0;
  --ai-bot-user-bg: #e6f7fa;
  --ai-bot-bot-bg: #f5f5f5;
  --ai-bot-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
  --ai-bot-transition: all 0.3s ease;
}

/* Toggle Button */
.ai-bot-toggle {
  position: fixed;
  bottom: 20px;
  right: 20px;
  width: 60px;
  height: 60px;
  border-radius: 50%;
  background-color: var(--ai-bot-primary);
  color: white;
  border: none;
  box-shadow: var(--ai-bot-shadow);
  cursor: pointer;
  z-index: 1000;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: var(--ai-bot-transition);
}

.ai-bot-toggle:hover {
  background-color: var(--ai-bot-primary-dark);
  transform: scale(1.05);
}

.ai-bot-toggle.active {
  background-color: #f44336;
}

.ai-bot-icon {
  display: flex;
  align-items: center;
  justify-content: center;
}

.ai-bot-pulse {
  position: absolute;
  top: 0;
  right: 0;
  width: 16px;
  height: 16px;
  border-radius: 50%;
  background-color: #4caf50;
  border: 2px solid white;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0% {
    box-shadow: 0 0 0 0 rgba(76, 175, 80, 0.7);
  }
  70% {
    box-shadow: 0 0 0 10px rgba(76, 175, 80, 0);
  }
  100% {
    box-shadow: 0 0 0 0 rgba(76, 175, 80, 0);
  }
}

/* Chat Container */
.ai-bot-container {
  position: fixed;
  bottom: 90px;
  right: 20px;
  width: 350px;
  height: 500px;
  background-color: var(--ai-bot-bg);
  border-radius: 12px;
  box-shadow: var(--ai-bot-shadow);
  display: flex;
  flex-direction: column;
  z-index: 999;
  overflow: hidden;
  transform: translateY(20px);
  opacity: 0;
  pointer-events: none;
  transition: var(--ai-bot-transition);
}

.ai-bot-container.open {
  transform: translateY(0);
  opacity: 1;
  pointer-events: all;
}

/* Header */
.ai-bot-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 15px;
  background-color: var(--ai-bot-primary);
  color: white;
  border-top-left-radius: 12px;
  border-top-right-radius: 12px;
}

.ai-bot-title {
  display: flex;
  align-items: center;
  gap: 10px;
}

.ai-bot-title h3 {
  margin: 0;
  font-size: 16px;
  font-weight: 600;
}

.ai-bot-avatar {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background-color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.ai-bot-avatar-icon {
  font-size: 14px;
  font-weight: bold;
  color: var(--ai-bot-primary);
}

.ai-bot-actions {
  display: flex;
  gap: 10px;
}

.ai-bot-clear,
.ai-bot-close {
  background: none;
  border: none;
  color: white;
  cursor: pointer;
  padding: 5px;
  border-radius: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background-color 0.2s;
}

.ai-bot-clear:hover,
.ai-bot-close:hover {
  background-color: rgba(255, 255, 255, 0.2);
}

/* Messages */
.ai-bot-messages {
  flex: 1;
  overflow-y: auto;
  padding: 15px;
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.ai-bot-message {
  display: flex;
  gap: 10px;
  max-width: 85%;
}

.ai-bot-message.user {
  align-self: flex-end;
  flex-direction: row-reverse;
}

.ai-bot-message-content {
  display: flex;
  flex-direction: column;
  gap: 5px;
}

.ai-bot-message-text {
  padding: 10px 12px;
  border-radius: 12px;
  font-size: 14px;
  line-height: 1.4;
  word-break: break-word;
}

.ai-bot-message.bot .ai-bot-message-text {
  background-color: var(--ai-bot-bot-bg);
  border-top-left-radius: 4px;
  color: var(--ai-bot-text);
}

.ai-bot-message.user .ai-bot-message-text {
  background-color: var(--ai-bot-user-bg);
  border-top-right-radius: 4px;
  color: var(--ai-bot-text);
}

.ai-bot-message-time {
  font-size: 10px;
  color: var(--ai-bot-text-light);
  align-self: flex-end;
}

.ai-bot-typing {
  display: flex;
  align-items: center;
  gap: 5px;
  padding: 10px 12px;
  background-color: var(--ai-bot-bot-bg);
  border-radius: 12px;
  border-top-left-radius: 4px;
}

.ai-bot-typing span {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background-color: var(--ai-bot-text-light);
  animation: typing 1.4s infinite both;
}

.ai-bot-typing span:nth-child(2) {
  animation-delay: 0.2s;
}

.ai-bot-typing span:nth-child(3) {
  animation-delay: 0.4s;
}

@keyframes typing {
  0% {
    opacity: 0.4;
    transform: scale(1);
  }
  50% {
    opacity: 1;
    transform: scale(1.2);
  }
  100% {
    opacity: 0.4;
    transform: scale(1);
  }
}

/* Input Area */
.ai-bot-input-container {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 15px;
  border-top: 1px solid var(--ai-bot-border);
}

.ai-bot-input {
  flex: 1;
  padding: 10px 15px;
  border: 1px solid var(--ai-bot-border);
  border-radius: 20px;
  font-size: 14px;
  resize: none;
  outline: none;
  transition: border-color 0.2s;
  max-height: 100px;
  min-height: 40px;
}

.ai-bot-input:focus {
  border-color: var(--ai-bot-primary);
}

.ai-bot-send {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background-color: var(--ai-bot-primary);
  color: white;
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: background-color 0.2s;
}

.ai-bot-send:hover {
  background-color: var(--ai-bot-primary-dark);
}

.ai-bot-send:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

/* Scrollbar Styling */
.ai-bot-messages::-webkit-scrollbar {
  width: 6px;
}

.ai-bot-messages::-webkit-scrollbar-track {
  background: transparent;
}

.ai-bot-messages::-webkit-scrollbar-thumb {
  background-color: rgba(0, 0, 0, 0.2);
  border-radius: 3px;
}

.ai-bot-messages::-webkit-scrollbar-thumb:hover {
  background-color: rgba(0, 0, 0, 0.3);
}

/* Responsive Adjustments */
@media (max-width: 480px) {
  .ai-bot-container {
    width: calc(100% - 40px);
    height: 60vh;
    bottom: 80px;
  }
  
  .ai-bot-toggle {
    width: 50px;
    height: 50px;
  }
}


================================================
File: src/pages/AIBot/AIBot.jsx
================================================
"use client"

import { useState, useRef, useEffect } from "react"
import "./AIBot.css"

// It's better to use environment variables for API keys
// For this example, we'll keep it in the code but in production
// you should use environment variables
const PERPLEXITY_API_KEY = "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"
const STORAGE_KEY = "ai_bot_chat_history"

const AIBot = ({ isOpen, toggleAIBot }) => {
  const [messages, setMessages] = useState(() => {
    const savedMessages = localStorage.getItem(STORAGE_KEY)
    return savedMessages
      ? JSON.parse(savedMessages)
      : [
          {
            type: "bot",
            content: "Hi there! I'm your AI assistant. How can I help you today?",
            timestamp: new Date().toLocaleTimeString([], {
              hour: "2-digit",
              minute: "2-digit",
            }),
          },
        ]
  })

  const [inputValue, setInputValue] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const messagesEndRef = useRef(null)
  const inputRef = useRef(null)

  // Save messages to localStorage
  useEffect(() => {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(messages))
  }, [messages])

  // Scroll to bottom when messages change
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" })
    }
  }, [messages])

  // Focus input when chat opens
  useEffect(() => {
    if (isOpen && inputRef.current) {
      setTimeout(() => {
        inputRef.current.focus()
      }, 100)
    }
  }, [isOpen])

  const handleInputChange = (e) => {
    setInputValue(e.target.value)
  }

  const handleKeyPress = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return

    const userMessage = {
      type: "user",
      content: inputValue,
      timestamp: new Date().toLocaleTimeString([], {
        hour: "2-digit",
        minute: "2-digit",
      }),
    }

    setMessages((prev) => [...prev, userMessage])
    setInputValue("")
    setIsLoading(true)

    try {
      // Format previous messages for context (last 5 messages)
      const previousMessages = messages.slice(-5).map((msg) => ({
        role: msg.type === "user" ? "user" : "assistant",
        content: msg.content,
      }))

      // Fixed API request format for Perplexity AI
      const response = await fetch("https://api.perplexity.ai/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${PERPLEXITY_API_KEY}`,
        },
        body: JSON.stringify({
          model: "sonar-small-chat",
          messages: [
            {
              role: "system",
              content:
                "You are a helpful AI assistant for a project management and collaboration platform. Provide concise, helpful responses to user queries. Keep responses brief and focused.",
            },
            ...previousMessages,
            {
              role: "user",
              content: inputValue,
            },
          ],
          max_tokens: 150,
          temperature: 0.7,
          stream: false,
        }),
      })

      if (!response.ok) {
        const errorText = await response.text()
        console.error("API Error:", response.status, errorText)
        throw new Error(`API request failed with status: ${response.status}`)
      }

      const data = await response.json()

      // Check if the response has the expected structure
      if (!data.choices || !data.choices[0] || !data.choices[0].message) {
        console.error("Unexpected API response structure:", data)
        throw new Error("Unexpected API response format")
      }

      const botResponse = {
        type: "bot",
        content: data.choices[0].message.content,
        timestamp: new Date().toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
        }),
      }

      setMessages((prev) => [...prev, botResponse])
    } catch (error) {
      console.error("Error with AI API:", error)

      // Fallback response if API fails
      const errorMessage = {
        type: "bot",
        content:
          "I'm having trouble connecting to my knowledge base right now. Please check your internet connection or try again later.",
        timestamp: new Date().toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
        }),
      }
      setMessages((prev) => [...prev, errorMessage])
    } finally {
      setIsLoading(false)
    }
  }

  const clearChat = () => {
    const initialMessage = {
      type: "bot",
      content: "Chat history cleared. How can I help you today?",
      timestamp: new Date().toLocaleTimeString([], {
        hour: "2-digit",
        minute: "2-digit",
      }),
    }
    setMessages([initialMessage])
  }

  return (
    <>
      {/* Bot toggle button - always visible */}
      <button
        className={`ai-bot-toggle ${isOpen ? "active" : ""}`}
        onClick={toggleAIBot}
        aria-label="Toggle AI Assistant"
      >
        <div className="ai-bot-icon">
          {isOpen ? (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          ) : (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
            </svg>
          )}
        </div>
        {!isOpen && <div className="ai-bot-pulse"></div>}
      </button>

      {/* Bot chat window */}
      <div className={`ai-bot-container ${isOpen ? "open" : ""}`}>
        <div className="ai-bot-header">
          <div className="ai-bot-title">
            <div className="ai-bot-avatar">
              <div className="ai-bot-avatar-icon">AI</div>
            </div>
            <h3>Perplexity AI Assistant</h3>
          </div>
          <div className="ai-bot-actions">
            <button className="ai-bot-clear" onClick={clearChat} title="Clear chat">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              >
                <path d="M3 6h18"></path>
                <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path>
                <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path>
              </svg>
            </button>
            <button className="ai-bot-close" onClick={toggleAIBot} title="Close chat">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              >
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
              </svg>
            </button>
          </div>
        </div>

        <div className="ai-bot-messages">
          {messages.map((message, index) => (
            <div key={index} className={`ai-bot-message ${message.type}`}>
              {message.type === "bot" && (
                <div className="ai-bot-avatar">
                  <div className="ai-bot-avatar-icon">AI</div>
                </div>
              )}
              <div className="ai-bot-message-content">
                <div className="ai-bot-message-text">{message.content}</div>
                <div className="ai-bot-message-time">{message.timestamp}</div>
              </div>
            </div>
          ))}
          {isLoading && (
            <div className="ai-bot-message bot">
              <div className="ai-bot-avatar">
                <div className="ai-bot-avatar-icon">AI</div>
              </div>
              <div className="ai-bot-message-content">
                <div className="ai-bot-typing">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>

        <div className="ai-bot-input-container">
          <textarea
            ref={inputRef}
            className="ai-bot-input"
            placeholder="Type your message..."
            value={inputValue}
            onChange={handleInputChange}
            onKeyPress={handleKeyPress}
            rows={1}
          />
          <button className="ai-bot-send" onClick={handleSendMessage} disabled={!inputValue.trim() || isLoading}>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <line x1="22" y1="2" x2="11" y2="13"></line>
              <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
            </svg>
          </button>
        </div>
      </div>
    </>
  )
}

export default AIBot



================================================
File: src/pages/AIFeedback/AIFeedback.css
================================================
/* Global Reset and Variables */
:root {
  --ai-primary-color: #4a90e2;
  --ai-secondary-color: #50c878;
  --ai-background-light: #f4f7fc;
  --ai-text-dark: #2c3e50;
  --ai-text-light: #7f8c8d;
  --ai-border-color: #e0e0e0;
  --ai-white: #ffffff;
  --ai-gray-light: #f1f3f5;
  --ai-gray-dark: #b0c9e1;
  --ai-gradient: linear-gradient(135deg, #4a90e2, #50c878);
  --ai-box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
  --ai-hover-transition: all 0.3s ease;
  --ai-font-family: "Inter", sans-serif;
}

/* * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: var(--ai-font-family);
  }
  
  body {
    background-color: var(--ai-background-light);
    color: var(--ai-text-dark);
    line-height: 1.6;
    overflow-x: hidden;
  }
   */
/* Container Styles */
.ai-feedback-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  padding: 20px;
}

.ai-feedback-wrapper {
  background-color: var(--ai-white);
  border-radius: 15px;
  box-shadow: var(--ai-box-shadow);
  max-width: 1200px;
  margin-bottom: 100px;
  width: 100%;
  padding: 40px;
  transition: var(--ai-hover-transition);
  animation: fadeIn 0.8s ease-in-out;
}

.ai-feedback-wrapper:hover {
  transform: translateY(-5px);
  box-shadow: 0 12px 30px rgba(0, 0, 0, 0.2);
}

/* Header Styles */
.ai-feedback-header {
  text-align: center;
  margin-bottom: 30px;
}

.ai-feedback-title {
  color: var(--ai-primary-color);
  font-size: 32px;
  font-weight: 800;
  margin-bottom: 10px;
  text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.1);
}

.ai-feedback-description {
  color: var(--ai-text-light);
  font-size: 16px;
  line-height: 1.4;
}

/* Form Styles */
.ai-feedback-form {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.ai-feedback-textarea {
  width: 97%;
  min-height: 200px;
  padding: 15px;
  border: 2px solid var(--ai-border-color);
  border-radius: 10px;
  resize: vertical;
  font-size: 16px;
  background: var(--ai-gray-light);
  box-shadow: var(--ai-box-shadow);
  transition: var(--ai-hover-transition);
}

.ai-feedback-textarea:focus {
  outline: none;
  border-color: var(--ai-primary-color);
  box-shadow: 0 0 10px rgba(74, 144, 226, 0.2);
}

/* Attachment Styles */
.ai-attachment-section {
  display: flex;
  justify-content: center;
}

.ai-attachment-button {
  background: var(--ai-gradient);
  color: var(--ai-white);
  border: none;
  padding: 10px 20px;
  border-radius: 8px;
  cursor: pointer;
  transition: var(--ai-hover-transition);
  font-weight: 600;
}

.ai-attachment-button:hover {
  background: #3a7bd5;
  transform: translateY(-2px);
  box-shadow: 0 5px 15px rgba(58, 123, 213, 0.3);
}

/* Submit Button Styles */
.ai-submit-button {
  width: 100%;
  padding: 12px;
  background: var(--ai-gradient);
  color: var(--ai-white);
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 16px;
  font-weight: 700;
  transition: var(--ai-hover-transition);
  text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.1);
}

.ai-submit-button:hover:not(:disabled) {
  background: #3a7bd5;
  transform: translateY(-3px);
  box-shadow: 0 8px 20px rgba(58, 123, 213, 0.3);
}

.ai-submit-button:disabled {
  background: var(--ai-gray-dark);
  cursor: not-allowed;
}

/* AI Insights Panel Styles */
.ai-insights-panel {
  margin-top: 30px;
  background-color: var(--ai-gray-light);
  border-radius: 10px;
  padding: 20px;
  box-shadow: var(--ai-box-shadow);
  animation: slideUp 0.8s ease-out;
}

.ai-insights-panel h3 {
  text-align: center;
  color: var(--ai-primary-color);
  margin-bottom: 15px;
  font-weight: 700;
}

.ai-insights-grid {
  display: flex;
  justify-content: space-between;
  margin-bottom: 20px;
}

.ai-insight-item {
  flex: 1;
  text-align: center;
  padding: 15px;
  background-color: var(--ai-white);
  border-radius: 8px;
  margin: 0 5px;
  box-shadow: var(--ai-box-shadow);
  transition: var(--ai-hover-transition);
}

.ai-insight-item:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
}

.ai-suggestion-panel {
  background-color: var(--ai-white);
  border-radius: 8px;
  padding: 15px;
  text-align: center;
  box-shadow: var(--ai-box-shadow);
}

.ai-suggestion-panel h4 {
  color: var(--ai-primary-color);
  margin-bottom: 10px;
}

/* Responsive Adjustments */
@media (max-width: 600px) {
  .ai-feedback-wrapper {
    padding: 20px;
    margin: 0 10px;
  }

  .ai-insights-grid {
    flex-direction: column;
  }

  .ai-insight-item {
    margin: 10px 0;
  }
}

/* Animations */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(50px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}



================================================
File: src/pages/AIFeedback/AIFeedback.jsx
================================================
import React, { useState, useRef, useEffect } from "react";
import "./AIFeedback.css";

// Advanced AI Mock Services
const AIServices = {
  analyzeSentiment: (text) => {
    const sentimentKeywords = {
      positive: ["good", "great", "excellent", "amazing", "love", "improve"],
      negative: [
        "bad",
        "terrible",
        "worst",
        "horrible",
        "disappointing",
        "issue",
      ],
    };

    const calculateSentiment = (text) => {
      const lowerText = text.toLowerCase();
      const positiveScore = sentimentKeywords.positive.filter((word) =>
        lowerText.includes(word)
      ).length;
      const negativeScore = sentimentKeywords.negative.filter((word) =>
        lowerText.includes(word)
      ).length;

      if (positiveScore > negativeScore) return "Positive";
      if (negativeScore > positiveScore) return "Negative";
      return "Neutral";
    };

    return {
      sentiment: calculateSentiment(text),
      toxicity: Math.random() < 0.2 ? "High" : "Low",
      complexity: text.split(/\s+/).length > 50 ? "Complex" : "Simple",
    };
  },

  suggestImprovements: (text) => {
    const improvements = [
      "Consider providing more specific details",
      "Your feedback could benefit from concrete examples",
      "Try to elaborate on the key points",
      "Clarify the context of your concern",
    ];

    return improvements[Math.floor(Math.random() * improvements.length)];
  },

  predictCategory: (text) => {
    const categories = [
      "Product Feedback",
      "User Experience",
      "Technical Support",
      "Feature Request",
      "Performance Improvement",
    ];

    return categories[Math.floor(Math.random() * categories.length)];
  },
};

const AIFeedback = () => {
  const [aiState, setAIState] = useState({
    feedback: "",
    response: null,
    analysis: null,
    isLoading: false,
    error: null,
    attachments: [],
    aiInsights: null,
  });

  const fileInputRef = useRef(null);

  const updateState = (updates) => {
    setAIState((prev) => ({ ...prev, ...updates }));
  };

  const handleFeedbackSubmit = async (e) => {
    e.preventDefault();
    const { feedback } = aiState;

    if (!feedback.trim()) return;

    updateState({
      isLoading: true,
      error: null,
      aiInsights: null,
    });

    try {
      // Simulate AI processing
      const aiAnalysis = AIServices.analyzeSentiment(feedback);
      const aiCategory = AIServices.predictCategory(feedback);
      const aiSuggestion = AIServices.suggestImprovements(feedback);

      const simulatedResponse = await new Promise((resolve) =>
        setTimeout(() => {
          resolve({
            analysis: aiAnalysis,
            category: aiCategory,
            suggestion: aiSuggestion,
          });
        }, 2000)
      );

      updateState({
        isLoading: false,
        aiInsights: simulatedResponse,
        feedback: "",
        response: "AI has processed your feedback and generated insights.",
      });
    } catch (error) {
      updateState({
        isLoading: false,
        error: "AI processing failed. Please try again.",
      });
    }
  };

  const handleFileUpload = (e) => {
    const files = Array.from(e.target.files);
    const validFiles = files.filter((file) =>
      ["image/jpeg", "image/png", "application/pdf"].includes(file.type)
    );

    updateState({
      attachments: [
        ...aiState.attachments,
        ...validFiles.map((file) => ({
          file,
          preview: file.type.startsWith("image/")
            ? URL.createObjectURL(file)
            : null,
        })),
      ],
    });
  };

  return (
    <div className="ai-feedback-container">
      <div className="ai-feedback-wrapper">
        <header className="ai-feedback-header">
          <h1 className="ai-feedback-title">AI Insight Generator</h1>
          <p className="ai-feedback-description">
            Leverage AI to transform your feedback into actionable insights
          </p>
        </header>

        <form onSubmit={handleFeedbackSubmit} className="ai-feedback-form">
          <textarea
            className="ai-feedback-textarea"
            placeholder="Share your thoughts for AI-powered analysis..."
            value={aiState.feedback}
            onChange={(e) => updateState({ feedback: e.target.value })}
          />

          <div className="ai-attachment-section">
            <input
              type="file"
              ref={fileInputRef}
              onChange={handleFileUpload}
              multiple
              hidden
              accept=".jpg,.jpeg,.png,.pdf"
            />
            <button
              type="button"
              className="ai-attachment-button"
              onClick={() => fileInputRef.current.click()}
            >
              ðŸ”— Attach Files
            </button>
          </div>

          <button
            type="submit"
            className="ai-submit-button"
            disabled={aiState.isLoading || !aiState.feedback.trim()}
          >
            {aiState.isLoading ? "AI Analyzing..." : "Generate AI Insights"}
          </button>
        </form>

        {aiState.aiInsights && (
          <div className="ai-insights-panel">
            <h3>AI Analysis</h3>
            <div className="ai-insights-grid">
              <div className="ai-insight-item">
                <strong>Sentiment:</strong>
                {aiState.aiInsights.analysis.sentiment}
              </div>
              <div className="ai-insight-item">
                <strong>Category:</strong>
                {aiState.aiInsights.category}
              </div>
              <div className="ai-insight-item">
                <strong>Complexity:</strong>
                {aiState.aiInsights.analysis.complexity}
              </div>
            </div>
            <div className="ai-suggestion-panel">
              <h4>AI Suggestion</h4>
              <p>{aiState.aiInsights.suggestion}</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AIFeedback;



================================================
File: src/pages/AIWorkflow/AIWorkflow.css
================================================
:root {
  --primary-color: #3b82f6;
  --secondary-color: #10b981;
  --background-color: #f3f4f6;
  --text-primary: #1f2937;
  --text-secondary: #6b7280;
  --card-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
}

.workworkflow-container {
  max-width: 1200px;
  margin: 40px auto;
  padding: 2rem;
  background-color: var(--background-color);
  font-family: "Inter", -apple-system, BlinkMacSystemFont, sans-serif;
  background-color: #ffffff;
  border-radius: 16px;
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);
}

.workworkflow-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  padding: 1.5rem;
  background-color: white;
  border-radius: 12px;
  box-shadow: var(--card-shadow);
}

.workworkflow-header h1 {
  color: var(--primary-color);
  font-size: 2.5rem;
  margin: 0;
}

.workworkflow-header-stats {
  display: flex;
  gap: 1rem;
  color: var(--text-secondary);
}

.workworkflow-navigation {
  display: flex;
  justify-content: center;
  gap: 1rem;
  margin-bottom: 2rem;
}

.workworkflow-navigation button {
  padding: 1rem;
  border: none;
  background-color: var(--primary-color);
  color: white;
  font-size: 1rem;
  border-radius: 8px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.workworkflow-navigation button:hover {
  background-color: var(--secondary-color);
}

.workworkflow-navigation .active {
  background-color: var(--secondary-color);
}

.workworkflow-management {
  display: flex;
  flex-direction: column;
}

.workworkflow-actions {
  display: flex;
  gap: 2rem;
  margin-bottom: 2rem;
}

.workworkflow-actions button {
  padding: 1rem;
  border: none;
  background-color: var(--primary-color);
  color: white;
  font-size: 1.2rem;
  border-radius: 8px;
  cursor: pointer;
}

.workworkflow-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 2rem;
}

.workworkflow-card {
  padding: 1.5rem;
  border-radius: 12px;
  background-color: #ffffff;
  box-shadow: var(--card-shadow);
  transition: transform 0.3s ease;
  cursor: pointer;
}

.workworkflow-card:hover {
  transform: translateY(-10px);
}

.workworkflow-card.selected {
  border: 2px solid var(--primary-color);
}

.workworkflow-card h3 {
  color: var(--primary-color);
  font-size: 1.4rem;
  margin-bottom: 1rem;
}

.workworkflow-details {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.workworkflow-task-panel {
  margin-top: 2rem;
}

.workworkflow-stats {
  display: flex;
  justify-content: space-between;
  margin-bottom: 2rem;
}

.worktask-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.worktask-item {
  padding: 1rem;
  background-color: #f9fafb;
  border-radius: 8px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.worktask-item:hover {
  background-color: #e5e7eb;
}

.worktask-item.pending {
  background-color: #fef3c7;
}

.worktask-item.in_progress {
  background-color: #bfdbfe;
}

.worktask-item.completed {
  background-color: #d1fae5;
}

.workworkflow-analytics {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.workanalytics-summary {
  display: flex;
  gap: 2rem;
}

.workanalytics-card {
  padding: 2rem;
  border-radius: 12px;
  background-color: #ffffff;
  box-shadow: var(--card-shadow);
  flex: 1;
}

.workanalytics-card h3 {
  font-size: 1.5rem;
  color: var(--primary-color);
}

.workanalytics-value {
  font-size: 2rem;
  font-weight: bold;
  color: var(--text-primary);
}



================================================
File: src/pages/AIWorkflow/AIWorkflow.jsx
================================================
import React, { useReducer, useState, useCallback, useMemo } from "react";
import "./AIWorkflow.css";

// Advanced Workflow Management Reducer
const initialState = {
  workflows: [],
  selectedWorkflow: null,
  analytics: {
    totalWorkflows: 0,
    completedWorkflows: 0,
    averageAIScore: 0,
    totalTasks: 0,
    completedTasks: 0,
  },
};

const workflowReducer = (state, action) => {
  switch (action.type) {
    case "CREATE_WORKFLOW":
      const newWorkflow = {
        id: Date.now(),
        name: `AI Workflow ${state.workflows.length + 1}`,
        description: "",
        tasks: [],
        status: "PLANNING",
        priority: "MEDIUM",
        aiScore: 0,
        createdAt: new Date(),
        lastUpdated: new Date(),
      };
      return {
        ...state,
        workflows: [...state.workflows, newWorkflow],
        selectedWorkflow: newWorkflow,
        analytics: {
          ...state.analytics,
          totalWorkflows: state.analytics.totalWorkflows + 1,
        },
      };

    case "ADD_TASK":
      if (!state.selectedWorkflow) return state;
      const newTask = {
        id: Date.now(),
        name: `Task ${state.selectedWorkflow.tasks.length + 1}`,
        description: "",
        type: "COGNITIVE",
        status: "PENDING",
        priority: "MEDIUM",
        complexity: "STANDARD",
        assignedTo: null,
        estimatedTime: null,
        createdAt: new Date(),
      };
      return {
        ...state,
        selectedWorkflow: {
          ...state.selectedWorkflow,
          tasks: [...state.selectedWorkflow.tasks, newTask],
          lastUpdated: new Date(),
        },
        analytics: {
          ...state.analytics,
          totalTasks: state.analytics.totalTasks + 1,
        },
      };

    case "UPDATE_TASK":
      return {
        ...state,
        selectedWorkflow: {
          ...state.selectedWorkflow,
          tasks: state.selectedWorkflow.tasks.map((task) =>
            task.id === action.payload.id
              ? { ...task, ...action.payload.updates, updatedAt: new Date() }
              : task
          ),
          lastUpdated: new Date(),
        },
      };

    case "SELECT_WORKFLOW":
      return {
        ...state,
        selectedWorkflow: action.payload,
      };

    default:
      return state;
  }
};

const AIWorkflowPlatform = () => {
  const [state, dispatch] = useReducer(workflowReducer, initialState);
  const [view, setView] = useState("workflows");

  const createWorkflow = useCallback(() => {
    dispatch({ type: "CREATE_WORKFLOW" });
  }, []);

  const addTask = useCallback(() => {
    dispatch({ type: "ADD_TASK" });
  }, []);

  const updateTaskStatus = useCallback((taskId, updates) => {
    dispatch({
      type: "UPDATE_TASK",
      payload: {
        id: taskId,
        updates,
      },
    });
  }, []);

  const selectWorkflow = useCallback((workflow) => {
    dispatch({
      type: "SELECT_WORKFLOW",
      payload: workflow,
    });
  }, []);

  const workflowStats = useMemo(() => {
    const completedTasks = state.selectedWorkflow
      ? state.selectedWorkflow.tasks.filter(
          (task) => task.status === "COMPLETED"
        ).length
      : 0;

    return {
      totalTasks: state.selectedWorkflow
        ? state.selectedWorkflow.tasks.length
        : 0,
      completedTasks,
      completionPercentage: state.selectedWorkflow
        ? Math.round(
            (completedTasks / state.selectedWorkflow.tasks.length) * 100
          )
        : 0,
    };
  }, [state.selectedWorkflow]);

  return (
    <div className="workworkflow-container">
      <header className="workworkflow-header">
        <h1>AI Workflow Intelligence</h1>
        <div className="workworkflow-header-stats">
          <span>Total Workflows: {state.workflows.length}</span>
          <span>
            Active Workflows:{" "}
            {state.workflows.filter((w) => w.status !== "COMPLETED").length}
          </span>
        </div>
      </header>

      <nav className="workworkflow-navigation">
        <button
          onClick={() => setView("workflows")}
          className={view === "workflows" ? "active" : ""}
        >
          Workflows
        </button>
        <button
          onClick={() => setView("analytics")}
          className={view === "analytics" ? "active" : ""}
        >
          Analytics
        </button>
      </nav>

      <main className="workworkflow-content">
        {view === "workflows" ? (
          <section className="workworkflow-management">
            <div className="workworkflow-actions">
              <button onClick={createWorkflow}>Create Workflow</button>
              <button onClick={addTask} disabled={!state.selectedWorkflow}>
                Add Task
              </button>
            </div>

            <div className="workworkflow-grid">
              {state.workflows.map((workflow) => (
                <div
                  key={workflow.id}
                  className={`workworkflow-card ${
                    state.selectedWorkflow?.id === workflow.id ? "selected" : ""
                  }`}
                  onClick={() => selectWorkflow(workflow)}
                >
                  <h3>{workflow.name}</h3>
                  <div className="workworkflow-details">
                    <span>Status: {workflow.status}</span>
                    <span>Tasks: {workflow.tasks.length}</span>
                    <span>AI Score: {workflow.aiScore}%</span>
                  </div>
                </div>
              ))}
            </div>

            {state.selectedWorkflow && (
              <div className="workworkflow-task-panel">
                <h2>{state.selectedWorkflow.name} Tasks</h2>
                <div className="workworkflow-stats">
                  <span>Total Tasks: {workflowStats.totalTasks}</span>
                  <span>Completed: {workflowStats.completedTasks}</span>
                  <span>Completion: {workflowStats.completionPercentage}%</span>
                </div>
                <div className="worktask-list">
                  {state.selectedWorkflow.tasks.map((task) => (
                    <div
                      key={task.id}
                      className={`worktask-item ${task.status.toLowerCase()}`}
                      onClick={() =>
                        updateTaskStatus(task.id, {
                          status:
                            task.status === "PENDING"
                              ? "IN_PROGRESS"
                              : task.status === "IN_PROGRESS"
                              ? "COMPLETED"
                              : "PENDING",
                        })
                      }
                    >
                      {task.name} - {task.status}
                    </div>
                  ))}
                </div>
              </div>
            )}
          </section>
        ) : (
          <section className="workworkflow-analytics">
            <div className="workanalytics-summary">
              <div className="workanalytics-card">
                <h3>Total Workflows</h3>
                <div className="workanalytics-value">{state.workflows.length}</div>
              </div>
              <div className="workanalytics-card">
                <h3>Completed Workflows</h3>
                <div className="workanalytics-value">
                  {
                    state.workflows.filter((w) => w.status === "COMPLETED")
                      .length
                  }
                </div>
              </div>
              <div className="workanalytics-card">
                <h3>Total Tasks</h3>
                <div className="workanalytics-value">
                  {state.workflows.reduce(
                    (total, workflow) => total + workflow.tasks.length,
                    0
                  )}
                </div>
              </div>
            </div>
          </section>
        )}
      </main>
    </div>
  );
};

export default AIWorkflowPlatform;



================================================
File: src/pages/Analytics/Analytics.css
================================================
.analytics-container {
  padding: 2.5rem;
  max-width: 1500px;
  margin: 0 auto;
  font-family: "Poppins", sans-serif;
  background-color: #f8fafc;
  border-radius: 25px;
}

.analytics-title {
  font-size: 2.5rem;
  font-weight: 700;
  text-align: center;
  color: #1e293b;
  margin-bottom: 2.5rem;
  background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  letter-spacing: -0.025em;
}

.analytics-cards {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(380px, 1fr));
  gap: 1.5rem;
  margin-bottom: 3rem;
}

.analytics-card {
  background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 50%, #bae6fd 100%);
  border-radius: 1rem;
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
    0 2px 4px -1px rgba(0, 0, 0, 0.06);
  padding: 1.75rem;
  position: relative;
  overflow: hidden;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  border: 1px solid rgba(255, 255, 255, 0.7);
}

.analytics-card::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: linear-gradient(90deg, #3b82f6 0%, #2563eb 100%);
  opacity: 0;
  transition: opacity 0.3s ease;
}

.analytics-card:hover {
  transform: translateY(0px);
  /* box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1),
    0 10px 10px -5px rgba(0, 0, 0, 0.04); */
}

.analytics-card:hover::before {
  opacity: 1;
}

.analytics-card h3 {
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 1.25rem;
  color: #1e293b;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.user-stats table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
  margin-top: 1rem;
  background-color: rgba(255, 255, 255, 0.8);
  border-radius: 0.75rem;
  overflow: hidden;
}

.user-stats th,
.user-stats td {
  padding: 1rem 1.25rem;
  text-align: left;
  border-bottom: 1px solid rgba(148, 163, 184, 0.1);
  font-size: 0.875rem;
}

.user-stats th {
  background-color: rgba(241, 245, 249, 0.9);
  color: #475569;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  font-size: 0.75rem;
}

.user-stats tr:last-child td {
  border-bottom: none;
}

.user-stats tr:hover td {
  background-color: rgba(255, 255, 255, 0.95);
}

.analytics-deadlines {
  background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
  padding: 2rem;
  border-radius: 1rem;
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
    0 2px 4px -1px rgba(0, 0, 0, 0.06);
  border: 1px solid rgba(226, 232, 240, 0.8);
  margin-top: 2rem;
}

.analytics-deadlines h3 {
  font-size: 1.5rem;
  font-weight: 600;
  margin-bottom: 1.5rem;
  color: #1e293b;
  padding-bottom: 0.75rem;
  border-bottom: 2px solid #e2e8f0;
}

.analytics-deadlines ul {
  list-style-type: none;
  padding: 0;
  display: grid;
  gap: 0.75rem;
}

.analytics-deadlines li {
  padding: 1rem;
  background-color: rgba(248, 250, 252, 0.8);
  border-radius: 0.75rem;
  color: #475569;
  font-size: 0.875rem;
  display: flex;
  align-items: center;
  gap: 0.75rem;
  transition: all 0.2s ease;
  border: 1px solid transparent;
}

.analytics-deadlines li:hover {
  background-color: #ffffff;
  border-color: #e2e8f0;
  transform: translateX(0px);
}

@media (max-width: 768px) {
  .analytics-container {
    padding: 1.5rem;
  }

  .analytics-title {
    font-size: 2rem;
    margin-bottom: 2rem;
  }

  .analytics-cards {
    grid-template-columns: 1fr;
  }

  .analytics-card {
    margin-bottom: 1rem;
  }

  .user-stats {
    overflow-x: auto;
  }

  .analytics-deadlines {
    padding: 1.5rem;
  }
}



================================================
File: src/pages/Analytics/Analytics.jsx
================================================
import React, { useEffect, useState } from "react";
import "./Analytics.css";
import {
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell,
  Tooltip,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Legend,
  ResponsiveContainer,
} from "recharts";

const data = [
  { name: "Week 1", tasks: 40, completed: 30 },
  { name: "Week 2", tasks: 50, completed: 45 },
  { name: "Week 3", tasks: 60, completed: 50 },
  { name: "Week 4", tasks: 80, completed: 70 },
];

const pieData = [
  { name: "Completed", value: 70 },
  { name: "Remaining", value: 30 },
];

const COLORS = ["#00C49F", "#FF8042"];

const Analytics = () => {
  const [aiContent, setAiContent] = useState("");
  const [loading, setLoading] = useState(false);

  const fetchAIContent = async () => {
    setLoading(true);
    const apiKey = "AIzaSyBRlNfkdImoF0XMv-J5jKWcWCcpL6lKPVQ"; // Replace with your actual API key
    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;

    const data = {
      contents: [
        {
          parts: [
            { text: "Explain how AI works" }, // You can change this dynamically based on user input
          ],
        },
      ],
    };

    try {
      const response = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });

      const result = await response.json();
      console.log("API Response:", result); // Log the full response here

      if (
        result &&
        result.contents &&
        result.contents[0].parts &&
        result.contents[0].parts[0].text
      ) {
        setAiContent(result.contents[0].parts[0].text);
      } else {
        setAiContent("Unable to generate content.");
      }
    } catch (error) {
      console.error("Error fetching AI content:", error);
      setAiContent("Error fetching content.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    // Fetch AI content on component mount or you can trigger it based on a user action
    fetchAIContent();
  }, []);

  return (
    <div className="analytics-container">
      <h1 className="analytics-title">Project Analytics Dashboard</h1>

      {/* AI Content Section */}
      <div className="ai-content-section">
        <h3>AI-Generated Content</h3>
        {loading ? <p>Loading AI content...</p> : <p>{aiContent}</p>}
      </div>

      {/* Task Completion and Progress Overview */}
      <div className="analytics-cards">
        <div className="analytics-card">
          <h3>Task Completion Rate</h3>
          <ResponsiveContainer width="100%" height={200}>
            <PieChart>
              <Pie
                data={pieData}
                cx="50%"
                cy="50%"
                innerRadius={60}
                outerRadius={80}
                fill="#8884d8"
                dataKey="value"
              >
                {pieData.map((entry, index) => (
                  <Cell
                    key={`cell-${index}`}
                    fill={COLORS[index % COLORS.length]}
                  />
                ))}
              </Pie>
              <Tooltip />
            </PieChart>
          </ResponsiveContainer>
        </div>

        <div className="analytics-card">
          <h3>Team Productivity (Tasks Completed)</h3>
          <ResponsiveContainer width="100%" height={200}>
            <LineChart data={data}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Line
                type="monotone"
                dataKey="completed"
                stroke="#8884d8"
                activeDot={{ r: 8 }}
              />
            </LineChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Active User Stats */}
      <div className="analytics-cards">
        <div className="analytics-card">
          <h3>Active Users</h3>
          <div className="user-stats">
            <table>
              <thead>
                <tr>
                  <th>User</th>
                  <th>Tasks Completed</th>
                  <th>Last Active</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>John Doe</td>
                  <td>23</td>
                  <td>2 hours ago</td>
                </tr>
                <tr>
                  <td>Jane Smith</td>
                  <td>45</td>
                  <td>30 mins ago</td>
                </tr>
                <tr>
                  <td>Mark Johnson</td>
                  <td>12</td>
                  <td>3 hours ago</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>

        <div className="analytics-card">
          <h3>Project Progress (Bar)</h3>
          <ResponsiveContainer width="100%" height={200}>
            <BarChart data={data}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Bar dataKey="tasks" fill="#82ca9d" />
              <Bar dataKey="completed" fill="#8884d8" />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Upcoming Deadlines Section */}
      <div className="analytics-deadlines">
        <h3>Upcoming Deadlines</h3>
        <ul>
          <li>Project Alpha - 3 days remaining</li>
          <li>Task B - 5 days remaining</li>
          <li>Feature X - 7 days remaining</li>
        </ul>
      </div>
    </div>
  );
};

export default Analytics;



================================================
File: src/pages/ChatRoom/ChatRoom.css
================================================
@import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap");

/* Base Styles */
.chat-room-header {
  text-align: center;
  font-size: 1.875rem;
  font-weight: 600;
  color: #1a56db;
  padding: 1rem 0;
  background-color: #f8fafc;
  margin-bottom: 1.5rem;
  border-radius: 0.75rem;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  opacity: 0;
  transform: translateY(-20px);
  animation: fadeInHeader 0.8s forwards cubic-bezier(0.4, 0, 0.2, 1);
}

.chatroom-container {
  display: flex;
  height: 88vh;
  max-width: 1500px;
  margin: 0 auto;
  padding: 1.5rem;
  gap: 1.5rem;
  animation: slideIn 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  opacity: 0;
}

/* Whiteboard Section */
.whiteboard-section {
  flex: 2;
  display: flex;
  flex-direction: column;
  background-color: #ffffff;
  border-radius: 1rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05), 0 1px 3px rgba(0, 0, 0, 0.1);
  overflow: hidden;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.whiteboard-section:hover {
  transform: translateY(0px);
  /* box-shadow: 0 12px 20px rgba(0, 0, 0, 0.08), 0 6px 8px rgba(0, 0, 0, 0.06); */
}

.whiteboard {
  width: 100%;
  height: calc(100% - 4rem);
  border: none;
  background-color: #fff;
  animation: fadeIn 0.7s cubic-bezier(0.4, 0, 0.2, 1);
}

.whiteboard-controls {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem 1.25rem;
  background-color: #f1f5f9;
  border-top: 1px solid #e2e8f0;
}

.color-picker {
  width: 2.25rem;
  height: 2.25rem;
  border: 2px solid #e2e8f0;
  border-radius: 50%;
  overflow: hidden;
  cursor: pointer;
  transition: all 0.2s ease;
}

.color-picker:hover {
  transform: scale(1.12);
  border-color: #94a3b8;
}

.brush-size-slider {
  width: 140px;
  margin: 0 1.25rem;
  accent-color: #1a56db;
}

.control-button {
  background-color: #1a56db;
  color: white;
  border: none;
  padding: 0.625rem 1.25rem;
  border-radius: 0.5rem;
  cursor: pointer;
  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  font-size: 0.875rem;
  font-weight: 500;
  line-height: 1.25rem;
  letter-spacing: 0.025em;
}

.control-button:hover {
  background-color: #1e40af;
  transform: translateY(-2px);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.control-button:active {
  transform: translateY(0);
}

.control-button.active {
  background-color: #dc2626;
}

/* Chat Section */
.chat-section {
  flex: 1;
  display: flex;
  flex-direction: column;
  background-color: #ffffff;
  border-radius: 1rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05), 0 1px 3px rgba(0, 0, 0, 0.1);
  overflow: hidden;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.chat-section:hover {
  transform: translateY(0px);
  /* box-shadow: 0 12px 20px rgba(0, 0, 0, 0.08), 0 6px 8px rgba(0, 0, 0, 0.06); */
}

.chat-header {
  padding: 1.25rem;
  background-color: #1a56db;
  color: white;
  border-bottom: 1px solid #1e40af;
}

.chat-header h2 {
  font-size: 1.25rem;
  font-weight: 600;
  line-height: 1.75rem;
  letter-spacing: 0.025em;
}

.messages {
  flex: 1;
  overflow-y: auto;
  padding: 1.25rem;
  display: flex;
  flex-direction: column;
  gap: 1rem;
  scroll-behavior: smooth;
}

.messages::-webkit-scrollbar {
  width: 6px;
}

.messages::-webkit-scrollbar-track {
  background: #f1f5f9;
}

.messages::-webkit-scrollbar-thumb {
  background: #cbd5e1;
  border-radius: 3px;
}

.message {
  padding: 1rem 1.25rem;
  border-radius: 0.75rem;
  background-color: #f8fafc;
  border: 1px solid #e2e8f0;
  opacity: 0;
  animation: fadeInMessage 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  transition: transform 0.2s ease;
}

.message:hover {
  transform: translateX(2px);
  border-color: #cbd5e1;
}

.message-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 0.5rem;
  font-size: 0.875rem;
}

.timestamp {
  color: #64748b;
  font-size: 0.75rem;
  font-weight: 500;
}

.message-content {
  font-size: 0.9375rem;
  line-height: 1.6;
  color: #1e293b;
}

.message-input {
  padding: 1.25rem;
  background-color: #f8fafc;
  border-top: 1px solid #e2e8f0;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.username-input-cr,
.text-input {
  width: 90%;
  padding: 0.875rem 1rem;
  border: 1px solid #e2e8f0;
  border-radius: 0.5rem;
  font-size: 0.9375rem;
  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  background-color: white;
}

.username-input-cr:hover,
.text-input:hover {
  border-color: #94a3b8;
}

.username-input-cr:focus,
.text-input:focus {
  border-color: #1a56db;
  box-shadow: 0 0 0 3px rgba(26, 86, 219, 0.1);
  outline: none;
}

.message-submit {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.send-button {
  background-color: #1a56db;
  color: white;
  border: none;
  padding: 0.875rem 1.5rem;
  border-radius: 0.5rem;
  cursor: pointer;
  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  font-size: 0.9375rem;
  font-weight: 500;
  line-height: 1.25rem;
  letter-spacing: 0.025em;
}

.send-button:hover {
  background-color: #1e40af;
  transform: translateY(-2px);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.send-button:active {
  transform: translateY(0);
}

/* Animations */
@keyframes fadeInHeader {
  0% {
    opacity: 0;
    transform: translateY(-20px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideIn {
  from {
    transform: translateY(50px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes fadeInMessage {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Responsive Design */
@media (max-width: 1024px) {
  .chatroom-container {
    padding: 1rem;
    gap: 1rem;
  }
}

@media (max-width: 768px) {
  .chatroom-container {
    flex-direction: column;
    height: auto;
    padding: 1rem 0.75rem;
  }

  .chat-room-header {
    font-size: 1.5rem;
    padding: 1.25rem 0;
  }

  .whiteboard-section,
  .chat-section {
    width: 100%;
    height: 500px;
  }

  .whiteboard-controls {
    flex-wrap: wrap;
    gap: 0.75rem;
    justify-content: center;
    padding: 0.875rem;
  }

  .brush-size-slider {
    width: 100px;
    margin: 0 0.75rem;
  }

  .control-button {
    padding: 0.5rem 1rem;
    font-size: 0.8125rem;
  }
}

@media (max-width: 480px) {
  .whiteboard-section,
  .chat-section {
    height: 400px;
  }

  .message-input {
    padding: 1rem;
  }

  .send-button {
    padding: 0.75rem 1.25rem;
    font-size: 0.875rem;
  }
}



================================================
File: src/pages/ChatRoom/ChatRoom.jsx
================================================
import React, { useState, useEffect, useRef } from "react";
import "./ChatRoom.css";

const ChatRoom = () => {
  const [fabric, setFabric] = useState(null);
  const [messages, setMessages] = useState([]);
  const [message, setMessage] = useState("");
  const [username, setUsername] = useState("");
  const [color, setColor] = useState("#000000");
  const [brushSize, setBrushSize] = useState(5);
  const [isErasing, setIsErasing] = useState(false);
  const [aiSuggestions, setAiSuggestions] = useState([]);
  const [sentiment, setSentiment] = useState(null);
  const canvasRef = useRef(null);
  const fabricCanvasRef = useRef(null);
  const messagesEndRef = useRef(null);

  useEffect(() => {
    import("fabric").then((module) => {
      setFabric(module.fabric);
    });
  }, []);

  useEffect(() => {
    if (fabric && canvasRef.current) {
      fabricCanvasRef.current = new fabric.Canvas(canvasRef.current, {
        isDrawingMode: true,
        width: 800,
        height: 600,
      });

      const canvas = fabricCanvasRef.current;
      canvas.freeDrawingBrush = new fabric.PencilBrush(canvas);
      canvas.freeDrawingBrush.color = color;
      canvas.freeDrawingBrush.width = brushSize;

      return () => {
        canvas.dispose();
      };
    }
  }, [fabric]);

  useEffect(() => {
    if (fabricCanvasRef.current && fabricCanvasRef.current.freeDrawingBrush) {
      fabricCanvasRef.current.freeDrawingBrush.color = color;
      fabricCanvasRef.current.freeDrawingBrush.width = brushSize;
    }
  }, [color, brushSize]);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  const analyzeSentiment = async (text) => {
    try {
      const response = await fetch("https://api.example.com/sentiment", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ text }),
      });
      const result = await response.json();
      setSentiment(result.sentiment);
    } catch (error) {
      console.error("Sentiment analysis error:", error);
    }
  };

  const fetchSuggestions = async (text) => {
    try {
      const response = await fetch("https://api.example.com/suggestions", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ text }),
      });
      const result = await response.json();
      setAiSuggestions(result.suggestions);
    } catch (error) {
      console.error("Suggestions fetching error:", error);
    }
  };

  const handleInputChange = (e) => {
    const inputText = e.target.value;
    setMessage(inputText);
    fetchSuggestions(inputText);
  };

  const sendMessage = async (e) => {
    e.preventDefault();
    if (message.trim()) {
      await analyzeSentiment(message); // Analyze sentiment before sending
      const newMessage = {
        username: username || "Anonymous",
        text: message,
        sentiment,
        timestamp: new Date().toISOString(),
      };
      setMessages((prevMessages) => [...prevMessages, newMessage]);
      setMessage("");
      setAiSuggestions([]);
    }
  };

  const clearCanvas = () => {
    if (fabricCanvasRef.current) {
      fabricCanvasRef.current.clear();
    }
  };

  const toggleEraser = () => {
    setIsErasing(!isErasing);
    if (fabricCanvasRef.current) {
      if (!isErasing) {
        fabricCanvasRef.current.freeDrawingBrush.color = "#ffffff";
        fabricCanvasRef.current.freeDrawingBrush.width = 20;
      } else {
        fabricCanvasRef.current.freeDrawingBrush.color = color;
        fabricCanvasRef.current.freeDrawingBrush.width = brushSize;
      }
    }
  };

  const downloadCanvas = () => {
    if (fabricCanvasRef.current) {
      const dataURL = fabricCanvasRef.current.toDataURL({
        format: "png",
        quality: 0.8,
      });
      const link = document.createElement("a");
      link.download = "whiteboard.png";
      link.href = dataURL;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  const uploadImage = (e) => {
    const file = e.target.files[0];
    const reader = new FileReader();
    reader.onload = (f) => {
      const data = f.target.result;
      fabric.Image.fromURL(data, (img) => {
        img.scaleToWidth(200);
        fabricCanvasRef.current.add(img);
        fabricCanvasRef.current.renderAll();
      });
    };
    reader.readAsDataURL(file);
  };

  return (
    <div className="chatroom-container">
      <div className="whiteboard-section">
        <p className="chat-room-header">SyncOps Chat Room</p>
        <canvas ref={canvasRef} className="whiteboard" />
        <div className="whiteboard-controls">
          <input
            type="color"
            value={color}
            onChange={(e) => setColor(e.target.value)}
            className="color-picker"
          />
          <input
            type="range"
            min="1"
            max="20"
            value={brushSize}
            onChange={(e) => setBrushSize(Number(e.target.value))}
            className="brush-size-slider"
          />
          <button
            onClick={toggleEraser}
            className={`control-button ${isErasing ? "active" : ""}`}
          >
            {isErasing ? "Draw" : "Erase"}
          </button>
          <button onClick={clearCanvas} className="control-button">
            Clear
          </button>
          <button onClick={downloadCanvas} className="control-button">
            Download
          </button>
          <label className="control-button">
            Upload
            <input
              type="file"
              accept="image/*"
              onChange={uploadImage}
              style={{ display: "none" }}
            />
          </label>
        </div>
      </div>

      <div className="chat-section">
        <div className="chat-header">
          <h2>Team Chat</h2>
        </div>
        <div className="messages">
          {messages.map((msg, idx) => (
            <div key={idx} className="message">
              <div className="message-header">
                <strong>{msg.username}</strong>
                <span className="timestamp">
                  {new Date(msg.timestamp).toLocaleTimeString()}
                </span>
                <span className={`sentiment ${msg.sentiment}`}>
                  {msg.sentiment}
                </span>
              </div>
              <div className="message-content">{msg.text}</div>
            </div>
          ))}
          <div ref={messagesEndRef} />
        </div>

        <form onSubmit={sendMessage} className="message-input">
          <input
            type="text"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            placeholder="Your name"
            className="username-input-cr"
          />
          <div className="message-submit">
            <input
              type="text"
              value={message}
              onChange={handleInputChange}
              placeholder="Type a message"
              className="text-input"
            />
            <button type="submit" className="send-button">
              Send
            </button>
          </div>
        </form>

        {aiSuggestions.length > 0 && (
          <div className="ai-suggestions">
            <p>Suggestions:</p>
            <ul>
              {aiSuggestions.map((suggestion, idx) => (
                <li key={idx} onClick={() => setMessage(suggestion)}>
                  {suggestion}
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>
    </div>
  );
};

export default ChatRoom;



================================================
File: src/pages/ContentAnonymizer/ContentAnonymizer.css
================================================
/* Main container with modern glass morphism effect */
.anonymizer-container {
  max-width: 1500px;
  margin: 0px auto;
  padding: 32px;
  background: rgba(255, 255, 255, 0.95);
  border-radius: 24px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08), 0 2px 8px rgba(0, 0, 0, 0.06),
    inset 0 0 0 1px rgba(255, 255, 255, 0.5);
  backdrop-filter: blur(12px);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.anonymizer-container:hover {
  transform: translateY(0px);
  box-shadow: 0 12px 48px rgba(0, 0, 0, 0.12), 0 4px 16px rgba(0, 0, 0, 0.08),
    inset 0 0 0 1px rgba(255, 255, 255, 0.5);
}

/* Enhanced header styles */
.anonymizer-header {
  text-align: center;
  margin-bottom: 40px;
}

.logo {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 16px;
  margin-bottom: 24px;
  animation: fadeInDown 0.6s ease-out;
}

.logo-icon {
  font-size: 2.75rem;
  background: linear-gradient(135deg, #2563eb, #1d4ed8);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  filter: drop-shadow(0 2px 4px rgba(37, 99, 235, 0.2));
}

.anonymizer-title {
  font-size: 2.5rem;
  background: linear-gradient(135deg, #2563eb, #1d4ed8);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  font-weight: 800;
  letter-spacing: -0.03em;
  margin-bottom: 16px;
  animation: fadeInUp 0.6s ease-out;
}

.anonymizer-description {
  font-size: 1.125rem;
  color: #64748b;
  max-width: 600px;
  margin: 0 auto;
  line-height: 1.7;
  animation: fadeIn 0.8s ease-out;
}

/* Enhanced input section */
.input-group {
  margin-bottom: 32px;
  animation: fadeIn 0.6s ease-out 0.2s backwards;
}

.input-label {
  display: block;
  margin-bottom: 12px;
  font-size: 1.125rem;
  color: #334155;
  font-weight: 600;
  letter-spacing: -0.01em;
}

.anonymizer-input {
  width: 97%;
  min-height: 180px;
  padding: 20px;
  border: 2px solid #e2e8f0;
  border-radius: 12px;
  font-size: 1.0625rem;
  color: #334155;
  background: #ffffff;
  transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
  resize: vertical;
  line-height: 1.6;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.02);
}

.anonymizer-input:focus {
  outline: none;
  border-color: #2563eb;
  box-shadow: 0 0 0 4px rgba(37, 99, 235, 0.1),
    0 4px 12px rgba(37, 99, 235, 0.05);
}

.anonymizer-input::placeholder {
  color: #94a3b8;
  opacity: 0.8;
}

/* Enhanced button styles */
.anonymizer-button {
  width: 25%;
  border-radius: 50px;
  margin-left: 425px;
  padding: 16px 28px;
  background: linear-gradient(135deg, #2563eb, #1d4ed8);
  color: white;
  border: none;
  font-size: 1.125rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 12px;
  box-shadow: 0 4px 12px rgba(37, 99, 235, 0.2),
    0 2px 4px rgba(37, 99, 235, 0.1);
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.anonymizer-button:hover:not(:disabled) {
  transform: translateY(-4px);
  box-shadow: 0 8px 24px rgba(37, 99, 235, 0.25),
    0 4px 8px rgba(37, 99, 235, 0.15);
  background: linear-gradient(135deg, #1d4ed8, #1e40af);
}

.anonymizer-button:active:not(:disabled) {
  transform: translateY(0);
  box-shadow: 0 2px 8px rgba(37, 99, 235, 0.15),
    0 1px 2px rgba(37, 99, 235, 0.1);
}

.anonymizer-button:disabled {
  background: linear-gradient(135deg, #93c5fd, #60a5fa);
  cursor: not-allowed;
  transform: none;
  box-shadow: none;
}

/* Enhanced loading animation */
.loading-dots {
  display: flex;
  gap: 6px;
}

.loading-dots span {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background-color: currentColor;
  animation: loadingDots 1.4s infinite;
  opacity: 0;
}

.loading-dots span:nth-child(2) {
  animation-delay: 0.2s;
}

.loading-dots span:nth-child(3) {
  animation-delay: 0.4s;
}

/* Enhanced error message */
.error-message {
  margin-top: 20px;
  padding: 16px 20px;
  background-color: #fee2e2;
  color: #dc2626;
  border-radius: 12px;
  display: flex;
  align-items: center;
  gap: 12px;
  font-size: 1rem;
  border: 1px solid #fecaca;
  animation: shake 0.6s cubic-bezier(0.36, 0.07, 0.19, 0.97);
  box-shadow: 0 2px 8px rgba(220, 38, 38, 0.1);
}

/* Enhanced output section */
.output-section {
  margin-top: 40px;
  animation: fadeInUp 0.4s ease-out;
}

.output-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.output-title {
  font-size: 1.375rem;
  color: #334155;
  font-weight: 700;
  letter-spacing: -0.02em;
}

.copy-button {
  padding: 10px 20px;
  background: #f1f5f9;
  border: none;
  border-radius: 8px;
  color: #2563eb;
  font-size: 0.9375rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  gap: 8px;
}

.copy-button:hover {
  background: #e2e8f0;
  transform: translateY(-1px);
}

.copy-button:active {
  transform: translateY(0);
}

.output-content {
  padding: 24px;
  background: #f8fafc;
  border-radius: 12px;
  border: 1px solid #e2e8f0;
  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.02);
}

.output-content p {
  color: #334155;
  line-height: 1.7;
  white-space: pre-wrap;
  word-break: break-word;
  font-size: 1.0625rem;
}

/* Enhanced info section */
.info-section {
  margin-top: 40px;
  padding: 32px;
  background: linear-gradient(135deg, #f8fafc, #f1f5f9);
  border-radius: 16px;
  border: 1px solid #e2e8f0;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.03),
    inset 0 2px 4px rgba(255, 255, 255, 0.5);
}

.info-section p {
  color: #334155;
  font-weight: 600;
  margin-bottom: 16px;
  font-size: 1.125rem;
}

.info-section ul {
  list-style: none;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
  gap: 12px;
}

.info-section li {
  color: #64748b;
  padding-left: 28px;
  position: relative;
  line-height: 1.6;
  transition: transform 0.2s ease;
}

.info-section li:hover {
  transform: translateX(4px);
  color: #334155;
}

.info-section li::before {
  content: "â€¢";
  position: absolute;
  left: 10px;
  color: #2563eb;
  font-size: 1.25em;
}

/* Enhanced animations */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInDown {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes loadingDots {
  0%,
  100% {
    opacity: 0;
    transform: scale(0.8);
  }
  50% {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes shake {
  10%,
  90% {
    transform: translateX(-1px);
  }
  20%,
  80% {
    transform: translateX(2px);
  }
  30%,
  70% {
    transform: translateX(-4px);
  }
  40%,
  60% {
    transform: translateX(4px);
  }
  50% {
    transform: translateX(-4px);
  }
}

/* Enhanced responsive design */
@media (max-width: 768px) {
  .anonymizer-container {
    margin: 16px;
    padding: 24px;
    border-radius: 20px;
  }

  .anonymizer-title {
    font-size: 2rem;
  }

  .anonymizer-description {
    font-size: 1rem;
  }

  .input-label {
    font-size: 1rem;
  }

  .anonymizer-input {
    padding: 16px;
    font-size: 1rem;
  }

  .anonymizer-button {
    padding: 14px 24px;
    font-size: 1rem;
  }

  .info-section {
    padding: 24px;
  }

  .info-section ul {
    grid-template-columns: 1fr;
  }
}

/* Print styles */
@media print {
  .anonymizer-container {
    margin: 0;
    padding: 20px;
    box-shadow: none;
  }

  .copy-button {
    display: none;
  }
}



================================================
File: src/pages/ContentAnonymizer/ContentAnonymizer.jsx
================================================
"use client"

import { useState } from "react"
import "./ContentAnonymizer.css"

const ContentAnonymizer = () => {
  const [inputText, setInputText] = useState("")
  const [anonymizedText, setAnonymizedText] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState("")

  const API_KEY = "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"

  const anonymizeContent = async () => {
    if (!inputText.trim()) {
      setError("Please enter some text to anonymize")
      return
    }

    setIsLoading(true)
    setError("")

    try {
      const response = await fetch("https://api.perplexity.ai/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${API_KEY}`,
        },
        body: JSON.stringify({
          model: "sonar",
          messages: [
            {
              role: "system",
              content:
                "You are an expert at anonymizing sensitive information while preserving the context and structure of text.",
            },
            {
              role: "user",
              content: `Please anonymize the following text by replacing all sensitive information (including names, email addresses, phone numbers, physical addresses, dates, identification numbers, and other personal information) with appropriate descriptive placeholders in square brackets. Maintain the original structure and context of the text. Here's the text to anonymize:\n\n${inputText}`,
            },
          ],
          temperature: 0.3,
          max_tokens: 1024,
        }),
      })

      if (!response.ok) {
        throw new Error(`API request failed with status ${response.status}`)
      }

      const data = await response.json()

      if (data.choices && data.choices[0]?.message?.content) {
        setAnonymizedText(data.choices[0].message.content)
        setError("")
      } else {
        throw new Error("Invalid response from API")
      }
    } catch (err) {
      console.error("Anonymization error:", err)
      setError("Failed to anonymize content. Please try again.")
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="anonymizer-container">
      <div className="anonymizer-header">
        <div className="logo">
          <span className="logo-icon">🔒</span>
          <h1 className="anonymizer-title">AI-Powered Content Anonymizer</h1>
        </div>
        <p className="anonymizer-description">Protect sensitive information using advanced AI technology</p>
      </div>

      <div className="anonymizer-content">
        <div className="input-group">
          <label htmlFor="input-text" className="input-label">
            Enter Text to Anonymize:
          </label>
          <textarea
            id="input-text"
            className="anonymizer-input"
            placeholder="Type or paste your text here. For example:
John Doe works at Tech Corp.
Email: john.doe@techcorp.com
Phone: (555) 123-4567"
            value={inputText}
            onChange={(e) => setInputText(e.target.value)}
            rows={6}
          />
        </div>

        <button
          className={`anonymizer-button ${isLoading ? "loading" : ""}`}
          onClick={anonymizeContent}
          disabled={isLoading}
        >
          {isLoading ? (
            <div className="button-content">
              <span className="loading-text">Processing with AI</span>
              <div className="loading-dots">
                <span>.</span>
                <span>.</span>
                <span>.</span>
              </div>
            </div>
          ) : (
            "Anonymize Content"
          )}
        </button>

        {error && (
          <div className="error-message">
            <span className="error-icon">⚠️</span>
            {error}
          </div>
        )}

        {anonymizedText && (
          <div className="output-section">
            <div className="output-header">
              <h2 className="output-title">Anonymized Content</h2>
              <button
                className="copy-button"
                onClick={() => {
                  navigator.clipboard.writeText(anonymizedText)
                  alert("Copied to clipboard!")
                }}
              >
                <span>📋</span> Copy
              </button>
            </div>
            <div className="output-content">
              <p>{anonymizedText}</p>
            </div>
          </div>
        )}

        <div className="info-section">
          <p>This tool can anonymize:</p>
          <ul>
            <li>Names and titles</li>
            <li>Email addresses</li>
            <li>Phone numbers</li>
            <li>Physical addresses</li>
            <li>Dates and timestamps</li>
            <li>Identification numbers</li>
            <li>Company names</li>
            <li>Other sensitive information</li>
          </ul>
        </div>
      </div>
    </div>
  )
}

export default ContentAnonymizer



================================================
File: src/pages/ContentGeneration/ContentGeneration.css
================================================
/* ContentGeneration.css - Professional & Classic Edition */
:root {
  --primary-color: #2c3e50;
  --primary-light: #34495e;
  --primary-dark: #1a2530;
  --accent-color: #3498db;
  --accent-light: #5dade2;
  --accent-dark: #2980b9;
  --success-color: #27ae60;
  --error-color: #c0392b;
  --warning-color: #f39c12;
  --text-primary: #2c3e50;
  --text-secondary: #7f8c8d;
  --text-light: #ecf0f1;
  --border-color: #dfe6e9;
  --border-light: #eaecef;
  --background-white: #ffffff;
  --background-light: #f8fafc;
  --background-lighter: #f9fafb;
  --shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-md: 0 4px 8px rgba(0, 0, 0, 0.08);
  --shadow-lg: 0 8px 16px rgba(0, 0, 0, 0.1);
  --font-primary: 'Playfair Display', Georgia, serif;
  --font-secondary: 'Source Sans Pro', 'Segoe UI', sans-serif;
  --radius-sm: 4px;
  --radius-md: 8px;
  --radius-lg: 12px;
  --transition-fast: 0.2s ease;
  --transition-normal: 0.3s ease;
  --transition-slow: 0.5s ease;
}

/* Base Container */
.coge-content-generator {
  max-width: 1500px;
  margin: 0rem auto;
  padding: 3rem;
  background-color: var(--background-white);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-lg);
  transition: all var(--transition-normal);
  border: 1px solid var(--border-color);
  position: relative;
  overflow: hidden;
}

.coge-content-generator:hover {
  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.12);
}

/* Header Styles */
.coge-content-generator__header {
  text-align: center;
  margin-bottom: 3rem;
  padding-bottom: 2rem;
  border-bottom: 1px solid var(--border-light);
  position: relative;
}

.coge-content-generator__header::after {
  content: "";
  position: absolute;
  bottom: -1px;
  left: 50%;
  width: 100px;
  height: 2px;
  background: linear-gradient(to right, var(--accent-dark), var(--accent-light), var(--accent-dark));
  transform: translateX(-50%);
}

.coge-content-generator__title {
  font-family: var(--font-primary);
  font-size: 2.5rem;
  color: var(--primary-color);
  margin-bottom: 1rem;
  font-weight: 700;
  letter-spacing: -0.5px;
  position: relative;
  display: inline-block;
}

.coge-content-generator__title::after {
  content: "";
  position: absolute;
  bottom: -8px;
  left: 0;
  width: 100%;
  height: 1px;
  background: linear-gradient(to right, transparent, var(--accent-color), transparent);
}

.coge-content-generator__subtitle {
  font-family: var(--font-secondary);
  font-size: 1.125rem;
  color: var(--text-secondary);
  margin: 1rem 0 0;
  font-weight: 400;
  font-style: italic;
  max-width: 800px;
  margin-left: auto;
  margin-right: auto;
  line-height: 1.6;
}

/* Controls Section */
.coge-content-generator__controls {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 2rem;
  margin-bottom: 2.5rem;
  background-color: var(--background-lighter);
  padding: 2rem;
  border-radius: var(--radius-md);
  border: 1px solid var(--border-light);
}

.coge-content-generator__control-group {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
  position: relative;
}

.coge-content-generator__label {
  font-family: var(--font-primary);
  font-size: 1rem;
  font-weight: 600;
  color: var(--primary-color);
  transition: color var(--transition-fast);
  margin-bottom: 0.5rem;
}

.coge-content-generator__select {
  padding: 0.875rem 1rem;
  border: 1px solid var(--border-color);
  border-radius: var(--radius-md);
  font-family: var(--font-secondary);
  font-size: 1rem;
  background-color: var(--background-white);
  transition: all var(--transition-normal);
  cursor: pointer;
  box-shadow: var(--shadow-sm);
  appearance: none;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath d='M1 4l5 5 5-5' fill='none' stroke='%232c3e50' stroke-width='2' stroke-linecap='round'/%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: right 1rem center;
  color: var(--text-primary);
}

.coge-content-generator__select:hover {
  border-color: var(--accent-color);
}

.coge-content-generator__select:focus {
  outline: none;
  border-color: var(--accent-color);
  box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.15);
}

/* Templates Section */
.coge-content-generator__templates {
  margin-bottom: 3rem;
  padding: 2rem;
  background-color: var(--background-lighter);
  border-radius: var(--radius-md);
  border: 1px solid var(--border-light);
  position: relative;
}

.coge-content-generator__templates-title {
  font-family: var(--font-primary);
  font-size: 1.25rem;
  color: var(--primary-color);
  margin-bottom: 1.5rem;
  position: relative;
  padding-bottom: 0.75rem;
}

.coge-content-generator__templates-title::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  width: 60px;
  height: 2px;
  background: var(--accent-color);
}

.coge-content-generator__templates-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 1.5rem;
}

.coge-content-generator__template-button {
  padding: 1.25rem;
  background-color: var(--background-white);
  border: 1px solid var(--border-color);
  border-radius: var(--radius-md);
  font-family: var(--font-secondary);
  font-size: 0.95rem;
  color: var(--text-primary);
  cursor: pointer;
  transition: all var(--transition-normal);
  text-align: left;
  box-shadow: var(--shadow-sm);
  position: relative;
  overflow: hidden;
}

.coge-content-generator__template-button::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 4px;
  height: 100%;
  background: var(--accent-color);
  transform: scaleY(0);
  transform-origin: bottom;
  transition: transform var(--transition-normal);
}

.coge-content-generator__template-button:hover {
  border-color: var(--accent-color);
  box-shadow: var(--shadow-md);
  transform: translateY(-2px);
  padding-left: 1.5rem;
}

.coge-content-generator__template-button:hover::before {
  transform: scaleY(1);
}

/* Input Section */
.coge-content-generator__input-section {
  margin-bottom: 3rem;
  background-color: var(--background-lighter);
  border-radius: var(--radius-md);
  padding: 2rem;
  border: 1px solid var(--border-light);
  position: relative;
}

.coge-content-generator__input-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
  position: relative;
}

.coge-content-generator__counts {
  display: inline-flex;
  align-items: center;
  gap: 1rem;
  font-family: var(--font-secondary);
  font-size: 0.875rem;
  color: var(--text-secondary);
  background-color: var(--background-white);
  border: 1px solid var(--border-light);
  border-radius: var(--radius-sm);
  padding: 0.5rem 1rem;
  box-shadow: var(--shadow-sm);
}

.coge-content-generator__counts span {
  display: inline-flex;
  align-items: center;
}

.coge-content-generator__counts span:not(:first-child)::before {
  content: "â€¢";
  margin-right: 0.5rem;
  margin-left: -0.5rem;
  color: var(--accent-color);
}

.coge-content-generator__textarea {
  width: 96%;
  min-height: 200px;
  padding: 1.5rem;
  border: 1px solid var(--border-color);
  border-radius: var(--radius-md);
  font-family: var(--font-secondary);
  font-size: 1rem;
  line-height: 1.6;
  resize: vertical;
  transition: all var(--transition-normal);
  background-color: var(--background-white);
  color: var(--text-primary);
  box-shadow: inset var(--shadow-sm);
}

.coge-content-generator__textarea:focus {
  outline: none;
  border-color: var(--accent-color);
  box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
}

/* Button Styles */
.coge-content-generator__button {
  padding: 1rem 2.5rem;
  margin: 2rem auto;
  display: block;
  font-family: var(--font-secondary);
  font-size: 1rem;
  font-weight: 600;
  color: var(--text-light);
  background: var(--primary-color);
  border: none;
  border-radius: 30px;
  cursor: pointer;
  transition: all var(--transition-normal);
  position: relative;
  overflow: hidden;
  letter-spacing: 1px;
  box-shadow: var(--shadow-md);
}

.coge-content-generator__button::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    120deg,
    transparent,
    rgba(255, 255, 255, 0.2),
    transparent
  );
  transition: all 0.6s ease;
}

.coge-content-generator__button:hover {
  background: var(--primary-light);
  transform: translateY(-2px);
  box-shadow: var(--shadow-lg);
}

.coge-content-generator__button:hover::before {
  left: 100%;
}

.coge-content-generator__button:active {
  transform: translateY(1px);
  box-shadow: var(--shadow-sm);
}

.coge-content-generator__button--loading {
  opacity: 0.8;
  cursor: not-allowed;
}

.coge-content-generator__loading-text {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
}

.coge-content-generator__loading-dots {
  position: relative;
  width: 16px;
  height: 16px;
}

.coge-content-generator__loading-dots::after {
  content: "";
  position: absolute;
  width: 16px;
  height: 16px;
  border: 2px solid var(--text-light);
  border-radius: 50%;
  border-top-color: transparent;
  animation: spin 1s linear infinite;
}

/* Output Section */
.coge-content-generator__output {
  margin-top: 3rem;
  padding: 2rem;
  background-color: var(--background-lighter);
  border-radius: var(--radius-md);
  border: 1px solid var(--border-light);
  box-shadow: var(--shadow-md);
  animation: fadeIn 0.5s ease-in-out;
}

.coge-content-generator__output-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid var(--border-light);
}

.coge-content-generator__output-title {
  font-family: var(--font-primary);
  font-size: 1.25rem;
  color: var(--primary-color);
  margin: 0;
  font-weight: 600;
  position: relative;
  padding-left: 1rem;
}

.coge-content-generator__output-title::before {
  content: "";
  position: absolute;
  left: 0;
  top: 0;
  height: 100%;
  width: 3px;
  background: var(--accent-color);
  border-radius: 2px;
}

.coge-content-generator__output-actions {
  display: flex;
  gap: 1rem;
}

.coge-content-generator__action-button {
  padding: 0.625rem 1.25rem;
  font-family: var(--font-secondary);
  font-size: 0.875rem;
  font-weight: 500;
  color: var(--primary-color);
  background-color: var(--background-white);
  border: 1px solid var(--border-color);
  border-radius: var(--radius-md);
  cursor: pointer;
  transition: all var(--transition-normal);
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.coge-content-generator__action-button:hover {
  background-color: var(--primary-color);
  color: var(--text-light);
  border-color: var(--primary-color);
}

.coge-content-generator__action-button--success {
  background-color: var(--success-color);
  color: var(--text-light);
  border-color: var(--success-color);
}

.coge-content-generator__output-content {
  padding: 1.5rem;
  background-color: var(--background-white);
  border-radius: var(--radius-md);
  font-family: var(--font-secondary);
  font-size: 1rem;
  line-height: 1.7;
  color: var(--text-primary);
  border: 1px solid var(--border-light);
  box-shadow: inset var(--shadow-sm);
}

.coge-content-generator__output-content h1,
.coge-content-generator__output-content h2,
.coge-content-generator__output-content h3,
.coge-content-generator__output-content h4,
.coge-content-generator__output-content h5,
.coge-content-generator__output-content h6 {
  font-family: var(--font-primary);
  color: var(--primary-color);
  margin-top: 1.5rem;
  margin-bottom: 1rem;
  line-height: 1.3;
}

.coge-content-generator__output-content p {
  margin-bottom: 1rem;
}

.coge-content-generator__output-content pre,
.coge-content-generator__output-content code {
  background-color: var(--background-lighter);
  border-radius: var(--radius-sm);
  padding: 0.2rem 0.4rem;
  font-family: 'Courier New', monospace;
  font-size: 0.9rem;
  border: 1px solid var(--border-light);
}

.coge-content-generator__output-content pre {
  padding: 1rem;
  overflow-x: auto;
}

.coge-content-generator__output-content blockquote {
  border-left: 4px solid var(--accent-color);
  padding-left: 1rem;
  margin-left: 0;
  color: var(--text-secondary);
  font-style: italic;
}

.coge-content-generator__save-status {
  margin-top: 1rem;
  padding: 0.75rem;
  text-align: center;
  color: var(--success-color);
  font-family: var(--font-secondary);
  font-size: 0.875rem;
  animation: fadeIn 0.3s ease-in-out;
  background-color: rgba(39, 174, 96, 0.1);
  border-radius: var(--radius-md);
}

/* History Section */
.coge-content-generator__history {
  margin-top: 3rem;
  padding: 2rem;
  background-color: var(--background-lighter);
  border-radius: var(--radius-md);
  border: 1px solid var(--border-light);
  max-height: 300px;
  overflow: hidden;
  transition: max-height var(--transition-slow);
}

.coge-content-generator__history--expanded {
  max-height: 1000px;
}

.coge-content-generator__history-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
  padding-bottom: 0.75rem;
  border-bottom: 1px solid var(--border-light);
}

.coge-content-generator__history-title {
  font-family: var(--font-primary);
  font-size: 1.125rem;
  color: var(--primary-color);
  margin: 0;
  position: relative;
  padding-left: 1rem;
}

.coge-content-generator__history-title::before {
  content: "";
  position: absolute;
  left: 0;
  top: 0;
  height: 100%;
  width: 3px;
  background: var(--accent-color);
  border-radius: 2px;
}

.coge-content-generator__history-actions {
  display: flex;
  gap: 1rem;
}

.coge-content-generator__history-toggle,
.coge-content-generator__history-clear {
  padding: 0.5rem 1rem;
  font-family: var(--font-secondary);
  font-size: 0.875rem;
  color: var(--text-secondary);
  background-color: var(--background-white);
  border: 1px solid var(--border-color);
  border-radius: var(--radius-md);
  cursor: pointer;
  transition: all var(--transition-normal);
}

.coge-content-generator__history-toggle:hover {
  background-color: var(--accent-color);
  color: var(--text-light);
  border-color: var(--accent-color);
}

.coge-content-generator__history-clear:hover {
  background-color: var(--error-color);
  color: var(--text-light);
  border-color: var(--error-color);
}

.coge-content-generator__history-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.coge-content-generator__history-item {
  padding: 1.25rem;
  background-color: var(--background-white);
  border-radius: var(--radius-md);
  border: 1px solid var(--border-light);
  transition: all var(--transition-normal);
  box-shadow: var(--shadow-sm);
}

.coge-content-generator__history-item:hover {
  border-color: var(--accent-color);
  box-shadow: var(--shadow-md);
  transform: translateY(-2px);
}

.coge-content-generator__history-item-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 0.75rem;
  padding-bottom: 0.5rem;
  border-bottom: 1px solid var(--border-light);
}

.coge-content-generator__history-item-prompt {
  font-family: var(--font-secondary);
  font-size: 0.875rem;
  color: var(--text-primary);
  font-weight: 500;
}

.coge-content-generator__history-item-date {
  font-family: var(--font-secondary);
  font-size: 0.75rem;
  color: var(--text-secondary);
  font-style: italic;
}

.coge-content-generator__history-item-tags {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
}

.coge-content-generator__history-item-tag {
  padding: 0.25rem 0.75rem;
  font-family: var(--font-secondary);
  font-size: 0.75rem;
  color: var(--accent-color);
  background-color: rgba(52, 152, 219, 0.1);
  border-radius: 20px;
  border: 1px solid rgba(52, 152, 219, 0.2);
}

/* Error Message */
.coge-content-generator__error {
  margin-top: 1rem;
  padding: 1rem;
  background-color: rgba(192, 57, 43, 0.1);
  border: 1px solid rgba(192, 57, 43, 0.2);
  border-radius: var(--radius-md);
  color: var(--error-color);
  font-family: var(--font-secondary);
  font-size: 0.875rem;
  animation: fadeIn 0.3s ease-in-out;
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.coge-content-generator__error::before {
  content: "!";
  display: flex;
  align-items: center;
  justify-content: center;
  width: 24px;
  height: 24px;
  background-color: var(--error-color);
  color: white;
  border-radius: 50%;
  font-weight: bold;
}

/* Responsive Design */
@media (max-width: 992px) {
  .coge-content-generator {
    margin: 1.5rem;
    padding: 2rem;
  }
  
  .coge-content-generator__title {
    font-size: 2.25rem;
  }
}

@media (max-width: 768px) {
  .coge-content-generator {
    margin: 1rem;
    padding: 1.5rem;
  }

  .coge-content-generator__title {
    font-size: 2rem;
  }

  .coge-content-generator__subtitle {
    font-size: 1rem;
  }

  .coge-content-generator__controls {
    grid-template-columns: 1fr;
    gap: 1.5rem;
    padding: 1.5rem;
  }

  .coge-content-generator__templates-grid {
    grid-template-columns: 1fr;
  }

  .coge-content-generator__output-header {
    flex-direction: column;
    gap: 1rem;
    align-items: flex-start;
  }

  .coge-content-generator__output-actions {
    width: 100%;
    justify-content: space-between;
  }
  
  .coge-content-generator__history-header {
    flex-direction: column;
    gap: 1rem;
    align-items: flex-start;
  }
  
  .coge-content-generator__history-actions {
    width: 100%;
    justify-content: space-between;
  }
}

@media (max-width: 480px) {
  .coge-content-generator {
    margin: 0.5rem;
    padding: 1rem;
  }
  
  .coge-content-generator__title {
    font-size: 1.75rem;
  }
  
  .coge-content-generator__button {
    width: 100%;
    padding: 0.875rem 1.5rem;
  }
  
  .coge-content-generator__history-item-header {
    flex-direction: column;
    gap: 0.5rem;
    align-items: flex-start;
  }
}

/* Print styles */
@media print {
  .coge-content-generator {
    box-shadow: none;
    margin: 0;
    padding: 1cm;
  }
  
  .coge-content-generator__button,
  .coge-content-generator__action-button,
  .coge-content-generator__history-toggle,
  .coge-content-generator__history-clear {
    display: none;
  }
  
  .coge-content-generator__output {
    break-inside: avoid;
  }
  
  .coge-content-generator__history {
    break-before: page;
  }
}

/* Animations */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

@keyframes pulse {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
}


================================================
File: src/pages/ContentGeneration/ContentGeneration.jsx
================================================
"use client"

import { useState, useEffect, useRef } from "react"
import "./ContentGeneration.css"
import { marked } from "marked"
import DOMPurify from "dompurify"
import "react-toastify/dist/ReactToastify.css"

const PERPLEXITY_API_KEY = "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"

// Configure marked options
marked.setOptions({
  breaks: true,
  gfm: true,
})

const ContentGeneration = () => {
  const [apiKey, setApiKey] = useState("")
  const [inputPrompt, setInputPrompt] = useState("")
  const [generatedContent, setGeneratedContent] = useState("")
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState("")
  const [copySuccess, setCopySuccess] = useState(false)
  const [wordCount, setWordCount] = useState(0)
  const [charCount, setCharCount] = useState(0)
  const [contentHistory, setContentHistory] = useState([])
  const [selectedTone, setSelectedTone] = useState("professional")
  const [selectedLength, setSelectedLength] = useState("medium")
  const [saveStatus, setSaveStatus] = useState("")
  const [isExpanded, setIsExpanded] = useState(false)
  const [showApiKeyInput, setShowApiKeyInput] = useState(false)
  const [markdownMode, setMarkdownMode] = useState(true)
  const textareaRef = useRef(null)

  const toneOptions = [
    { value: "professional", label: "Professional" },
    { value: "casual", label: "Casual" },
    { value: "friendly", label: "Friendly" },
    { value: "formal", label: "Formal" },
    { value: "technical", label: "Technical" },
  ]

  const lengthOptions = [
    { value: "short", label: "Short (100 words)", maxTokens: 400 },
    { value: "medium", label: "Medium (300 words)", maxTokens: 600 },
    { value: "long", label: "Long (500 words)", maxTokens: 1000 },
    { value: "custom", label: "Custom Length", maxTokens: 1200 },
  ]

  const promptTemplates = [
    "Write a blog post about technology trends in 2024.",
    "Create a social media caption for a new product launch.",
    "Draft an email announcing a company event.",
    "Generate a product description for a fitness gadget.",
    "Compose a business proposal about renewable energy.",
  ]

  // Comprehensive initialization from localStorage
  useEffect(() => {
    // Restore API Key
    const savedApiKey = localStorage.getItem("perplexityApiKey")
    if (savedApiKey) {
      setApiKey(savedApiKey)
    }

    // Restore Content History
    const savedHistory = localStorage.getItem("contentHistory")
    if (savedHistory) {
      setContentHistory(JSON.parse(savedHistory))
    }

    // Restore Last Used Prompt
    const savedPrompt = localStorage.getItem("lastUsedPrompt")
    if (savedPrompt) {
      setInputPrompt(savedPrompt)
    }

    // Restore Last Used Tone
    const savedTone = localStorage.getItem("lastUsedTone")
    if (savedTone) {
      setSelectedTone(savedTone)
    }

    // Restore Last Used Length
    const savedLength = localStorage.getItem("lastUsedLength")
    if (savedLength) {
      setSelectedLength(savedLength)
    }

    // Restore Generated Content
    const savedContent = localStorage.getItem("lastGeneratedContent")
    if (savedContent) {
      setGeneratedContent(savedContent)
    }
  }, [])

  // Update localStorage when key states change
  useEffect(() => {
    if (inputPrompt) {
      localStorage.setItem("lastUsedPrompt", inputPrompt)
    }
  }, [inputPrompt])

  useEffect(() => {
    localStorage.setItem("lastUsedTone", selectedTone)
  }, [selectedTone])

  useEffect(() => {
    localStorage.setItem("lastUsedLength", selectedLength)
  }, [selectedLength])

  useEffect(() => {
    if (generatedContent) {
      localStorage.setItem("lastGeneratedContent", generatedContent)
    }
  }, [generatedContent])

  // Word and character count tracking
  useEffect(() => {
    if (inputPrompt) {
      const words = inputPrompt.trim().split(/\s+/).length
      const chars = inputPrompt.length
      setWordCount(words)
      setCharCount(chars)
    } else {
      setWordCount(0)
      setCharCount(0)
    }
  }, [inputPrompt])

  // Content Generation Function
  const handleGenerateContent = async () => {
    if (!PERPLEXITY_API_KEY) {
      setError("Perplexity API key is missing.")
      return
    }

    if (!inputPrompt.trim()) {
      setError("Please enter a prompt to generate content.")
      return
    }

    setError("")
    setLoading(true)
    setGeneratedContent("")
    setCopySuccess(false)

    const selectedLengthConfig = lengthOptions.find((l) => l.value === selectedLength)

    try {
      const response = await fetch("https://api.perplexity.ai/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${PERPLEXITY_API_KEY}`,
        },
        body: JSON.stringify({
          model: "sonar",
          messages: [
            {
              role: "system",
              content: `You are an expert content creator that generates high-quality content in the specified tone and length. Always format your response appropriately.`,
            },
            {
              role: "user",
              content: `Generate content with these specifications:
              - Tone: ${selectedTone}
              - Approximate Length: ${selectedLength} (around ${selectedLengthConfig.maxTokens} words)
              - Format: ${markdownMode ? "Use Markdown formatting" : "Plain text"}
              - Be clear, engaging, and directly address this prompt: ${inputPrompt}`,
            },
          ],
          temperature: 0.7,
          max_tokens: selectedLengthConfig.maxTokens,
        }),
      })

      if (!response.ok) {
        const errorResponse = await response.json()
        throw new Error(errorResponse.error?.message || "API request failed")
      }

      const data = await response.json()
      const generatedText = data.choices[0].message.content.trim()

      setGeneratedContent(generatedText)
      localStorage.setItem("lastGeneratedContent", generatedText)

      // Add to history
      const newHistoryItem = {
        id: Date.now(),
        prompt: inputPrompt,
        content: generatedText,
        timestamp: new Date().toISOString(),
        tone: selectedTone,
        length: selectedLength,
      }

      const updatedHistory = [newHistoryItem, ...contentHistory].slice(0, 10)
      setContentHistory(updatedHistory)
      localStorage.setItem("contentHistory", JSON.stringify(updatedHistory))
    } catch (err) {
      setError(`Content generation failed: ${err.message}`)
      console.error("Generation Error:", err)
    } finally {
      setLoading(false)
    }
  }

  // Input Change Handler
  const handleInputChange = (e) => {
    setInputPrompt(e.target.value)
    setError("")
    autoResizeTextarea()
  }

  // Textarea Auto-resize
  const autoResizeTextarea = () => {
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto"
      textareaRef.current.style.height = textareaRef.current.scrollHeight + "px"
    }
  }

  // Copy Generated Content
  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(generatedContent)
      setCopySuccess(true)
      setTimeout(() => setCopySuccess(false), 2000)
    } catch (err) {
      console.error("Failed to copy text:", err)
      setError("Failed to copy to clipboard")
    }
  }

  // Save Generated Content
  const handleSave = () => {
    if (!generatedContent) return

    const blob = new Blob([generatedContent], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `generated-content-${Date.now()}.${markdownMode ? "md" : "txt"}`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)

    setSaveStatus("Content saved successfully!")
    setTimeout(() => setSaveStatus(""), 2000)
  }

  // Template Selection
  const handleTemplateSelect = (template) => {
    setInputPrompt(template)
    textareaRef.current?.focus()
  }

  // API Key Saving
  const handleSaveApiKey = () => {
    if (apiKey) {
      localStorage.setItem("perplexityApiKey", apiKey)
      setShowApiKeyInput(false)
    }
  }

  // Clear Generation History
  const clearHistory = () => {
    setContentHistory([])
    localStorage.removeItem("contentHistory")
    localStorage.removeItem("lastGeneratedContent")
    localStorage.removeItem("lastUsedPrompt")
    setGeneratedContent("")
    setInputPrompt("")
  }

  // Markdown Rendering
  const renderContent = (content) => {
    if (!content) return ""

    if (markdownMode) {
      // Convert markdown to HTML and sanitize
      const rawHtml = marked(content)
      const sanitizedHtml = DOMPurify.sanitize(rawHtml, {
        USE_PROFILES: { html: true },
        ALLOWED_TAGS: [
          "p",
          "h1",
          "h2",
          "h3",
          "h4",
          "h5",
          "h6",
          "ul",
          "ol",
          "li",
          "strong",
          "em",
          "code",
          "pre",
          "blockquote",
          "a",
        ],
        ALLOWED_ATTR: ["href", "target", "rel"],
      })
      return <div dangerouslySetInnerHTML={{ __html: sanitizedHtml }} />
    }

    return <pre>{content}</pre>
  }

  return (
    <div className="coge-content-generator">
      <div className="coge-content-generator__header">
        <h1 className="coge-content-generator__title">AI Content Studio</h1>
        <p className="coge-content-generator__subtitle">
          Transform your ideas into powerful content with advanced AI assistance
        </p>
      </div>

      <div className="coge-content-generator__controls">
        <div className="coge-content-generator__control-group">
          <label className="coge-content-generator__label">Tone</label>
          <select
            className="coge-content-generator__select"
            value={selectedTone}
            onChange={(e) => setSelectedTone(e.target.value)}
          >
            {toneOptions.map((option) => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>

        <div className="coge-content-generator__control-group">
          <label className="coge-content-generator__label">Length</label>
          <select
            className="coge-content-generator__select"
            value={selectedLength}
            onChange={(e) => setSelectedLength(e.target.value)}
          >
            {lengthOptions.map((option) => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>

        <div className="coge-content-generator__control-group">
          <div className="coge-content-generator__toggle"></div>
        </div>
      </div>

      <div className="coge-content-generator__templates">
        <h3 className="coge-content-generator__templates-title">Quick Templates</h3>
        <div className="coge-content-generator__templates-grid">
          {promptTemplates.map((template, index) => (
            <button
              key={index}
              className="coge-content-generator__template-button"
              onClick={() => handleTemplateSelect(template)}
            >
              {template}
            </button>
          ))}
        </div>
      </div>

      <div className="coge-content-generator__input-section">
        <div className="coge-content-generator__input-header">
          <label className="coge-content-generator__label">Your Prompt</label>
          <div className="coge-content-generator__counts">
            <span>{wordCount} words</span>
            <span>{charCount} characters</span>
          </div>
        </div>

        <textarea
          ref={textareaRef}
          className="coge-content-generator__textarea"
          placeholder="Enter your prompt here... Be specific about your requirements."
          value={inputPrompt}
          onChange={handleInputChange}
          rows={4}
        />

        <button
          className={`coge-content-generator__button ${loading ? "coge-content-generator__button--loading" : ""}`}
          onClick={handleGenerateContent}
          disabled={loading}
        >
          {loading ? (
            <span className="coge-content-generator__loading-text">
              Generating Content...
              <span className="coge-content-generator__loading-dots"></span>
            </span>
          ) : (
            "Generate Content"
          )}
        </button>

        {error && (
          <div className="coge-content-generator__error" role="alert">
            {error}
          </div>
        )}
      </div>

      {generatedContent && (
        <div className="coge-content-generator__output">
          <div className="coge-content-generator__output-header">
            <h2 className="coge-content-generator__output-title">Generated Content</h2>
            <div className="coge-content-generator__output-actions">
              <button
                className={`coge-content-generator__action-button ${
                  copySuccess ? "coge-content-generator__action-button--success" : ""
                }`}
                onClick={handleCopy}
              >
                {copySuccess ? "Copied!" : "Copy"}
              </button>
              <button className="coge-content-generator__action-button" onClick={handleSave}>
                Save as File
              </button>
            </div>
          </div>
          <div className="coge-content-generator__output-content">{renderContent(generatedContent)}</div>
          {saveStatus && <div className="coge-content-generator__save-status">{saveStatus}</div>}
        </div>
      )}

      {contentHistory.length > 0 && (
        <div
          className={`coge-content-generator__history ${isExpanded ? "coge-content-generator__history--expanded" : ""}`}
        >
          <div className="coge-content-generator__history-header">
            <h3 className="coge-content-generator__history-title">Generation History</h3>
            <div className="coge-content-generator__history-actions">
              <button className="coge-content-generator__history-toggle" onClick={() => setIsExpanded(!isExpanded)}>
                {isExpanded ? "Show Less" : "Show More"}
              </button>
              <button className="coge-content-generator__history-clear" onClick={clearHistory}>
                Clear History
              </button>
            </div>
          </div>
          <div className="coge-content-generator__history-list">
            {contentHistory.map((item) => (
              <div key={item.id} className="coge-content-generator__history-item">
                <div className="coge-content-generator__history-item-header">
                  <span className="coge-content-generator__history-item-prompt">{item.prompt.substring(0, 50)}...</span>
                  <span className="coge-content-generator__history-item-date">
                    {new Date(item.timestamp).toLocaleDateString()}
                  </span>
                </div>
                <div className="coge-content-generator__history-item-tags">
                  <span className="coge-content-generator__history-item-tag">{item.tone}</span>
                  <span className="coge-content-generator__history-item-tag">{item.length}</span>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  )
}

export default ContentGeneration



================================================
File: src/pages/ContentRewrite/ContentRewrite.css
================================================
:root {
  /* Color Palette */
  --color-primary: #3b82f6;
  --color-primary-dark: #1d4ed8;
  --color-primary-light: #93c5fd;
  --color-secondary: #8b5cf6;
  --color-background: #ffffff;
  --color-background-soft: #f9fafb;
  --color-text-primary: #374151;
  --color-text-secondary: #6b7280;
  --color-border: #e5e7eb;
  --color-border-hover: #d1d5db;
  --color-shadow: rgba(0, 0, 0, 0.12);
  --color-shadow-elevated: rgba(0, 0, 0, 0.15);
  --color-accent-red: #e53e3e;

  /* Typography */
  --font-base: "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
    "Helvetica Neue", Arial, sans-serif;

  /* Spacing */
  --spacing-xs: 0.5rem;
  --spacing-sm: 1rem;
  --spacing-md: 1.5rem;
  --spacing-lg: 2rem;

  /* Border Radius */
  --radius-sm: 0.375rem;
  --radius-md: 0.5rem;
  --radius-lg: 1rem;

  /* Transitions */
  --transition-speed-fast: 0.2s;
  --transition-speed-medium: 0.3s;
  --transition-timing: ease-in-out;
}

.core-rewrite-container {
  max-width: 1500px;
  width: 95%;
  margin: 0px auto;
  padding: var(--spacing-lg);
  background-color: var(--color-background);
  border-radius: var(--radius-lg);
  box-shadow: 0 15px 35px var(--color-shadow), 0 5px 15px rgba(0, 0, 0, 0.08);
  position: relative;
  overflow: hidden;
  transition: box-shadow var(--transition-speed-medium) var(--transition-timing),
    transform var(--transition-speed-medium) var(--transition-timing);
}

.core-rewrite-container:hover {
  box-shadow: 0 20px 40px var(--color-shadow-elevated),
    0 8px 20px rgba(0, 0, 0, 0.1);
  transform: translateY(0px);
}

.core-rewrite-header {
  text-align: center;
  margin-bottom: var(--spacing-lg);
  position: relative;
  padding-bottom: var(--spacing-sm);
}

.core-rewrite-header::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%);
  width: 80px;
  height: 3px;
  background: linear-gradient(
    90deg,
    var(--color-primary),
    var(--color-secondary)
  );
}

.core-rewrite-title {
  font-size: 3rem;
  font-weight: 800;
  margin-bottom: var(--spacing-sm);
  position: relative;
  z-index: 1;
  letter-spacing: -1px;
}

.core-rewrite-title-gradient {
  background: linear-gradient(
    90deg,
    var(--color-primary),
    var(--color-secondary)
  );
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  color: transparent;
  transition: background var(--transition-speed-medium) var(--transition-timing);
}

.core-rewrite-subtitle {
  color: var(--color-text-secondary);
  font-size: 1.125rem;
  max-width: 700px;
  margin: 0 auto;
  line-height: 1.6;
}

.core-rewrite-main {
  display: grid;
  gap: var(--spacing-lg);
  grid-template-columns: 1fr;
}

.core-input-section {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
}

.core-content-input {
  position: relative;
}

.core-rewrite-input {
  width: 98%;
  min-height: 200px;
  padding: var(--spacing-sm);
  border: 1px solid var(--color-border);
  border-radius: var(--radius-sm);
  resize: vertical;
  font-size: 1rem;
  line-height: 1.5;
  background-color: var(--color-background);
  transition: border-color var(--transition-speed-fast) var(--transition-timing),
    box-shadow var(--transition-speed-fast) var(--transition-timing);
}

.core-word-counter {
  position: absolute;
  bottom: var(--spacing-xs);
  right: var(--spacing-xs);
  color: var(--color-text-secondary);
  font-size: 0.875rem;
  background-color: rgba(255, 255, 255, 0.7);
  padding: 0 var(--spacing-xs);
  border-radius: var(--radius-sm);
}

.core-controls-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: var(--spacing-sm);
}

.core-control-group {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-xs);
}

.core-control-group label {
  font-weight: 500;
  color: var(--color-text-primary);
  margin-bottom: var(--spacing-xs);
}

.core-control-group select,
.core-control-group input {
  padding: var(--spacing-sm);
  border: 1px solid var(--color-border);
  border-radius: var(--radius-sm);
  font-size: 0.875rem;
  background-color: var(--color-background);
  transition: border-color var(--transition-speed-fast) var(--transition-timing),
    box-shadow var(--transition-speed-fast) var(--transition-timing);
}

.core-rewrite-button {
  padding: 1rem 2rem;
  margin-top: 1.5rem;
  width: fit-content;
  margin: 1.5rem auto;
  display: block;
  font-size: 1rem;
  font-weight: bold;
  color: #ffffff;
  background: linear-gradient(135deg, #1e90ff, #0066cc);
  border: none;
  border-radius: 24px;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
  text-transform: uppercase;
  letter-spacing: 1.5px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.core-rewrite-button::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 200%;
  height: 100%;
  background: linear-gradient(
    to right,
    rgba(255, 255, 255, 0.2),
    rgba(255, 255, 255, 0)
  );
  transition: transform 0.4s ease;
  transform: translateX(-100%);
  z-index: 1;
}

.core-rewrite-button:hover {
  background: linear-gradient(135deg, #0066cc, #003366);
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
}

.core-rewrite-button:hover::before {
  transform: translateX(0%);
}

.core-rewrite-button:active {
  transform: translateY(2px);
  background: linear-gradient(135deg, #003366, #002244);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
}

.core-rewrite-button.core-loading {
  cursor: wait;
  background-color: var(--color-primary-light);
  color: transparent;
  position: relative;
}

.core-rewrite-button.core-loading::after {
  content: "";
  position: absolute;
  width: 1.5rem;
  height: 1.5rem;
  border: 3px solid transparent;
  border-top-color: white;
  border-radius: 50%;
  animation: core-spin 1s linear infinite;
}

@keyframes core-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.core-output-section {
  border: 1px solid var(--color-border);
  border-radius: var(--radius-sm);
  padding: var(--spacing-md);
  background-color: var(--color-background-soft);
  position: relative;
}

.core-result-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-sm);
  padding-bottom: var(--spacing-xs);
  border-bottom: 1px solid var(--color-border);
}

.core-copy-button {
  padding: var(--spacing-xs) var(--spacing-sm);
  background-color: var(--color-background);
  border: 1px solid var(--color-border);
  border-radius: var(--radius-sm);
  color: var(--color-text-primary);
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: var(--spacing-xs);
  transition: background-color var(--transition-speed-fast)
      var(--transition-timing),
    border-color var(--transition-speed-fast) var(--transition-timing);
}

.core-copy-button:hover {
  background-color: var(--color-border);
  border-color: var(--color-border-hover);
}

.core-rewrite-output {
  width: 97%;
  min-height: 250px;
  padding: var(--spacing-sm);
  border: 1px solid var(--color-border);
  border-radius: var(--radius-sm);
  resize: vertical;
  font-size: 1rem;
  line-height: 1.5;
  margin-bottom: var(--spacing-md);
  background-color: var(--color-background);
}

.core-ai-suggestions {
  background-color: var(--color-background);
  padding: var(--spacing-sm);
  border-radius: var(--radius-sm);
  border: 1px solid var(--color-border);
  transition: box-shadow var(--transition-speed-medium) var(--transition-timing),
    transform var(--transition-speed-fast) var(--transition-timing);
}

.core-ai-suggestions:hover {
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
    0 2px 4px -1px rgba(0, 0, 0, 0.06);
  transform: translateY(-2px);
}

.core-ai-suggestions h3 {
  margin-bottom: var(--spacing-xs);
  color: var(--color-text-primary);
  font-size: 1.125rem;
}

.core-ai-suggestions ul {
  list-style-type: none;
  padding: 0;
  margin: 0;
}

.core-ai-suggestions li {
  padding: var(--spacing-xs) 0;
  color: var(--color-text-secondary);
  font-size: 0.875rem;
  transition: color var(--transition-speed-fast) var(--transition-timing),
    padding var(--transition-speed-fast) var(--transition-timing),
    background-color var(--transition-speed-fast) var(--transition-timing);
}

.core-ai-suggestions li:hover {
  color: var(--color-text-primary);
  padding-left: var(--spacing-xs);
  background-color: var(--color-background-soft);
}

.core-ai-suggestions li:not(:last-child) {
  border-bottom: 1px solid var(--color-border);
}

.core-history-section {
  margin-top: var(--spacing-lg);
  padding-top: var(--spacing-lg);
  border-top: 1px solid var(--color-border);
}

.core-history-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-sm);
}

.core-history-controls {
  display: flex;
  gap: var(--spacing-xs);
}

.core-history-control-btn {
  padding: var(--spacing-xs) var(--spacing-sm);
  border: 1px solid var(--color-border);
  border-radius: var(--radius-sm);
  background-color: var(--color-background);
  color: var(--color-text-secondary);
  font-size: 0.875rem;
  cursor: pointer;
  transition: background-color var(--transition-speed-fast)
      var(--transition-timing),
    border-color var(--transition-speed-fast) var(--transition-timing),
    color var(--transition-speed-fast) var(--transition-timing);
}

.core-history-control-btn:hover {
  background-color: var(--color-background-soft);
  border-color: var(--color-border-hover);
  color: var(--color-text-primary);
}

.core-clear-btn {
  color: var(--color-accent-red);
  border-color: var(--color-accent-red);
}

.core-clear-btn:hover {
  background-color: rgba(229, 62, 62, 0.05);
  border-color: var(--color-accent-red);
}

.core-history-list {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-sm);
  transition: all var(--transition-speed-medium) var(--transition-timing);
}

.core-history-item {
  padding: var(--spacing-sm);
  border: 1px solid var(--color-border);
  border-radius: var(--radius-sm);
  background-color: var(--color-background);
  animation: core-fadeIn var(--transition-speed-medium) ease-in-out;
  position: relative;
  overflow: hidden;
}

.core-history-timestamp {
  font-size: 0.875rem;
  color: var(--color-text-secondary);
  margin-bottom: var(--spacing-xs);
}

.core-history-text {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
}

.core-history-original,
.core-history-rewritten {
  flex: 1;
  font-size: 0.875rem;
  color: var(--color-text-primary);
  line-height: 1.4;
}

.core-history-arrow {
  color: var(--color-text-secondary);
  font-size: 1.25rem;
}

@keyframes core-slideIn {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes core-fadeOut {
  from {
    transform: translateX(0);
    opacity: 1;
  }
  to {
    transform: translateX(100%);
    opacity: 0;
  }
}

@keyframes core-fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@media (max-width: 768px) {
  .core-rewrite-container {
    padding: var(--spacing-sm);
    width: 98%;
  }

  .core-rewrite-title {
    font-size: 2.5rem;
  }

  .core-controls-grid {
    grid-template-columns: 1fr;
  }

  .core-history-text {
    flex-direction: column;
    gap: var(--spacing-xs);
  }

  .core-history-arrow {
    transform: rotate(90deg);
  }

  .core-history-header {
    flex-direction: column;
    gap: var(--spacing-sm);
  }

  .core-history-controls {
    width: 100%;
    justify-content: space-between;
  }

  .core-history-control-btn {
    flex: 1;
    text-align: center;
  }
}

.core-rewrite-input:focus,
.core-rewrite-output:focus,
.core-control-group select:focus,
.core-control-group input:focus {
  outline: none;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.25);
  border-color: var(--color-primary);
  transition: border-color var(--transition-speed-fast) var(--transition-timing),
    box-shadow var(--transition-speed-fast) var(--transition-timing);
}

.core-rewrite-input:hover,
.core-rewrite-output:hover,
.core-control-group select:hover,
.core-control-group input:hover {
  border-color: var(--color-border-hover);
  transition: border-color var(--transition-speed-fast) var(--transition-timing);
}

.core-rewrite-button:disabled {
  background-color: var(--color-border);
  cursor: not-allowed;
  opacity: 0.7;
  transform: none;
  box-shadow: none;
}

::selection {
  background-color: rgba(59, 130, 246, 0.2);
  color: var(--color-primary-dark);
}

::-webkit-scrollbar {
  width: 10px;
  height: 10px;
}

::-webkit-scrollbar-track {
  background: var(--color-background-soft);
  border-radius: 5px;
}

::-webkit-scrollbar-thumb {
  background: var(--color-border-hover);
  border-radius: 5px;
  transition: background var(--transition-speed-fast) var(--transition-timing);
}

::-webkit-scrollbar-thumb:hover {
  background: var(--color-text-secondary);
}



================================================
File: src/pages/ContentRewrite/ContentRewrite.jsx
================================================
"use client"

import { useState, useEffect } from "react"
import DOMPurify from "dompurify"
import { marked } from "marked"
import "./ContentRewrite.css"

const ContentRewrite = () => {
  // Load initial state from localStorage or use default values
  const [inputContent, setInputContent] = useState(() => localStorage.getItem("lastInputContent") || "")
  const [rewrittenContent, setRewrittenContent] = useState(() => localStorage.getItem("lastRewrittenContent") || "")
  const [rewrittenMarkdown, setRewrittenMarkdown] = useState(() => localStorage.getItem("lastRewrittenMarkdown") || "")
  const [tone, setTone] = useState(() => localStorage.getItem("lastTone") || "neutral")
  const [loading, setLoading] = useState(false)
  const [wordLimit, setWordLimit] = useState(() => localStorage.getItem("lastWordLimit") || "")
  const [keywords, setKeywords] = useState(() => localStorage.getItem("lastKeywords") || "")
  const [language, setLanguage] = useState(() => localStorage.getItem("lastLanguage") || "english")
  const [complexity, setComplexity] = useState(() => localStorage.getItem("lastComplexity") || "medium")
  const [aiSuggestions, setAiSuggestions] = useState([])
  const [wordCount, setWordCount] = useState(0)

  // Load history from localStorage
  const [saveHistory, setSaveHistory] = useState(() => {
    const savedHistory = localStorage.getItem("rewriteHistory")
    return savedHistory ? JSON.parse(savedHistory) : []
  })

  const [showAllHistory, setShowAllHistory] = useState(false)
  const [displayMode, setDisplayMode] = useState(() => localStorage.getItem("lastDisplayMode") || "text")

  const PERPLEXITY_API_KEY = "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"

  const tones = ["Neutral", "Formal", "Casual", "Persuasive", "Creative", "Professional", "Friendly", "Academic"]
  const languages = ["English", "Spanish", "French", "German", "Italian", "Portuguese"]
  const complexityLevels = ["Simple", "Medium", "Advanced", "Technical", "Academic"]

  // Update localStorage whenever state changes
  useEffect(() => {
    localStorage.setItem("lastInputContent", inputContent)
  }, [inputContent])

  useEffect(() => {
    localStorage.setItem("lastRewrittenContent", rewrittenContent)
  }, [rewrittenContent])

  useEffect(() => {
    localStorage.setItem("lastRewrittenMarkdown", rewrittenMarkdown)
  }, [rewrittenMarkdown])

  useEffect(() => {
    localStorage.setItem("lastTone", tone)
  }, [tone])

  useEffect(() => {
    localStorage.setItem("lastWordLimit", wordLimit)
  }, [wordLimit])

  useEffect(() => {
    localStorage.setItem("lastKeywords", keywords)
  }, [keywords])

  useEffect(() => {
    localStorage.setItem("lastLanguage", language)
  }, [language])

  useEffect(() => {
    localStorage.setItem("lastComplexity", complexity)
  }, [complexity])

  useEffect(() => {
    localStorage.setItem("lastDisplayMode", displayMode)
  }, [displayMode])

  // Update localStorage when history changes
  useEffect(() => {
    localStorage.setItem("rewriteHistory", JSON.stringify(saveHistory))
  }, [saveHistory])

  // Word count calculation
  useEffect(() => {
    const words = inputContent
      .trim()
      .split(/\s+/)
      .filter((word) => word.length > 0)
    setWordCount(words.length)
  }, [inputContent])

  const generateAiSuggestions = () => {
    const suggestions = [
      "Consider using more active voice",
      "Add statistical data for credibility",
      "Include industry-specific terminology",
      "Strengthen your call-to-action",
      "Add relevant examples",
    ]
    setAiSuggestions(suggestions)
  }

  const constructPrompt = () => {
    let prompt = `Rewrite the following content in a ${tone} tone with ${complexity} complexity level in ${language} language.`

    if (wordLimit) {
      prompt += ` The response should be approximately ${wordLimit} words.`
    }

    if (keywords) {
      prompt += ` Please incorporate these keywords naturally: ${keywords}.`
    }

    prompt += `\n\nOriginal content:\n${inputContent}`
    return prompt
  }

  const handleRewrite = async () => {
    if (!inputContent.trim()) {
      showNotification("Please provide content to rewrite.")
      return
    }

    setLoading(true)
    try {
      const prompt = constructPrompt()
      const response = await fetch("https://api.perplexity.ai/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${PERPLEXITY_API_KEY}`,
        },
        body: JSON.stringify({
          model: "sonar",
          messages: [
            {
              role: "system",
              content:
                "You are an expert content writer that specializes in rewriting content while maintaining the original meaning but improving the style, clarity, and engagement.",
            },
            {
              role: "user",
              content: prompt,
            },
          ],
          temperature: 0.7,
          max_tokens: 1000,
        }),
      })

      const data = await response.json()
      let rewrittenText = ""

      if (data.choices && data.choices[0].message.content) {
        rewrittenText = data.choices[0].message.content
      } else {
        throw new Error("Invalid response from API")
      }

      const sanitizedText = DOMPurify.sanitize(rewrittenText)
      const markdownText = marked(sanitizedText)

      setRewrittenContent(rewrittenText)
      setRewrittenMarkdown(markdownText)
      generateAiSuggestions()

      // Add to history
      const newHistoryItem = {
        original: inputContent,
        rewritten: rewrittenText,
        timestamp: new Date().toLocaleString(),
        tone,
        language,
        complexity,
        wordLimit,
        keywords,
      }

      const updatedHistory = [...saveHistory, newHistoryItem]

      // Limit history to last 20 items
      const limitedHistory = updatedHistory.slice(-20)

      setSaveHistory(limitedHistory)
    } catch (error) {
      console.error("Error rewriting content:", error)
      showNotification("Something went wrong! Please try again.", "error")
    }
    setLoading(false)
  }

  const showNotification = (message, type = "info") => {
    const notification = document.createElement("div")
    notification.className = `core-notification core-notification-${type}`
    notification.textContent = message
    document.body.appendChild(notification)

    setTimeout(() => {
      notification.classList.add("core-fade-out")
      setTimeout(() => document.body.removeChild(notification), 500)
    }, 3000)
  }

  const handleCopy = () => {
    navigator.clipboard.writeText(rewrittenContent)
    showNotification("Content copied to clipboard!")
  }

  const handleClearHistory = () => {
    setSaveHistory([])
    localStorage.removeItem("rewriteHistory")
    showNotification("History cleared successfully!")
  }

  const renderHistorySection = () => {
    if (saveHistory.length === 0) return null

    const displayedHistory = showAllHistory
      ? saveHistory
          .slice()
          .reverse() // Show most recent first
      : saveHistory.slice(-3).reverse()

    return (
      <div className="core-history-section">
        <div className="core-history-header">
          <h3>Recent Rewrites</h3>
          <div className="core-history-controls">
            <button className="core-history-control-btn" onClick={() => setShowAllHistory(!showAllHistory)}>
              {showAllHistory ? "Show Less" : "Show More"}
            </button>
            <button className="core-history-control-btn core-clear-btn" onClick={handleClearHistory}>
              Clear History
            </button>
          </div>
        </div>
        <div className="core-history-list">
          {displayedHistory.map((item, index) => (
            <div key={index} className="core-history-item">
              <div className="core-history-timestamp">{item.timestamp}</div>
              <div className="core-history-text">
                <div className="core-history-original">{item.original.substring(0, 100)}...</div>
                <div className="core-history-arrow">â†’</div>
                <div className="core-history-rewritten">{item.rewritten.substring(0, 100)}...</div>
              </div>
              <div className="core-history-details">
                <span>Tone: {item.tone}</span>
                <span>Language: {item.language}</span>
                <span>Complexity: {item.complexity}</span>
              </div>
            </div>
          ))}
        </div>
      </div>
    )
  }

  return (
    <div className="core-rewrite-container">
      <div className="core-rewrite-header">
        <h1 className="core-rewrite-title">
          <span className="core-rewrite-title-gradient">Advanced AI</span> Content Rewriter
        </h1>
        <p className="core-rewrite-subtitle">Transform your content with advanced AI-powered writing assistance</p>
      </div>

      <div className="core-rewrite-main">
        <div className="core-input-section">
          <div className="core-content-input">
            <textarea
              className="core-rewrite-input"
              placeholder="Enter your content here..."
              value={inputContent}
              onChange={(e) => setInputContent(e.target.value)}
            ></textarea>
            <div className="core-word-counter">Words: {wordCount}</div>
          </div>

          <div className="core-controls-grid">
            <div className="core-control-group">
              <label>Tone:</label>
              <select value={tone} onChange={(e) => setTone(e.target.value)}>
                {tones.map((t) => (
                  <option key={t.toLowerCase()} value={t.toLowerCase()}>
                    {t}
                  </option>
                ))}
              </select>
            </div>

            <div className="core-control-group">
              <label>Language:</label>
              <select value={language} onChange={(e) => setLanguage(e.target.value)}>
                {languages.map((lang) => (
                  <option key={lang.toLowerCase()} value={lang.toLowerCase()}>
                    {lang}
                  </option>
                ))}
              </select>
            </div>

            <div className="core-control-group">
              <label>Complexity:</label>
              <select value={complexity} onChange={(e) => setComplexity(e.target.value)}>
                {complexityLevels.map((level) => (
                  <option key={level.toLowerCase()} value={level.toLowerCase()}>
                    {level}
                  </option>
                ))}
              </select>
            </div>

            <div className="core-control-group">
              <label>Word Limit:</label>
              <input
                type="number"
                value={wordLimit}
                onChange={(e) => setWordLimit(e.target.value)}
                placeholder="Optional"
              />
            </div>

            <div className="core-control-group">
              <label>Keywords:</label>
              <input
                type="text"
                value={keywords}
                onChange={(e) => setKeywords(e.target.value)}
                placeholder="Separate with commas"
              />
            </div>

            {rewrittenContent && (
              <div className="core-control-group">
                <label>Display Mode:</label>
                <select value={displayMode} onChange={(e) => setDisplayMode(e.target.value)}>
                  <option value="text">Plain Text</option>
                  <option value="markdown">Markdown</option>
                </select>
              </div>
            )}
          </div>

          <button
            className={`core-rewrite-button ${loading ? "core-loading" : ""}`}
            onClick={handleRewrite}
            disabled={loading}
          >
            {loading ? "Processing..." : "Rewrite Content"}
          </button>
        </div>

        {rewrittenContent && (
          <div className="core-output-section">
            <div className="core-result-header">
              <h2>Enhanced Content</h2>
              <button className="core-copy-button" onClick={handleCopy}>
                Copy to Clipboard
              </button>
            </div>
            {displayMode === "text" ? (
              <textarea className="core-rewrite-output" readOnly value={rewrittenContent}></textarea>
            ) : (
              <div
                className="core-rewrite-output core-markdown-content"
                dangerouslySetInnerHTML={{ __html: rewrittenMarkdown }}
              />
            )}

            <div className="core-ai-suggestions">
              <h3>AI Writing Suggestions</h3>
              <ul>
                {aiSuggestions.map((suggestion, index) => (
                  <li key={index}>{suggestion}</li>
                ))}
              </ul>
            </div>
          </div>
        )}
      </div>

      {renderHistorySection()}
    </div>
  )
}

export default ContentRewrite



================================================
File: src/pages/ContextualLearning/ContextualLearning.css
================================================
.learn-explorer-container {
  min-height: 60vh;
  background: linear-gradient(135deg, #f8faff 0%, #f0f4ff 100%);
  color: #2d3748;
  font-family: "Inter", system-ui, -apple-system, sans-serif;
  display: flex;
  justify-content: center;
  padding: 2rem;
  border-radius: 25px;
}

.learn-explorer-content {
  width: 100%;
  max-width: 1200px;
}

.learn-explorer-header {
  text-align: center;
  margin-bottom: 3rem;
}

.learn-explorer-header h1 {
  font-size: 2.5rem;
  background: linear-gradient(90deg, #2563eb, #3b82f6);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  margin: 1rem 0 0.5rem;
}

.learn-subtitle {
  color: #64748b;
  font-size: 1.1rem;
}

.learn-logo-container {
  display: flex;
  justify-content: center;
  margin-bottom: 1rem;
}

.learn-neural-network {
  display: flex;
  gap: 2rem;
}

.learn-neural-layer {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.learn-neuron {
  width: 12px;
  height: 12px;
  background: #3b82f6;
  border-radius: 50%;
  position: relative;
}

.learn-pulse {
  position: absolute;
  width: 100%;
  height: 100%;
  background: rgba(59, 130, 246, 0.3);
  border-radius: 50%;
  animation: learnPulse 2s infinite;
}

@keyframes learnPulse {
  0% {
    transform: scale(1);
    opacity: 0.8;
  }
  50% {
    transform: scale(2);
    opacity: 0;
  }
  100% {
    transform: scale(1);
    opacity: 0;
  }
}

.learn-search-section {
  margin-bottom: 3rem;
  padding: 1rem;
}

.learn-search-form {
  max-width: 700px;
  margin: 0 auto;
}

.learn-search-input-container {
  display: flex;
  align-items: center;
  gap: 1rem;
  background: #ffffff;
  padding: 0.6rem 1rem;
  border-radius: 50px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.06);
  border: 1px solid rgba(59, 130, 246, 0.2);
  transition: box-shadow 0.3s ease, transform 0.3s ease;
}

.learn-search-input-container:hover {
  transform: translateY(-2px);
}

.learn-search-input-container:focus-within {
  box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.4);
}

.learn-search-input {
  flex: 1;
  background: transparent;
  border: none;
  padding: 0.8rem 1rem;
  color: #1e293b;
  font-size: 1rem;
  outline: none;
}

.learn-search-input::placeholder {
  color: #94a3b8;
  font-style: italic;
}

.learn-search-button {
  background: linear-gradient(135deg, #2563eb, #3b82f6);
  border: none;
  border-radius: 50%;
  width: 44px;
  height: 44px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: transform 0.2s ease, box-shadow 0.3s ease;
}

.learn-search-button:hover {
  transform: scale(1.1);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.learn-search-icon {
  width: 20px;
  height: 20px;
  fill: #ffffff;
}

/* Accessibility Enhancements */
.learn-search-button:focus-visible {
  outline: 3px solid rgba(59, 130, 246, 0.6);
  outline-offset: 2px;
}

.learn-search-history {
  margin-top: 1rem;
  text-align: center;
}

.learn-search-history p {
  color: #64748b;
  margin-bottom: 0.5rem;
}

.learn-history-tags {
  display: flex;
  gap: 0.5rem;
  justify-content: center;
  flex-wrap: wrap;
}

.learn-history-tag {
  background: #ffffff;
  border: 1px solid #e2e8f0;
  padding: 0.5rem 1rem;
  border-radius: 20px;
  font-size: 0.875rem;
  color: #2563eb;
  cursor: pointer;
  transition: all 0.2s ease;
}

.learn-history-tag:hover {
  background: #f8faff;
  border-color: #2563eb;
}

.learn-loading-spinner {
  width: 24px;
  height: 24px;
  border: 3px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: #ffffff;
  animation: learnSpin 1s linear infinite;
}

@keyframes learnSpin {
  100% {
    transform: rotate(360deg);
  }
}

.learn-loading-container {
  text-align: center;
  padding: 3rem;
  color: #64748b;
}

.learn-processing-animation {
  display: flex;
  justify-content: center;
  gap: 0.5rem;
  margin-bottom: 1rem;
}

.learn-processing-circle {
  width: 12px;
  height: 12px;
  background: #3b82f6;
  border-radius: 50%;
  animation: learnProcessingPulse 1.5s infinite ease-in-out;
}

.learn-processing-circle:nth-child(2) {
  animation-delay: 0.2s;
}

.learn-processing-circle:nth-child(3) {
  animation-delay: 0.4s;
}

@keyframes learnProcessingPulse {
  0%,
  100% {
    transform: scale(0.5);
    opacity: 0.5;
  }
  50% {
    transform: scale(1);
    opacity: 1;
  }
}

.learn-empty-state {
  text-align: center;
  padding: 3rem;
  color: #64748b;
}

.learn-empty-illustration {
  margin-bottom: 1rem;
  position: relative;
  height: 60px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.learn-brain-wave {
  position: absolute;
  width: 100px;
  height: 2px;
  background: linear-gradient(90deg, transparent, #3b82f6, transparent);
  animation: learnWave 2s infinite;
}

.learn-brain-wave:nth-child(2) {
  animation-delay: 0.2s;
}

.learn-brain-wave:nth-child(3) {
  animation-delay: 0.4s;
}

@keyframes learnWave {
  0% {
    transform: scaleX(0.1);
    opacity: 0;
  }
  50% {
    transform: scaleX(1);
    opacity: 1;
  }
  100% {
    transform: scaleX(0.1);
    opacity: 0;
  }
}

.learn-results-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(600px, 1fr));
  gap: 2rem;
  padding: 1rem;
}

.learn-result-card {
  background: #ffffff;
  border-radius: 16px;
  padding: 1.5rem;
  border: 1px solid rgba(226, 232, 240, 0.8);
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
    0 2px 4px -1px rgba(0, 0, 0, 0.06);
  transition: transform 0.3s, box-shadow 0.3s;
  animation: learnFadeIn 0.5s ease-out forwards;
  opacity: 0;
}

.learn-result-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1),
    0 10px 10px -5px rgba(0, 0, 0, 0.04);
}

.learn-card-header {
  display: flex;
  align-items: center;
  gap: 1rem;
  margin-bottom: 1rem;
}

.learn-insight-number {
  background: linear-gradient(90deg, #2563eb, #3b82f6);
  width: 180px;
  height: 30px;
  border-radius: 25px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  color: #ffffff;
}

.learn-card-header h2 {
  margin: 0;
  font-size: 1.25rem;
  color: #1e293b;
  font-weight: 600;
}

.learn-card-content {
  color: #475569;
  line-height: 1.6;
  margin-bottom: 1.5rem;
}

.learn-card-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.learn-insight-tag {
  background: rgba(59, 130, 246, 0.1);
  color: #2563eb;
  padding: 0.5rem 1rem;
  border-radius: 20px;
  font-size: 0.875rem;
  font-weight: 500;
}

.learn-timestamp {
  color: #94a3b8;
  font-size: 0.875rem;
}

@keyframes learnFadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.learn-error-message {
  text-align: center;
  color: #dc2626;
  margin-top: 1rem;
  padding: 0.75rem;
  background: rgba(220, 38, 38, 0.1);
  border-radius: 8px;
  font-size: 0.875rem;
}

/* Responsive Design */
@media (max-width: 768px) {
  .learn-explorer-container {
    padding: 1rem;
  }

  .learn-explorer-header h1 {
    font-size: 2rem;
  }

  .learn-results-grid {
    grid-template-columns: 1fr;
    gap: 1rem;
  }

  .learn-search-input-container {
    flex-direction: column;
    padding: 1rem;
  }

  .learn-search-button {
    width: 100%;
  }

  .learn-history-tags {
    padding: 0 1rem;
  }

  .learn-result-card {
    margin: 0 0.5rem;
  }
}

@media (max-width: 480px) {
  .learn-explorer-header h1 {
    font-size: 1.75rem;
  }

  .learn-subtitle {
    font-size: 1rem;
  }

  .learn-card-header h2 {
    font-size: 1.1rem;
  }

  .learn-search-input {
    font-size: 1rem;
    padding: 0.75rem;
  }
}

/* Focus States */
.learn-search-input:focus {
  outline: none;
}

.learn-search-button:focus {
  outline: none;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
}

.learn-history-tag:focus {
  outline: none;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
}

/* Accessibility */
@media (prefers-reduced-motion: reduce) {
  .learn-result-card,
  .learn-search-button,
  .learn-pulse,
  .learn-processing-circle,
  .learn-brain-wave {
    animation: none;
    transition: none;
  }
}



================================================
File: src/pages/ContextualLearning/ContextualLearning.jsx
================================================
"use client"

import { useState, useCallback, useEffect } from "react"
import DOMPurify from "dompurify"
import { marked } from "marked"
import "./ContextualLearning.css"

const API_KEY = "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"

// Configure marked options for better parsing
marked.setOptions({
  gfm: true,
  breaks: true,
  smartLists: true,
  headerIds: false,
  mangle: false,
})

const AIExplorer = () => {
  const [query, setQuery] = useState("")
  const [results, setResults] = useState([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)
  const [searchHistory, setSearchHistory] = useState([])
  const [cachedResults, setCachedResults] = useState({})

  useEffect(() => {
    const cached = localStorage.getItem("aiExplorerCache")
    if (cached) {
      setCachedResults(JSON.parse(cached))
    }
  }, [])

  const debouncedSetQuery = useCallback((value) => {
    setQuery(value)
    setError(null)
  }, [])

  const handleInputChange = (e) => {
    debouncedSetQuery(e.target.value)
  }

  const generatePrompt = useCallback((topic) => {
    return `Analyze ${topic} using Perplexity Sonar AI and provide 3 key insights. For each insight include:
    1. A concise title (max 8 words)
    2. A detailed explanation (2-3 sentences)
    3. Focus on current trends and future implications
    
    Format your response clearly without using markdown symbols like * or #. Avoid using bullet points.`
  }, [])

  const sanitizeAndParseMarkdown = (text) => {
    const cleanedText = text
      .replace(/\*\*/g, "") // Remove bold markers
      .replace(/\*/g, "") // Remove italic markers
      .replace(/^#+\s*/gm, "") // Remove header markers
      .trim()

    const rawHTML = marked(cleanedText)
    return DOMPurify.sanitize(rawHTML)
  }

  const fetchResults = async () => {
    if (!query.trim()) {
      setError("Please enter a topic to explore")
      return
    }

    setLoading(true)
    setError(null)

    try {
      if (cachedResults[query.toLowerCase()]) {
        setResults(cachedResults[query.toLowerCase()])
        setLoading(false)
        return
      }

      const prompt = generatePrompt(query)

      const response = await fetch("https://api.perplexity.ai/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${API_KEY}`,
        },
        body: JSON.stringify({
          model: "sonar",
          messages: [
            {
              role: "system",
              content: "You are an expert analyst that provides clear, concise insights on any topic.",
            },
            {
              role: "user",
              content: prompt,
            },
          ],
          temperature: 0.7,
          max_tokens: 500,
        }),
      })

      if (!response.ok) {
        throw new Error(`API request failed with status ${response.status}`)
      }

      const data = await response.json()
      const text = data.choices[0].message.content

      const parsedResults = text
        .split("\n")
        .filter((line) => line.trim() !== "")
        .reduce((acc, line) => {
          if (/^[A-Z]/.test(line.trim())) {
            acc.push({
              title: line.trim(),
              summary: "",
              timestamp: new Date().toISOString(),
            })
          } else if (acc.length > 0) {
            acc[acc.length - 1].summary += (acc[acc.length - 1].summary ? " " : "") + line.trim()
          }
          return acc
        }, [])
        .map((result) => ({
          ...result,
          title: sanitizeAndParseMarkdown(result.title),
          summary: sanitizeAndParseMarkdown(result.summary),
        }))
        .filter((result) => result.title && result.summary)

      const updatedCache = {
        ...cachedResults,
        [query.toLowerCase()]: parsedResults,
      }
      setCachedResults(updatedCache)
      localStorage.setItem("aiExplorerCache", JSON.stringify(updatedCache))

      setResults(parsedResults)
      setSearchHistory((prev) => [...new Set([query, ...prev])].slice(0, 5))
    } catch (err) {
      console.error("API Error:", err)
      setError("Failed to fetch insights from Perplexity Sonar AI.")
    } finally {
      setLoading(false)
    }
  }

  const handleSearch = (e) => {
    e.preventDefault()
    fetchResults()
  }

  return (
    <div className="learn-explorer-container">
      <div className="learn-explorer-content">
        <header className="learn-explorer-header">
          <div className="learn-logo-container">
            <div className="learn-neural-network">
              {[...Array(3)].map((_, i) => (
                <div key={i} className="learn-neural-layer">
                  {[...Array(3)].map((_, j) => (
                    <div key={j} className="learn-neuron">
                      <div className="learn-pulse"></div>
                    </div>
                  ))}
                </div>
              ))}
            </div>
          </div>
          <h1>Sonar Insight Explorer</h1>
          <p className="learn-subtitle">Powered by Perplexity Sonar AI</p>
        </header>

        <section className="learn-search-section">
          <form onSubmit={handleSearch} className="learn-search-form">
            <div className="learn-search-input-container">
              <input
                type="text"
                className="learn-search-input"
                placeholder="Explore any topic with Perplexity Sonar..."
                value={query}
                onChange={handleInputChange}
                autoComplete="off"
              />
              <button type="submit" className="learn-search-button" disabled={loading}>
                {loading ? (
                  <div className="learn-loading-spinner" />
                ) : (
                  <svg className="learn-search-icon" viewBox="0 0 24 24">
                    <path d="M21.71 20.29L18 16.61A9 9 0 1 0 16.61 18l3.68 3.68a1 1 0 0 0 1.42 0 1 1 0 0 0 0-1.39zM11 18a7 7 0 1 1 7-7 7 7 0 0 1-7 7z" />
                  </svg>
                )}
              </button>
            </div>
          </form>
          {error && <div className="learn-error-message">{error}</div>}

          {searchHistory.length > 0 && (
            <div className="learn-search-history">
              <p>Recent topics:</p>
              <div className="learn-history-tags">
                {searchHistory.map((item, index) => (
                  <button
                    key={index}
                    className="learn-history-tag"
                    onClick={() => {
                      setQuery(item)
                      fetchResults()
                    }}
                  >
                    {item}
                  </button>
                ))}
              </div>
            </div>
          )}
        </section>

        <section className="learn-results-section">
          {loading && (
            <div className="learn-loading-container">
              <div className="learn-processing-animation">
                <div className="learn-processing-circle"></div>
                <div className="learn-processing-circle"></div>
                <div className="learn-processing-circle"></div>
              </div>
              <p>Perplexity Sonar analyzing your query...</p>
            </div>
          )}

          {!loading && results.length === 0 && !error && (
            <div className="learn-empty-state">
              <div className="learn-empty-illustration">
                <div className="learn-brain-wave"></div>
                <div className="learn-brain-wave"></div>
                <div className="learn-brain-wave"></div>
              </div>
              <p>Enter a topic to explore with Perplexity Sonar AI</p>
            </div>
          )}

          <div className="learn-results-grid">
            {!loading &&
              results.map((result, index) => (
                <div
                  key={index}
                  className="learn-result-card"
                  style={{
                    animationDelay: `${index * 0.1}s`,
                  }}
                >
                  <div className="learn-card-header">
                    <div className="learn-insight-number">{index + 1}</div>
                    <h2 dangerouslySetInnerHTML={{ __html: result.title }}></h2>
                  </div>
                  <div className="learn-card-content">
                    <div dangerouslySetInnerHTML={{ __html: result.summary }}></div>
                  </div>
                  <div className="learn-card-footer">
                    <div className="learn-insight-tag">Sonar Analysis</div>
                    {result.timestamp && (
                      <div className="learn-timestamp">{new Date(result.timestamp).toLocaleDateString()}</div>
                    )}
                  </div>
                </div>
              ))}
          </div>
        </section>
      </div>
    </div>
  )
}

export default AIExplorer



================================================
File: src/pages/Dashboard/Dashboard.css
================================================
.dashboard {
  max-width: 1480px;
  margin: 0 auto;
  padding: 40px;
  font-family: "Inter", "Segoe UI", system-ui, sans-serif;
  background-color: #f8fafc;
  color: #1a1a1a;
  line-height: 1.6;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  border-radius: 25px;
}

.dashboard.dark {
  background-color: #0f172a;
  color: #f1f5f9;
}

.dashboard-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 32px;
  gap: 24px;
}

.header-content h1 {
  font-size: clamp(24px, 5vw, 32px);
  font-weight: 800;
  margin: 0;
  color: #0f172a;
  letter-spacing: -0.03em;
  line-height: 1.2;
}

.dashboard.dark .header-content h1 {
  color: #f1f5f9;
}

.header-content p {
  font-size: clamp(14px, 2vw, 16px);
  color: #475569;
  margin: 8px 0 0;
  line-height: 1.5;
}

.header-actions {
  display: flex;
  gap: 12px;
}

.action-button,
.theme-switcher {
  padding: 12px 20px;
  border-radius: 10px;
  font-weight: 600;
  font-size: 14px;
  border: none;
  cursor: pointer;
  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  user-select: none;
}

.action-button {
  background-color: #2563eb;
  color: white;
  box-shadow: 0 2px 4px rgba(37, 99, 235, 0.15);
}

.action-button:hover {
  background-color: #1d4ed8;
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(37, 99, 235, 0.25);
}

.theme-switcher {
  background-color: #1e293b;
  color: white;
  box-shadow: 0 2px 4px rgba(30, 41, 59, 0.15);
}

.theme-switcher:hover {
  background-color: #0f172a;
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(30, 41, 59, 0.25);
}

.dashboard-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 24px;
  margin-bottom: 32px;
}

.widget {
  background-color: white;
  border-radius: 16px;
  padding: 24px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.02), 0 1px 3px rgba(0, 0, 0, 0.05);
  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1),
    box-shadow 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  display: flex;
  flex-direction: column;
  gap: 16px;
  position: relative;
  overflow: hidden;
}

.widget::before {
  content: "";
  position: absolute;
  inset: 0;
  border-radius: 16px;
  pointer-events: none;
  transition: opacity 0.3s ease;
  opacity: 0;
  background: linear-gradient(
    180deg,
    rgba(255, 255, 255, 0) 0%,
    rgba(255, 255, 255, 0.03) 100%
  );
}

.widget:hover {
  transform: translateY(0px);
  /* box-shadow: 0 12px 24px rgba(0, 0, 0, 0.08); */
}

.widget:hover::before {
  opacity: 1;
}

.dashboard.dark .widget {
  background-color: #1e293b;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.widget h3 {
  font-size: 16px;
  font-weight: 600;
  margin: 0;
  color: #334155;
  letter-spacing: -0.01em;
}

.dashboard.dark .widget h3 {
  color: #e2e8f0;
}

.widget-value {
  font-size: clamp(24px, 4vw, 32px);
  font-weight: 700;
  margin: 0;
  color: #0f172a;
  line-height: 1.2;
}

.dashboard.dark .widget-value {
  color: #f8fafc;
}

.widget-change {
  font-size: 14px;
  font-weight: 600;
  display: flex;
  align-items: center;
  gap: 6px;
}

.widget-change.positive {
  color: #059669;
}

.widget-change.negative {
  color: #dc2626;
}

.chart-container {
  background-color: white;
  border-radius: 16px;
  padding: 24px;
  margin-bottom: 32px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.02), 0 1px 3px rgba(0, 0, 0, 0.05);
}

.dashboard.dark .chart-container {
  background-color: #1e293b;
}

.chart-container h2 {
  font-size: 20px;
  font-weight: 700;
  margin: 0 0 20px;
  color: #0f172a;
  letter-spacing: -0.01em;
}

.dashboard.dark .chart-container h2 {
  color: #f1f5f9;
}

.recent-activity {
  background-color: white;
  border-radius: 16px;
  padding: 24px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.02), 0 1px 3px rgba(0, 0, 0, 0.05);
}

.dashboard.dark .recent-activity {
  background-color: #1e293b;
}

.recent-activity h2 {
  font-size: 20px;
  font-weight: 700;
  margin: 0 0 20px;
  color: #0f172a;
  letter-spacing: -0.01em;
}

.dashboard.dark .recent-activity h2 {
  color: #f1f5f9;
}

.recent-activity ul {
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.recent-activity li {
  padding: 16px 0;
  border-bottom: 1px solid #e2e8f0;
  display: flex;
  align-items: center;
  gap: 16px;
  transition: background-color 0.2s ease;
}

.dashboard.dark .recent-activity li {
  border-bottom-color: #334155;
}

.recent-activity li:hover {
  background-color: rgba(0, 0, 0, 0.01);
}

.dashboard.dark .recent-activity li:hover {
  background-color: rgba(255, 255, 255, 0.01);
}

.activity-time {
  font-size: 14px;
  color: #64748b;
  min-width: 85px;
  font-feature-settings: "tnum";
  font-variant-numeric: tabular-nums;
}

.activity-user {
  font-weight: 600;
  color: #2563eb;
  text-decoration: none;
  transition: color 0.2s ease;
}

.activity-user:hover {
  color: #1d4ed8;
  text-decoration: underline;
}

.activity-action {
  color: #64748b;
  font-size: 14px;
}

.activity-item {
  font-weight: 500;
  color: #0f172a;
}

.dashboard.dark .activity-item {
  color: #e2e8f0;
}

@media (max-width: 768px) {
  .dashboard {
    padding: 16px;
  }

  .dashboard-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 20px;
  }

  .header-actions {
    width: 100%;
    flex-wrap: wrap;
  }

  .action-button,
  .theme-switcher {
    flex: 1;
    min-width: 140px;
  }

  .dashboard-grid {
    grid-template-columns: 1fr;
    gap: 16px;
  }

  .widget,
  .chart-container,
  .recent-activity {
    padding: 20px;
  }
}

@media (prefers-reduced-motion: reduce) {
  .widget,
  .action-button,
  .theme-switcher {
    transition: none;
  }
}



================================================
File: src/pages/Dashboard/Dashboard.jsx
================================================
import React, { useState } from "react";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
} from "recharts";
import "./Dashboard.css";

const Dashboard = () => {
  const [darkMode, setDarkMode] = useState(false);

  const projectProgress = [
    { name: "Planning", completed: 100, remaining: 0 },
    { name: "Design", completed: 80, remaining: 20 },
    { name: "Development", completed: 60, remaining: 40 },
    { name: "Testing", completed: 30, remaining: 70 },
    { name: "Deployment", completed: 10, remaining: 90 },
  ];

  const teamPerformance = [
    { name: "Team A", value: 30 },
    { name: "Team B", value: 25 },
    { name: "Team C", value: 20 },
    { name: "Team D", value: 15 },
    { name: "Team E", value: 10 },
  ];

  const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042", "#8884D8"];

  // const toggleDarkMode = () => setDarkMode(!darkMode);

  return (
    <div className={`dashboard ${darkMode ? "dark" : ""}`}>
      <header className="dashboard-header">
        <div className="header-content">
          <h1>SyncOps Dashboard</h1>
          <p>Team Collaboration Hub</p>
        </div>
        <div className="header-actions">
          {/* <button className="action-button">Create Task</button> */}
          {/* <button className="action-button">Schedule Meeting</button> */}
          {/* <button className="theme-switcher" onClick={toggleDarkMode}>
            {darkMode ? "Light Mode" : "Dark Mode"}
          </button> */}
        </div>
      </header>

      <div className="dashboard-grid">
        <div className="widget tasks">
          <h3>Active Tasks</h3>
          <p className="widget-value">127</p>
          <span className="widget-change positive">+12 this week</span>
        </div>
        <div className="widget members">
          <h3>Team Members</h3>
          <p className="widget-value">48</p>
          <span className="widget-change">+3 new hires</span>
        </div>
        <div className="widget deadlines">
          <h3>Upcoming Deadlines</h3>
          <p className="widget-value">5</p>
          <span className="widget-change negative">2 overdue</span>
        </div>
        <div className="widget efficiency">
          <h3>Team Efficiency</h3>
          <p className="widget-value">92%</p>
          <span className="widget-change positive">+5% this month</span>
        </div>
        <div className="widget project-progress">
          <h3>Project Completion</h3>
          <p className="widget-value">75%</p>
          <span className="widget-change positive">+10% this month</span>
        </div>
        <div className="widget feedback">
          <h3>Client Feedback</h3>
          <p className="widget-value">4.7/5</p>
          <span className="widget-change positive">+0.2 this week</span>
        </div>
      </div>

      <div className="chart-container">
        <h2>Project Progress</h2>
        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={projectProgress} stackOffset="expand">
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="name" />
            <YAxis tickFormatter={(tick) => `${tick * 100}%`} />
            <Tooltip formatter={(value) => `${value}%`} />
            <Bar dataKey="completed" stackId="a" fill="#34A853" />
            <Bar dataKey="remaining" stackId="a" fill="#FFC107" />
          </BarChart>
        </ResponsiveContainer>
      </div>

      <div className="chart-container">
        <h2>Team Performance Distribution</h2>
        <ResponsiveContainer width="100%" height={300}>
          <PieChart>
            <Pie
              data={teamPerformance}
              cx="50%"
              cy="50%"
              labelLine={false}
              outerRadius={80}
              fill="#8884d8"
              dataKey="value"
              label={({ name, percent }) =>
                `${name} ${(percent * 100).toFixed(0)}%`
              }
            >
              {teamPerformance.map((entry, index) => (
                <Cell
                  key={`cell-${index}`}
                  fill={COLORS[index % COLORS.length]}
                />
              ))}
            </Pie>
          </PieChart>
        </ResponsiveContainer>
      </div>

      <div className="recent-activity">
        <h2>Recent Team Activity</h2>
        <ul>
          <li>
            <span className="activity-time">10:45 AM</span>
            <span className="activity-user">Rajesh Sharma</span>
            <span className="activity-action">completed task</span>
            <span className="activity-item">
              "Implement user authentication"
            </span>
          </li>
          <li>
            <span className="activity-time">09:30 AM</span>
            <span className="activity-user">Priya Patel</span>
            <span className="activity-action">created project</span>
            <span className="activity-item">"E-commerce Platform"</span>
          </li>
          <li>
            <span className="activity-time">Yesterday</span>
            <span className="activity-user">Amit Kumar</span>
            <span className="activity-action">reached milestone</span>
            <span className="activity-item">
              "Backend Microservices Architecture"
            </span>
          </li>
          <li>
            <span className="activity-time">2 days ago</span>
            <span className="activity-user">Anjali Reddy</span>
            <span className="activity-action">scheduled meeting</span>
            <span className="activity-item">"Quarterly Innovation Review"</span>
          </li>
          <li>
            <span className="activity-time">3 days ago</span>
            <span className="activity-user">Vikram Singh</span>
            <span className="activity-action">reviewed code</span>
            <span className="activity-item">"Payment Gateway Integration"</span>
          </li>
          <li>
            <span className="activity-time">Last week</span>
            <span className="activity-user">Neha Mehta</span>
            <span className="activity-action">deployed release</span>
            <span className="activity-item">"Customer Feedback Module"</span>
          </li>
        </ul>
      </div>
    </div>
  );
};

export default Dashboard;



================================================
File: src/pages/DataInsights/DataInsights.css
================================================
:root {
  --bg-primary: #ffffff;
  --bg-secondary: #f9fafb;
  --bg-tertiary: #f4f6f9;
  --text-primary: #1f2937;
  --text-secondary: #6b7280;
  --accent-color: #0056d2;
  --accent-hover: #0047a5;
  --success-color: #10b981;
  --error-color: #ef4444;
  --border-color: #e5e7eb;
  --shadow-light: 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-medium: 0 4px 12px rgba(0, 0, 0, 0.1);
  --shadow-hover: 0 6px 16px rgba(0, 0, 0, 0.15);
  --radius: 0.75rem;
  --transition: all 0.3s ease-in-out;
}

.data-data-insights {
  max-width: 1500px;
  margin: 0px auto;
  padding: 3rem 2.5rem; /* Adjusted for a balanced layout */
  background: linear-gradient(
    135deg,
    var(--bg-primary) 30%,
    var(--bg-secondary) 100%
  );
  border-radius: 12px; /* Slightly increased for a modern feel */
  border: 1px solid rgba(255, 255, 255, 0.1); /* Subtle frosted border */
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15); /* Soft elevated shadow */
  transition: transform 0.4s ease, box-shadow 0.4s ease;
  backdrop-filter: blur(6px); /* Frosted glass effect */
}

.data-data-insights:hover {
  transform: translateY(0px) scale(1); /* Slightly elevated hover effect */
  box-shadow: 0 12px 30px rgba(0, 0, 0, 0.25); /* Enhanced hover shadow */
}

.data-header {
  text-align: center;
  margin-bottom: 2.5rem;
  animation: slideIn 0.8s ease-out; /* Smooth entrance */
}

.data-header h1 {
  font-size: 3rem; /* Larger for prominence */
  font-weight: 900;
  color: var(--accent-color);
  margin-bottom: 1rem;
  letter-spacing: -1px;
  text-transform: uppercase; /* Adds a bold, modern touch */
  text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.2); /* Glow-like effect */
  transition: color 0.4s ease, letter-spacing 0.4s ease, transform 0.4s ease;
}

.data-header h1:hover {
  color: var(--accent-color-hover); /* Dynamic hover effect */
  letter-spacing: -1.5px; /* Slight dynamic shift */
  transform: translateY(-8px); /* Enhanced lift effect */
}

.data-header p {
  font-size: 1.125rem;
  color: rgba(135, 130, 130, 0.599); /* Slightly muted text for contrast */
  max-width: 700px; /* Increased for flexibility */
  margin: 0 auto;
  line-height: 1.8; /* Comfortable readability */
  font-family: "Poppins", sans-serif; /* Sleek and professional font */
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.data-upload-area {
  border: 2px dashed var(--border-color);
  border-radius: var(--radius);
  padding: 2.5rem;
  text-align: center;
  background-color: var(--bg-tertiary);
  cursor: pointer;
  transition: var(--transition);
  margin-bottom: 2rem;
}

.data-upload-area:hover {
  border-color: var(--accent-color);
  background-color: rgba(0, 86, 210, 0.05);
  transform: translateY(-2px);
}

.data-upload-icon {
  width: 48px;
  height: 48px;
  margin: 0 auto 1rem;
  color: var(--text-secondary);
  transition: var(--transition);
}

.data-upload-area:hover .data-upload-icon {
  color: var(--accent-color);
}

.data-upload-area p {
  font-size: 1rem;
  color: var(--text-secondary);
  margin-bottom: 0.5rem;
}

/* Enhanced Data Generate Button Styles */
.data-generate-button {
  background-color: var(--accent-color);
  color: var(--bg-primary);
  border: none;
  padding: 1.2rem 2.5rem;
  border-radius: 50px;
  font-size: 1.1rem;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition);
  width: 100%;
  max-width: 320px;
  margin: 0 auto;
  display: block;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  position: relative;
  overflow: hidden;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.data-generate-button::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 200%;
  height: 100%;
  background: linear-gradient(
    120deg,
    transparent,
    rgba(255, 255, 255, 0.3),
    transparent
  );
  transition: all 0.6s ease-in-out;
  z-index: 1;
}

.data-generate-button:hover::before {
  left: 100%;
}

.data-generate-button:hover:not(:disabled) {
  background-color: var(--accent-hover);
  transform: translateY(-4px);
  box-shadow: var(--shadow-hover);
}

.data-generate-button:active {
  transform: translateY(2px);
  background-color: var(--accent-active);
  box-shadow: var(--shadow-active);
}

.data-generate-button:disabled {
  background-color: var(--border-color);
  cursor: not-allowed;
  box-shadow: none;
  opacity: 0.6;
}

.data-error {
  color: var(--error-color);
  background-color: #fee2e2;
  padding: 1rem;
  border-radius: var(--radius);
  margin-bottom: 1.5rem;
  text-align: center;
  animation: fadeIn 0.3s ease;
}

.data-insights-container {
  margin-top: 3rem;
  animation: slideUp 0.5s ease;
}

.data-summary-card {
  background-color: var(--bg-secondary);
  padding: 1.5rem;
  border-radius: var(--radius);
  margin-bottom: 2rem;
  border: 1px solid var(--border-color);
}

.data-summary-card h2 {
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 1rem;
  color: var(--text-primary);
}

.data-predictions-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
  gap: 1.25rem;
  margin-bottom: 2rem;
}

.data-prediction-card {
  background-color: var(--bg-primary);
  padding: 1.5rem;
  border-radius: var(--radius);
  box-shadow: var(--shadow-light);
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  transition: var(--transition);
  border: 1px solid var(--border-color);
}

.data-prediction-card:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-hover);
}

.data-prediction-card .data-label {
  font-size: 0.875rem;
  color: var(--text-secondary);
  font-weight: 500;
}

.data-prediction-card .data-value {
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--text-primary);
}

.data-prediction.up {
  color: var(--success-color);
}

.data-prediction.down {
  color: var(--error-color);
}

.data-chart {
  background-color: var(--bg-primary);
  padding: 1.5rem;
  border-radius: var(--radius);
  box-shadow: var(--shadow-light);
  border: 1px solid var(--border-color);
}

.data-chart h3 {
  font-size: 1.125rem;
  font-weight: 600;
  margin-bottom: 1rem;
  color: var(--text-primary);
}

.data-chart-placeholder {
  height: 200px;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: var(--bg-secondary);
  border-radius: var(--radius);
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@media (max-width: 768px) {
  .data-data-insights {
    margin: 20px;
    padding: 1.5rem;
  }

  .data-header h1 {
    font-size: 1.75rem;
  }

  .data-predictions-grid {
    grid-template-columns: 1fr;
  }
}



================================================
File: src/pages/DataInsights/DataInsights.jsx
================================================
"use client"

import { useState } from "react"
import { marked } from "marked"
import DOMPurify from "dompurify"
import "./DataInsights.css"

const DataInsights = () => {
  const [dataFile, setDataFile] = useState(null)
  const [fileContent, setFileContent] = useState(null)
  const [filePreview, setFilePreview] = useState(null)
  const [insights, setInsights] = useState(null)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState(null)

  const API_KEY = "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"

  const ALLOWED_MIME_TYPES = [
    "image/jpeg",
    "image/png",
    "image/gif",
    "image/webp",
    "text/plain",
    "text/csv",
    "application/pdf",
  ]

  const handleFileUpload = (e) => {
    const file = e.target.files[0]
    if (file) {
      if (!ALLOWED_MIME_TYPES.includes(file.type)) {
        setError(`Unsupported file type: ${file.type}. Please upload an image, PDF, or text file.`)
        return
      }
      setDataFile(file)
      processFile(file)
      setError(null)
    }
  }

  const handleDragOver = (e) => {
    e.preventDefault()
    e.stopPropagation()
  }

  const handleDrop = (e) => {
    e.preventDefault()
    e.stopPropagation()
    const file = e.dataTransfer.files[0]
    if (file) {
      if (!ALLOWED_MIME_TYPES.includes(file.type)) {
        setError(`Unsupported file type: ${file.type}. Please upload an image, PDF, or text file.`)
        return
      }
      setDataFile(file)
      processFile(file)
      setError(null)
    }
  }

  const processFile = async (file) => {
    // For text files, read the content directly
    if (file.type.startsWith("text/")) {
      const text = await readFileAsText(file)
      setFileContent(text)
      setFilePreview(null)
    }
    // For images, create a preview URL and describe the image
    else if (file.type.startsWith("image/")) {
      const previewUrl = URL.createObjectURL(file)
      setFilePreview(previewUrl)
      setFileContent(`[This is an image file: ${file.name}, type: ${file.type}, size: ${formatFileSize(file.size)}]`)
    }
    // For PDFs, just note it's a PDF (we can't easily extract text without additional libraries)
    else if (file.type === "application/pdf") {
      setFilePreview(null)
      setFileContent(`[This is a PDF file: ${file.name}, size: ${formatFileSize(file.size)}]`)
    }
  }

  const readFileAsText = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader()
      reader.onload = (event) => resolve(event.target.result)
      reader.onerror = (error) => reject(error)
      reader.readAsText(file)
    })
  }

  const formatFileSize = (bytes) => {
    if (bytes < 1024) return bytes + " bytes"
    else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + " KB"
    else return (bytes / 1048576).toFixed(1) + " MB"
  }

  const analyzeFileWithPerplexity = async () => {
    if (!dataFile) {
      setError("Please upload a file to analyze.")
      return
    }

    if (!API_KEY) {
      setError("Perplexity API key is missing. Please provide a valid key.")
      return
    }

    setIsLoading(true)
    setError(null)

    try {
      // Create a description of the file for the API
      const fileDescription = `File name: ${dataFile.name}
File type: ${dataFile.type}
File size: ${formatFileSize(dataFile.size)}
${fileContent ? `\nFile content: ${fileContent.substring(0, 15000)}` : ""}`

      const response = await fetch("https://api.perplexity.ai/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${API_KEY}`,
        },
        body: JSON.stringify({
          model: "sonar",
          messages: [
            {
              role: "system",
              content:
                "You are an expert data analyst that provides comprehensive analysis of files. Use clear, structured Markdown formatting in your responses.",
            },
            {
              role: "user",
              content: `Provide a comprehensive and detailed analysis of this file. Use clear, structured Markdown formatting.\n\n${fileDescription}`,
            },
          ],
          temperature: 0.4,
          max_tokens: 2048,
        }),
      })

      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`API request failed: ${errorText}`)
      }

      const data = await response.json()

      if (data.error) {
        throw new Error(data.error.message || "API request failed")
      }

      const perplexityResponse = data.choices[0].message.content

      const sanitizedHTML = DOMPurify.sanitize(marked(perplexityResponse))
      setInsights({ markdown: sanitizedHTML })
      setIsLoading(false)
    } catch (error) {
      console.error("Analysis error:", error)
      setError(`Failed to analyze file: ${error.message}`)
      setIsLoading(false)
    }
  }

  return (
    <div className="data-data-insights">
      <div className="data-header">
        <h1>AI-Powered File Analysis</h1>
        <p>Upload images, PDFs, or text files for comprehensive AI analysis</p>
      </div>

      <div
        className="data-upload-area"
        onDragOver={handleDragOver}
        onDrop={handleDrop}
        onClick={() => document.getElementById("file-upload").click()}
      >
        <svg
          className="data-upload-icon"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        >
          <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
          <polyline points="17 8 12 3 7 8" />
          <line x1="12" y1="3" x2="12" y2="15" />
        </svg>
        <p>{dataFile ? dataFile.name : "Drag and drop supported files here or click to browse"}</p>
        <input
          id="file-upload"
          type="file"
          onChange={handleFileUpload}
          className="data-hidden"
          accept=".jpg,.jpeg,.png,.gif,.webp,.txt,.csv,.pdf"
        />
      </div>

      {filePreview && (
        <div className="data-file-preview">
          <img src={filePreview || "/placeholder.svg"} alt="File preview" className="data-preview-image" />
        </div>
      )}

      <button
        className={`data-generate-button ${isLoading ? "loading" : ""} ${!dataFile ? "disabled" : ""}`}
        onClick={analyzeFileWithPerplexity}
        disabled={isLoading || !dataFile}
      >
        {isLoading ? "Analyzing File..." : "Analyze File"}
      </button>

      {error && <div className="data-error">{error}</div>}

      {insights && (
        <div className="data-insights-container">
          <div className="data-markdown-output">
            <h2>Analysis Result</h2>
            <div dangerouslySetInnerHTML={{ __html: insights.markdown }}></div>
          </div>
        </div>
      )}
    </div>
  )
}

export default DataInsights



================================================
File: src/pages/FAQ/FAQ.css
================================================
/* Premium FAQ Styles - Complete Version */
.faq-container {
  max-width: 1500px;
  margin: 0px auto;
  padding: 40px;
  background: #ffffff;
  border-radius: 24px;
  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.08);
}

.faq-header {
  text-align: center;
  margin-bottom: 40px;
}

.faq-title {
  font-size: 3rem;
  margin: 0;
  font-weight: 800;
  background: linear-gradient(135deg, #2b5876 0%, #4e4376 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  letter-spacing: -0.5px;
}

.faq-subtitle {
  color: #666;
  margin-top: 12px;
  font-size: 1.2rem;
}

.search-section {
  position: relative;
  margin-bottom: 40px;
  transition: all 0.3s ease;
}

.search-section.focused {
  transform: translateY(-4px);
}

.search-wrapper {
  position: relative;
  background: white;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
}

.faq-search {
  width: 93%;
  padding: 20px 50px 20px 24px;
  font-size: 1.2rem;
  border: 2px solid transparent;
  border-radius: 16px;
  background: #f8fafc;
  transition: all 0.3s ease;
}

.faq-search:focus {
  outline: none;
  border-color: #4e4376;
  background: white;
  box-shadow: 0 0 0 4px rgba(78, 67, 118, 0.1);
}

.search-icon {
  position: absolute;
  right: 20px;
  top: 50%;
  transform: translateY(-50%);
  width: 24px;
  height: 24px;
  color: #4e4376;
  pointer-events: none;
}

.recent-searches {
  position: absolute;
  top: calc(100% + 8px);
  left: 0;
  right: 0;
  background: white;
  border-radius: 12px;
  padding: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  z-index: 10;
}

.recent-searches h3 {
  margin: 0 0 12px 0;
  font-size: 0.9rem;
  color: #64748b;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.recent-search-item {
  display: block;
  width: 100%;
  padding: 10px 16px;
  margin: 4px 0;
  text-align: left;
  background: none;
  border: none;
  border-radius: 8px;
  color: #334155;
  cursor: pointer;
  transition: all 0.2s ease;
}

.recent-search-item:hover {
  background: #f1f5f9;
}

.categories-section {
  display: flex;
  gap: 12px;
  margin-bottom: 30px;
  overflow-x: auto;
  padding: 4px;
  scrollbar-width: none;
  -ms-overflow-style: none;
}

.categories-section::-webkit-scrollbar {
  display: none;
}

.category-button {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 12px 20px;
  border: none;
  border-radius: 12px;
  background: #f8fafc;
  color: #64748b;
  font-size: 1rem;
  font-weight: 500;
  white-space: nowrap;
  transition: all 0.3s ease;
  cursor: pointer;
}

.category-button:hover {
  background: #f1f5f9;
  transform: translateY(-1px);
}

.category-button.active {
  background: #4e4376;
  color: white;
}

.category-icon {
  font-size: 1.2rem;
}

.faq-content {
  position: relative;
}

.faq-list {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.faq-item {
  background: white;
  border-radius: 16px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.02);
  transition: all 0.3s ease;
  overflow: hidden;
}

/* .faq-item:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 15px rgba(0, 0, 0, 0.05);
} */

.faq-question {
  width: 100%;
  padding: 24px;
  background: none;
  border: none;
  text-align: left;
  cursor: pointer;
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  color: #1e293b;
  font-size: 1.1rem;
  font-weight: 600;
  transition: all 0.3s ease;
}

.question-text {
  flex: 1;
  padding-right: 20px;
}

.question-meta {
  display: flex;
  align-items: center;
  gap: 12px;
  flex-shrink: 0;
}

.question-tag {
  padding: 4px 8px;
  background: #f1f5f9;
  border-radius: 6px;
  font-size: 0.8rem;
  font-weight: 500;
  color: #64748b;
}

.faq-toggle-icon {
  position: relative;
  width: 20px;
  height: 20px;
  flex-shrink: 0;
}

.faq-toggle-icon::before,
.faq-toggle-icon::after {
  content: "";
  position: absolute;
  background: #4e4376;
  border-radius: 2px;
  transition: all 0.3s ease;
}

.faq-toggle-icon::before {
  width: 2px;
  height: 20px;
  left: 50%;
  transform: translateX(-50%);
}

.faq-toggle-icon::after {
  width: 20px;
  height: 2px;
  top: 50%;
  transform: translateY(-50%);
}

.faq-item.expanded .faq-toggle-icon::before {
  transform: translateX(-50%) rotate(90deg);
  opacity: 0;
}

.faq-answer-wrapper {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.5s cubic-bezier(0.4, 0, 0.2, 1);
}

.faq-answer-wrapper.expanded {
  max-height: 2000px;
}

.faq-answer {
  padding: 0 24px 24px;
  color: #475569;
  line-height: 1.7;
  font-size: 1rem;
}

.answer-content {
  margin-bottom: 24px;
  white-space: pre-line;
}

.answer-footer {
  border-top: 1px solid #e2e8f0;
  padding-top: 20px;
  margin-top: 20px;
}

.helpful-section {
  display: flex;
  align-items: center;
  gap: 16px;
  margin-bottom: 20px;
}

.helpful-section span {
  color: #64748b;
  font-size: 0.9rem;
}

.helpful-button {
  padding: 8px 16px;
  background: #f8fafc;
  border: none;
  border-radius: 8px;
  color: #475569;
  font-size: 0.9rem;
  cursor: pointer;
  transition: all 0.2s ease;
}

.helpful-button:hover {
  background: #f1f5f9;
  transform: translateY(-1px);
}

.related-questions {
  margin-top: 20px;
}

.related-questions h4 {
  margin: 0 0 12px 0;
  font-size: 0.9rem;
  color: #64748b;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.related-question-link {
  display: block;
  width: 100%;
  padding: 10px 16px;
  margin: 4px 0;
  text-align: left;
  background: none;
  border: none;
  border-radius: 8px;
  color: #4e4376;
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 0.95rem;
}

.related-question-link:hover {
  background: #f1f5f9;
  text-decoration: underline;
}

.faq-no-results {
  text-align: center;
  padding: 60px 20px;
  color: #64748b;
}

.faq-no-results svg {
  width: 48px;
  height: 48px;
  margin-bottom: 16px;
  color: #4e4376;
}

.faq-no-results p {
  font-size: 1.2rem;
  margin: 0 0 8px 0;
  font-weight: 600;
  color: #1e293b;
}

.faq-no-results span {
  font-size: 1rem;
  color: #64748b;
}

.suggested-questions {
  margin-top: 32px;
  padding-top: 24px;
  border-top: 1px solid #e2e8f0;
}

.suggested-questions h3 {
  margin: 0 0 16px 0;
  font-size: 1rem;
  color: #475569;
}

.suggested-question {
  display: block;
  width: 100%;
  padding: 12px 20px;
  margin: 8px 0;
  text-align: left;
  background: #f8fafc;
  border: none;
  border-radius: 10px;
  color: #1e293b;
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 1rem;
}

.suggested-question:hover {
  background: #f1f5f9;
  transform: translateX(4px);
}

/* Responsive Styles */
@media (max-width: 768px) {
  .faq-container {
    margin: 20px;
    padding: 20px;
  }

  .faq-title {
    font-size: 2rem;
  }

  .faq-subtitle {
    font-size: 1rem;
  }

  .faq-search {
    padding: 16px 45px 16px 20px;
    font-size: 1rem;
  }

  .category-button {
    padding: 10px 16px;
    font-size: 0.9rem;
  }

  .faq-question {
    padding: 20px;
    font-size: 1rem;
    flex-direction: column;
    gap: 12px;
  }

  .question-meta {
    width: 100%;
    justify-content: flex-start;
  }

  .faq-answer {
    padding: 0 20px 20px;
    font-size: 0.95rem;
  }
}

@media (max-width: 480px) {
  .faq-container {
    margin: 10px;
    padding: 15px;
  }

  .categories-section {
    gap: 8px;
  }

  .category-button {
    padding: 8px 12px;
    font-size: 0.8rem;
  }

  .question-tag {
    font-size: 0.7rem;
    padding: 3px 6px;
  }
}

/* Print Styles */
@media print {
  .faq-container {
    box-shadow: none;
    margin: 0;
    padding: 20px;
  }

  .search-section,
  .categories-section,
  .helpful-section,
  .faq-toggle-icon {
    display: none;
  }

  .faq-answer-wrapper {
    max-height: none !important;
    overflow: visible;
  }

  .faq-item {
    break-inside: avoid;
    page-break-inside: avoid;
  }
}



================================================
File: src/pages/FAQ/FAQ.jsx
================================================
import React, { useState, useEffect, useCallback } from "react";
import './FAQ.css';

const FAQ = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [expandedIndex, setExpandedIndex] = useState(null);
  const [searchFocus, setSearchFocus] = useState(false);
  const [activeCategory, setActiveCategory] = useState("all");
  const [recentSearches, setRecentSearches] = useState([]);
  const [helpfulCounts, setHelpfulCounts] = useState({});
  const [relatedQuestions, setRelatedQuestions] = useState([]);

  const categories = [
    { id: "all", label: "All Questions", icon: "🔍" },
    { id: "getting-started", label: "Getting Started", icon: "🚀" },
    { id: "features", label: "Features", icon: "⚡" },
    { id: "security", label: "Security", icon: "🔒" },
    { id: "integration", label: "Integration", icon: "🔄" },
    { id: "billing", label: "Billing", icon: "💳" },
  ];

  const faqs = [
    {
      id: 1,
      category: "getting-started",
      question: "What is SyncOps and how can it benefit my workflow?",
      answer: `SyncOps is a comprehensive AI-powered platform that revolutionizes your workflow through:

• Intelligent Content Generation
• Advanced Translation Services
• Real-time Collaboration Tools
• Automated Data Processing

Our platform reduces manual work by up to 60% and improves content quality by leveraging cutting-edge AI technology.`,
      tags: ["basics", "introduction"],
      relatedIds: [2, 3],
    },
    {
      id: 2,
      category: "features",
      question:
        "How does the Dynamic Prompts feature enhance content creation?",
      answer: `Dynamic Prompts is our flagship feature that uses contextual AI to:

1. Analyze your writing style and tone
2. Generate personalized suggestions
3. Adapt to your specific industry needs
4. Learn from your preferences over time

This results in more relevant and effective content generation, saving you valuable time while maintaining consistency.`,
      tags: ["ai", "content"],
      relatedIds: [1, 4],
    },
    {
      id: 3,
      category: "features",
      question: "What makes Content Rewrite different from other tools?",
      answer: `Content Rewrite stands out through its:

• Context-aware rewriting algorithms
• Tone and style preservation
• Multi-language support
• SEO optimization capabilities

Unlike traditional tools, it maintains the original message while improving clarity and engagement.`,
      tags: ["content", "optimization"],
      relatedIds: [2, 5],
    },
    {
      id: 4,
      category: "integration",
      question: "How can I integrate external AI APIs with SyncOps?",
      answer: `Integration with external APIs is straightforward:

1. Access the Integration Dashboard
2. Select "Add New Integration"
3. Choose from our supported API providers
4. Enter your API credentials
5. Configure preferences and permissions

We support major AI providers including OpenAI, Google AI, and Azure Cognitive Services.`,
      tags: ["technical", "api"],
      relatedIds: [6, 7],
    },
    {
      id: 5,
      category: "security",
      question: "What security measures does SyncOps implement?",
      answer: `We maintain enterprise-grade security through:

• End-to-end encryption (AES-256)
• Regular security audits
• SOC 2 Type II compliance
• GDPR compliance
• Multi-factor authentication
• Role-based access control

Your data is encrypted both in transit and at rest, with regular backups stored in secure locations.`,
      tags: ["security", "compliance"],
      relatedIds: [8, 9],
    },
    {
      id: 6,
      category: "features",
      question: "What languages are supported for Translation?",
      answer: `Our Translation feature supports:

• 100+ languages for text translation
• 50+ languages for real-time translation
• 30+ languages for document translation
• 20+ languages for audio translation

All translations maintain context and nuance through our advanced NLP models.`,
      tags: ["translation", "languages"],
      relatedIds: [3, 7],
    },
    {
      id: 7,
      category: "features",
      question: "How do I generate and customize data insight reports?",
      answer: `Generate comprehensive reports through these steps:

1. Select your data source
2. Choose visualization types
3. Set custom parameters
4. Apply filters and transformations
5. Export in multiple formats

Our AI automatically identifies trends and provides actionable insights.`,
      tags: ["analytics", "reporting"],
      relatedIds: [4, 8],
    },
  ];

  const handleSearch = useCallback((e) => {
    const value = e.target.value.toLowerCase();
    setSearchTerm(value);
    updateRelatedQuestions(value);
  }, []);

  const updateRelatedQuestions = (search) => {
    if (search.length > 2) {
      const related = faqs
        .filter(
          (faq) =>
            faq.tags.some((tag) => tag.includes(search)) &&
            !faq.question.toLowerCase().includes(search)
        )
        .slice(0, 3);
      setRelatedQuestions(related);
    } else {
      setRelatedQuestions([]);
    }
  };

  const saveRecentSearch = (term) => {
    if (term.length > 2) {
      setRecentSearches((prev) => {
        const updated = [term, ...prev.filter((t) => t !== term)].slice(0, 5);
        return updated;
      });
    }
  };

  const toggleAnswer = (index) => {
    setExpandedIndex(expandedIndex === index ? null : index);
  };

  const markHelpful = (id) => {
    setHelpfulCounts((prev) => ({
      ...prev,
      [id]: (prev[id] || 0) + 1,
    }));
  };

  const filteredFaqs = faqs.filter((faq) => {
    const matchesSearch =
      faq.question.toLowerCase().includes(searchTerm) ||
      faq.answer.toLowerCase().includes(searchTerm) ||
      faq.tags.some((tag) => tag.includes(searchTerm));
    const matchesCategory =
      activeCategory === "all" || faq.category === activeCategory;
    return matchesSearch && matchesCategory;
  });

  return (
    <div className="faq-container">
      <div className="faq-header">
        <h1 className="faq-title">How can we help you?</h1>
        <p className="faq-subtitle">
          Search our knowledge base or browse categories below
        </p>
      </div>

      <div className={`search-section ${searchFocus ? "focused" : ""}`}>
        <div className="search-wrapper">
          <input
            type="text"
            className="faq-search"
            placeholder="Type your question here..."
            value={searchTerm}
            onChange={handleSearch}
            onFocus={() => setSearchFocus(true)}
            onBlur={() => {
              setSearchFocus(false);
              saveRecentSearch(searchTerm);
            }}
          />
          {/* <svg className="search-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <circle cx="11" cy="11" r="8"/>
            <path d="M21 21l-4.35-4.35"/>
          </svg> */}
        </div>

        {searchFocus && recentSearches.length > 0 && (
          <div className="recent-searches">
            <h3>Recent Searches</h3>
            {recentSearches.map((term, index) => (
              <button
                key={index}
                className="recent-search-item"
                onClick={() => setSearchTerm(term)}
              >
                {term}
              </button>
            ))}
          </div>
        )}
      </div>

      <div className="categories-section">
        {categories.map((category) => (
          <button
            key={category.id}
            className={`category-button ${
              activeCategory === category.id ? "active" : ""
            }`}
            onClick={() => setActiveCategory(category.id)}
          >
            <span className="category-icon">{category.icon}</span>
            {category.label}
          </button>
        ))}
      </div>

      <div className="faq-content">
        <div className="faq-list">
          {filteredFaqs.length > 0 ? (
            filteredFaqs.map((faq, index) => (
              <div
                key={faq.id}
                className={`faq-item ${
                  expandedIndex === index ? "expanded" : ""
                }`}
              >
                <button
                  className="faq-question"
                  onClick={() => toggleAnswer(index)}
                  aria-expanded={expandedIndex === index}
                >
                  <span className="question-text">{faq.question}</span>
                  <div className="question-meta">
                    {faq.tags.map((tag) => (
                      <span key={tag} className="question-tag">
                        {tag}
                      </span>
                    ))}
                    <span className="faq-toggle-icon"></span>
                  </div>
                </button>

                <div
                  className={`faq-answer-wrapper ${
                    expandedIndex === index ? "expanded" : ""
                  }`}
                >
                  <div className="faq-answer">
                    <div className="answer-content">{faq.answer}</div>
                    <div className="answer-footer">
                      <div className="helpful-section">
                        <span>Was this helpful?</span>
                        <button
                          className="helpful-button"
                          onClick={() => markHelpful(faq.id)}
                        >
                          👍 Yes{" "}
                          {helpfulCounts[faq.id]
                            ? `(${helpfulCounts[faq.id]})`
                            : ""}
                        </button>
                      </div>
                      {faq.relatedIds && (
                        <div className="related-questions">
                          <h4>Related Questions:</h4>
                          {faqs
                            .filter((f) => faq.relatedIds.includes(f.id))
                            .map((related) => (
                              <button
                                key={related.id}
                                className="related-question-link"
                                onClick={() => {
                                  const newIndex = filteredFaqs.findIndex(
                                    (f) => f.id === related.id
                                  );
                                  if (newIndex !== -1) {
                                    setExpandedIndex(newIndex);
                                  }
                                }}
                              >
                                {related.question}
                              </button>
                            ))}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))
          ) : (
            <div className="faq-no-results">
              <svg
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
              >
                <circle cx="12" cy="12" r="10" />
                <path d="M15 9l-6 6M9 9l6 6" />
              </svg>
              <p>No matching questions found</p>
              <span>
                Try adjusting your search terms or browsing categories
              </span>

              {relatedQuestions.length > 0 && (
                <div className="suggested-questions">
                  <h3>You might be interested in:</h3>
                  {relatedQuestions.map((question, index) => (
                    <button
                      key={index}
                      className="suggested-question"
                      onClick={() =>
                        setSearchTerm(question.question.toLowerCase())
                      }
                    >
                      {question.question}
                    </button>
                  ))}
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default FAQ;



================================================
File: src/pages/FormFiller/FormFiller.css
================================================
/* FormFiller.css - Light Theme */
.form-filler-container {
  max-width: 1200px;
  margin: 2rem auto;
  padding: 2.5rem;
  background: linear-gradient(to bottom right, #ffffff, #f4f4f5);
  border-radius: 16px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.05);
  transition: all 0.3s ease;
}

.form-filler-container:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.1);
}

.form-header {
  text-align: center;
  margin-bottom: 2.5rem;
}

.form-header h1 {
  font-size: 2.5rem;
  color: #111827;
  margin-bottom: 0.5rem;
  font-weight: 700;
  background: linear-gradient(120deg, #1d4ed8, #3b82f6);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

.form-header p {
  color: #4b5563;
  font-size: 1.1rem;
  max-width: 80%;
  margin: 0 auto;
}

.form {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.form-group {
  position: relative;
}

.form-group .filler-label {
  display: block;
  margin-bottom: 0.5rem;
  color: #1f2937;
  font-weight: 500;
  font-size: 0.95rem;
}

.required {
  color: #dc2626;
  margin-left: 0.25rem;
}

.input-wrapper {
  position: relative;
  display: flex;
  gap: 0.75rem;
  transition: all 0.2s ease;
}

.input-wrapper.active {
  transform: translateY(-1px);
}

.input-wrapper input {
  flex: 1;
  padding: 0.75rem 1rem;
  font-size: 1rem;
  border: 2px solid #e5e7eb;
  border-radius: 8px;
  transition: all 0.2s ease;
  background: #ffffff;
  color: #1f2937;
}

.input-wrapper input:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.input-wrapper.error input {
  border-color: #dc2626;
}

.input-wrapper input.has-suggestion {
  border-color: #d97706;
}

.suggestion-button {
  padding: 0.75rem 1.25rem;
  background: #f59e0b;
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 500;
  transition: all 0.2s ease;
  white-space: nowrap;
}

.suggestion-button:hover {
  background: #d97706;
  transform: translateY(-1px);
}

.error-message {
  position: absolute;
  bottom: -1.25rem;
  left: 0;
  color: #dc2626;
  font-size: 0.8rem;
}

.form-actions {
  display: flex;
  gap: 1rem;
  margin-top: 1rem;
}

.action-button {
  flex: 1;
  padding: 0.875rem 1.5rem;
  border: none;
  border-radius: 8px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  text-align: center;
  position: relative;
  overflow: hidden;
  color: white;
}

.action-button::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(255, 255, 255, 0.2);
  transform: translateX(-100%);
  transition: transform 0.3s ease;
}

.action-button:hover::before {
  transform: translateX(0);
}

.autofill {
  background: #3b82f6;
}

.autofill:hover {
  background: #1d4ed8;
}

.suggest {
  background: #f59e0b;
}

.suggest:hover {
  background: #d97706;
}

.clear {
  background: #dc2626;
}

.clear:hover {
  background: #b91c1c;
}

.submit-button {
  width: 100%;
  padding: 1rem;
  margin-top: 1.5rem;
  background: #16a34a;
  color: white;
  border: none;
  border-radius: 8px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  position: relative;
  overflow: hidden;
}

.submit-button:hover {
  background: #15803d;
}

.submit-button.success {
  background: #16a34a;
  animation: pulse 1.5s ease;
}

.submit-button.error {
  background: #dc2626;
  animation: shake 0.5s ease;
}

.status-message {
  margin-top: 1rem;
  padding: 1rem;
  border-radius: 8px;
  text-align: center;
  font-weight: 500;
  animation: fadeIn 0.3s ease;
}

.status-message.success {
  background: rgba(22, 163, 74, 0.1);
  color: #16a34a;
}

.status-message.error {
  background: rgba(220, 38, 38, 0.1);
  color: #dc2626;
}

.loading {
  position: relative;
  pointer-events: none;
  opacity: 0.8;
}

.loading::after {
  content: "";
  position: absolute;
  top: 50%;
  left: 50%;
  width: 1.5rem;
  height: 1.5rem;
  margin: -0.75rem 0 0 -0.75rem;
  border: 2px solid rgba(31, 41, 55, 0.3);
  border-top-color: #1f2937;
  border-radius: 50%;
  animation: spin 0.8s infinite linear;
  box-shadow: 0 0 8px rgba(31, 41, 55, 0.5);
}

/* Animations remain the same as in the original CSS */
@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

@keyframes pulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
  100% {
    transform: scale(1);
  }
}

@keyframes shake {
  0%,
  100% {
    transform: translateX(0);
  }
  25% {
    transform: translateX(-5px);
  }
  75% {
    transform: translateX(5px);
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Accessibility Styles */
@media (prefers-reduced-motion: reduce) {
  * {
    animation: none !important;
    transition: none !important;
  }
}

/* Responsive Design */
@media (max-width: 640px) {
  .form-filler-container {
    margin: 1rem;
    padding: 1.5rem;
  }

  .form-header h1 {
    font-size: 2rem;
  }

  .form-header p {
    font-size: 1rem;
    max-width: 100%;
  }

  .form-actions {
    flex-direction: column;
    gap: 0.75rem;
  }

  .input-wrapper {
    flex-direction: column;
  }

  .suggestion-button {
    width: 100%;
    margin-top: 0.5rem;
  }
}

@media (max-width: 480px) {
  .form-filler-container {
    margin: 0.5rem;
    padding: 1rem;
    border-radius: 12px;
  }

  .form-header h1 {
    font-size: 1.75rem;
  }

  .input-wrapper input {
    padding: 0.625rem 0.875rem;
    font-size: 0.95rem;
  }

  .action-button {
    padding: 0.75rem 1rem;
    font-size: 0.95rem;
  }
}

/* Print Styles */
@media print {
  .form-filler-container {
    box-shadow: none;
    margin: 0;
    padding: 1rem;
  }

  .form-actions,
  .suggestion-button,
  .submit-button {
    display: none;
  }

  .input-wrapper input {
    border: 1px solid #000;
  }

  .form-header h1 {
    color: #000;
    -webkit-text-fill-color: initial;
  }
}



================================================
File: src/pages/FormFiller/FormFiller.jsx
================================================
import React, { useState } from "react";
import "./FormFiller.css";

const FormFiller = () => {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    address: "",
    phone: "",
    company: "",
  });
  const [suggestions, setSuggestions] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [activeField, setActiveField] = useState(null);
  const [submitStatus, setSubmitStatus] = useState(null);
  const [validationErrors, setValidationErrors] = useState({});

  // Gemini API Key (embedded directly in the code)
  const GEMINI_API_KEY = 'AIzaSyBRlNfkdImoF0XMv-J5jKWcWCcpL6lKPVQ';

  // Validation patterns
  const validationPatterns = {
    email: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
    phone: /^\+?[\d\s-]{10,}$/,
  };

  const validateField = (name, value) => {
    if (!value) return "This field is required";
    
    switch (name) {
      case "email":
        return validationPatterns.email.test(value) ? "" : "Invalid email format";
      case "phone":
        return validationPatterns.phone.test(value) ? "" : "Invalid phone format";
      default:
        return "";
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    
    const error = validateField(name, value);
    setValidationErrors(prev => ({
      ...prev,
      [name]: error
    }));
  };

  const handleFocus = (fieldName) => {
    setActiveField(fieldName);
  };

  const handleBlur = () => {
    setActiveField(null);
  };

  const handleAutofill = async () => {
    setIsLoading(true);
    try {
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: "Generate a professional profile with name, email, address, phone, and company. Format: Name: [Name], Email: [Email], Address: [Address], Phone: [Phone], Company: [Company]"
            }]
          }]
        })
      });

      const data = await response.json();
      const generatedText = data.candidates[0].content.parts[0].text;

      // Parse the generated text
      const profileDetails = parseGeneratedProfile(generatedText);
      
      setFormData(profileDetails);
      setSuggestions({});
      setValidationErrors({});
      
      setSubmitStatus("success");
      setTimeout(() => setSubmitStatus(null), 2000);
    } catch (error) {
      console.error("Autofill error:", error);
      setSubmitStatus("error");
      setTimeout(() => setSubmitStatus(null), 2000);
    }
    setIsLoading(false);
  };

  const parseGeneratedProfile = (text) => {
    const defaultProfile = {
      name: "John Doe",
      email: "john.doe@example.com",
      address: "123 Tech Lane, San Francisco, CA 94105",
      phone: "+1 (555) 123-4567",
      company: "Tech Innovations Inc."
    };

    try {
      const profileData = {};
      const fields = ['Name', 'Email', 'Address', 'Phone', 'Company'];
      
      fields.forEach(field => {
        const regex = new RegExp(`${field}:\\s*([^,\\n]+)`, 'i');
        const match = text.match(regex);
        profileData[field.toLowerCase()] = match ? match[1].trim() : defaultProfile[field.toLowerCase()];
      });

      return profileData;
    } catch (error) {
      console.error("Profile parsing error:", error);
      return defaultProfile;
    }
  };

  const handleSuggest = async () => {
    setIsLoading(true);
    try {
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: "Generate an alternative professional profile. Format: Name: [Name], Email: [Email], Address: [Address], Phone: [Phone], Company: [Company]"
            }]
          }]
        })
      });

      const data = await response.json();
      const generatedText = data.candidates[0].content.parts[0].text;
      
      const suggestedProfile = parseGeneratedProfile(generatedText);
      setSuggestions(suggestedProfile);
    } catch (error) {
      console.error("Suggestions error:", error);
    }
    setIsLoading(false);
  };

  const applySuggestion = (key) => {
    if (suggestions[key]) {
      setFormData(prev => ({ ...prev, [key]: suggestions[key] }));
      setSuggestions(prev => ({ ...prev, [key]: null }));
    }
  };

  const clearForm = () => {
    setFormData({
      name: "",
      email: "",
      address: "",
      phone: "",
      company: "",
    });
    setSuggestions({});
    setValidationErrors({});
    setSubmitStatus(null);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    const errors = {};
    Object.keys(formData).forEach(key => {
      const error = validateField(key, formData[key]);
      if (error) errors[key] = error;
    });

    if (Object.keys(errors).length > 0) {
      setValidationErrors(errors);
      setSubmitStatus("error");
      setTimeout(() => setSubmitStatus(null), 2000);
      return;
    }

    setSubmitStatus("success");
    setTimeout(() => setSubmitStatus(null), 2000);
  };

  return (
    <div className="form-filler-container">
      <div className="form-header">
        <h1>Smart Form Filler</h1>
        <p>Experience AI-powered form filling with Gemini</p>
      </div>

      <form onSubmit={handleSubmit} className="form">
        {Object.keys(formData).map((key) => (
          <div key={key} className="form-group">
            <label className="filler-label" htmlFor={key} >
              {key.charAt(0).toUpperCase() + key.slice(1)}
              <span className="required">*</span>
            </label>
            <div className={`input-wrapper ${activeField === key ? 'active' : ''} ${validationErrors[key] ? 'error' : ''}`}>
              <input
                type="text"
                id={key}
                name={key}
                value={formData[key]}
                onChange={handleInputChange}
                onFocus={() => handleFocus(key)}
                onBlur={handleBlur}
                placeholder={`Enter your ${key.toLowerCase()}`}
                className={suggestions[key] ? 'has-suggestion' : ''}
              />
              {suggestions[key] && (
                <button
                  type="button"
                  className="suggestion-button"
                  onClick={() => applySuggestion(key)}
                >
                  Use Suggestion
                </button>
              )}
            </div>
            {validationErrors[key] && (
              <span className="error-message">{validationErrors[key]}</span>
            )}
          </div>
        ))}

        <div className="form-actions">
          <button
            type="button"
            className={`action-button autofill ${isLoading ? 'loading' : ''}`}
            onClick={handleAutofill}
            disabled={isLoading}
          >
            {isLoading ? 'Processing...' : 'Auto-Fill Form'}
          </button>
          <button
            type="button"
            className={`action-button suggest ${isLoading ? 'loading' : ''}`}
            onClick={handleSuggest}
            disabled={isLoading}
          >
            {isLoading ? 'Loading...' : 'Get Suggestions'}
          </button>
          <button
            type="button"
            className="action-button clear"
            onClick={clearForm}
          >
            Clear All
          </button>
        </div>

        <button 
          type="submit" 
          className={`submit-button ${submitStatus || ''}`}
          disabled={isLoading}
        >
          Submit Form
        </button>
      </form>

      {submitStatus && (
        <div className={`status-message ${submitStatus}`}>
          {submitStatus === 'success' ? 'Form submitted successfully!' : 'Please fix the errors above.'}
        </div>
      )}
    </div>
  );
};

export default FormFiller;


================================================
File: src/pages/IdeaGeneration/IdeaGeneration.css
================================================
/* Base Styles */
.idea-container {
  max-width: 1500px;
  margin: 0px auto;
  padding: 40px;
  background: linear-gradient(145deg, #ffffff, #f8f9fa);
  border-radius: 20px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
}

/* Header Styles */
.idea-header {
  text-align: center;
  margin-bottom: 40px;
}

.idea-title {
  font-size: 3.5rem;
  font-weight: 800;
  margin-bottom: 20px;
  letter-spacing: -0.5px;
}

.idea-title-gradient {
  background: linear-gradient(120deg, #2196f3, #00bcd4);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
}

.idea-subtitle {
  font-size: 1.4rem;
  color: #6c757d;
  max-width: 600px;
  margin: 0 auto 30px;
  line-height: 1.6;
}

/* AI Status Bar */
.ai-status {
  max-width: 400px;
  margin: 20px auto;
}

.ai-confidence {
  height: 4px;
  background-color: #e9ecef;
  border-radius: 2px;
  overflow: hidden;
}

.confidence-bar {
  height: 100%;
  background: linear-gradient(90deg, #2196f3, #00bcd4);
  transition: width 0.5s ease-out;
}

.ai-status-text {
  display: block;
  text-align: center;
  color: #6c757d;
  font-size: 0.9rem;
  margin-top: 8px;
}

/* Category Selector */
.category-selector {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  justify-content: center;
  margin-bottom: 30px;
}

.category-button {
  padding: 8px 16px;
  border: none;
  border-radius: 20px;
  background-color: #e9ecef;
  color: #495057;
  cursor: pointer;
  transition: all 0.3s ease;
}

.category-button:hover {
  background-color: #dee2e6;
  transform: translateY(-1px);
}

.category-button.active {
  background: linear-gradient(90deg, #2196f3, #00bcd4);
  color: white;
  box-shadow: 0 2px 10px rgba(33, 150, 243, 0.3);
}

/* Input Section */
.idea-input-container {
  background-color: white;
  padding: 30px;
  border-radius: 15px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
}

.input-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.input-header h3 {
  font-size: 1.5rem;
  color: #212529;
  margin: 0;
}

.tips-toggle {
  padding: 8px 16px;
  border: none;
  border-radius: 20px;
  background: linear-gradient(90deg, #2196f3, #00bcd4);
  color: white;
  cursor: pointer;
  transition: all 0.3s ease;
}

.tips-toggle:hover {
  transform: translateY(-1px);
  box-shadow: 0 2px 10px rgba(33, 150, 243, 0.3);
}

/* AI Tips */
.ai-tips {
  background-color: #f8f9fa;
  border-radius: 10px;
  padding: 20px;
  margin-bottom: 20px;
}

.tip-item {
  display: flex;
  align-items: center;
  margin: 10px 0;
  font-size: 0.95rem;
  color: #495057;
}

.tip-number {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 24px;
  height: 24px;
  background: linear-gradient(90deg, #2196f3, #00bcd4);
  color: white;
  border-radius: 50%;
  margin-right: 12px;
  font-size: 0.8rem;
  font-weight: bold;
}

/* Input Field */
.idea-input {
  width: 95%;
  height: 150px;
  padding: 20px;
  border: 2px solid #e9ecef;
  border-radius: 10px;
  font-size: 1.1rem;
  color: #212529;
  resize: vertical;
  transition: all 0.3s ease;
  margin-bottom: 20px;
}

.idea-input:focus {
  border-color: #2196f3;
  box-shadow: 0 0 0 4px rgba(33, 150, 243, 0.1);
  outline: none;
}

/* Generate Button */
/* Enhanced Generate Button Styles */
.generate-button {
  width: 25%;
  margin-left: 425px;
  padding: 18px 20px;
  border: none;
  border-radius: 30px;
  background: linear-gradient(90deg, #2196f3, #00bcd4);
  color: #ffffff;
  font-size: 1.1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease-in-out;
  text-transform: uppercase;
  letter-spacing: 1px;
  box-shadow: 0 6px 12px rgba(33, 150, 243, 0.2);
  position: relative;
  overflow: hidden;
}

.generate-button::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 200%;
  height: 100%;
  background: linear-gradient(
    120deg,
    transparent,
    rgba(255, 255, 255, 0.4),
    transparent
  );
  transition: all 0.6s ease-in-out;
  z-index: 1;
}

.generate-button:hover::before {
  left: 100%;
}

.generate-button:hover {
  transform: translateY(-4px);
  box-shadow: 0 8px 20px rgba(33, 150, 243, 0.3);
  background: linear-gradient(90deg, #00bcd4, #2196f3);
}

.generate-button:active {
  transform: translateY(2px);
  background: linear-gradient(90deg, #008c9e, #2196f3);
  box-shadow: 0 4px 12px rgba(33, 150, 243, 0.25);
}

.generate-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  box-shadow: none;
  background: linear-gradient(90deg, #b0bec5, #cfd8dc);
}

.generate-button.loading {
  position: relative;
  cursor: wait;
}

.loading-text {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 4px;
}

.dot {
  animation: dotPulse 1.5s infinite;
  opacity: 0;
}

.dot:nth-child(2) {
  animation-delay: 0.5s;
}

.dot:nth-child(3) {
  animation-delay: 1s;
}

@keyframes dotPulse {
  0%,
  100% {
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
}

/* Results Section */
.idea-results {
  margin-top: 40px;
}

.results-title {
  font-size: 2rem;
  color: #212529;
  text-align: center;
  margin-bottom: 30px;
}

.ideas-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 20px;
}

.idea-card {
  background: white;
  border-radius: 15px;
  padding: 20px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
  transition: all 0.3s ease;
}

.idea-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
}

.idea-card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 15px;
}

.idea-category {
  background: linear-gradient(90deg, #2196f3, #00bcd4);
  color: white;
  padding: 4px 12px;
  border-radius: 15px;
  font-size: 0.85rem;
  font-weight: 500;
}

.idea-confidence {
  color: #6c757d;
  font-size: 0.85rem;
  font-weight: 500;
}

.idea-text {
  color: #212529;
  font-size: 1.1rem;
  line-height: 1.6;
  margin-bottom: 20px;
  min-height: 80px;
}

.idea-card-footer {
  display: flex;
  justify-content: flex-end;
}

.save-button {
  padding: 8px 16px;
  border: 2px solid #2196f3;
  border-radius: 20px;
  background: transparent;
  color: #2196f3;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
}

.save-button:hover:not(:disabled) {
  background: #2196f3;
  color: white;
}

.save-button:disabled {
  border-color: #6c757d;
  color: #6c757d;
  cursor: not-allowed;
}

/* Notification Styles */
.notification {
  position: fixed;
  top: 20px;
  right: 20px;
  padding: 15px 25px;
  border-radius: 10px;
  background: white;
  color: #212529;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  z-index: 1000;
  animation: slideIn 0.3s ease-out;
}

.notification-info {
  border-left: 4px solid #2196f3;
}

.notification-error {
  border-left: 4px solid #dc3545;
}

.notification.fade-out {
  animation: fadeOut 0.5s ease-out forwards;
}

@keyframes slideIn {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes fadeOut {
  from {
    transform: translateX(0);
    opacity: 1;
  }
  to {
    transform: translateX(100%);
    opacity: 0;
  }
}

/* Responsive Adjustments */
@media (max-width: 768px) {
  .idea-container {
    padding: 20px;
    margin: 20px;
  }

  .idea-title {
    font-size: 2.5rem;
  }

  .idea-subtitle {
    font-size: 1.2rem;
  }

  .ideas-grid {
    grid-template-columns: 1fr;
  }

  .category-selector {
    flex-wrap: wrap;
  }

  .category-button {
    width: calc(50% - 10px);
  }
}

@media (max-width: 480px) {
  .idea-input-container {
    padding: 15px;
  }

  .category-button {
    width: 100%;
  }

  .input-header {
    flex-direction: column;
    gap: 10px;
    align-items: flex-start;
  }
}



================================================
File: src/pages/IdeaGeneration/IdeaGeneration.jsx
================================================
"use client"

import { useState, useEffect } from "react"
import axios from "axios"
import "./IdeaGeneration.css"

const PERPLEXITY_API_KEY = "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"

const IdeaGeneration = () => {
  const [userInput, setUserInput] = useState("")
  const [generatedIdeas, setGeneratedIdeas] = useState([])
  const [loading, setLoading] = useState(false)
  const [category, setCategory] = useState("all")
  const [aiConfidence, setAiConfidence] = useState(0)
  const [copiedIdeas, setCopiedIdeas] = useState([])
  const [showTips, setShowTips] = useState(false)

  const categories = ["All Ideas", "Technology", "Business", "Creative", "Innovation", "SocialImpact"]

  const aiTips = [
    "Be specific with your problem statement",
    "Consider adding constraints",
    "Think about the end user",
    "Include market context if relevant",
    "Specify desired outcome",
  ]

  const generateIdeas = async () => {
    if (!userInput.trim()) {
      showNotification("Please enter a topic or problem to generate ideas!")
      return
    }

    setLoading(true)
    setAiConfidence(0)
    setGeneratedIdeas([])

    try {
      await simulateAIProgress()

      // Specific prompt based on selected category
      const categoryPrompt =
        category === "all"
          ? `Generate one innovative idea for each category: Technology, Business, Creative, Innovation, and Social Impact. 
           The ideas should be unique and relate to the broad topic: ${userInput}`
          : `Generate 5 innovative ideas specifically in the ${category} category related to: ${userInput}`

      try {
        const response = await axios.post(
          "https://api.perplexity.ai/chat/completions",
          {
            model: "sonar",
            messages: [
              {
                role: "system",
                content: "You are a creative idea generation assistant that provides innovative ideas in JSON format.",
              },
              {
                role: "user",
                content: `${categoryPrompt}
                
                Provide the response strictly as a valid JSON array with each idea having these properties:
                [
                  {
                    "text": "idea description",
                    "category": "Category Name",
                    "confidence": number between 70-100
                  }
                ]`,
              },
            ],
            temperature: 0.7,
            max_tokens: 500,
          },
          {
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${PERPLEXITY_API_KEY}`,
            },
          },
        )

        const responseText = response.data.choices?.[0]?.message?.content || "[]"

        const cleanedResponseText = responseText
          .replace(/```(json)?/g, "")
          .replace(/\n/g, "")
          .trim()

        let parsedIdeas = []
        try {
          parsedIdeas = JSON.parse(cleanedResponseText)
        } catch (parseError) {
          try {
            parsedIdeas = JSON.parse(`[${cleanedResponseText}]`)
          } catch (secondParseError) {
            console.error("Failed to parse AI response:", parseError)
            console.error("Raw response:", responseText)
            showNotification("Error parsing AI response", "error")
            throw secondParseError
          }
        }

        const formattedIdeas = parsedIdeas.map((idea) => ({
          id: Math.random().toString(36).substr(2, 9),
          text: idea.text,
          category: category === "all" ? idea.category : category.charAt(0).toUpperCase() + category.slice(1),
          timestamp: new Date().toISOString(),
          confidence: idea.confidence || Math.floor(Math.random() * 30) + 70,
        }))

        setGeneratedIdeas(formattedIdeas)
        setAiConfidence(85)
      } catch (apiError) {
        console.error("API generation failed:", apiError)
        showNotification("Failed to generate ideas", "error")
      }
    } catch (error) {
      console.error("Error generating ideas:", error)
      showNotification("Something went wrong!", "error")
    }

    setLoading(false)
  }

  const simulateAIProgress = async () => {
    for (let i = 0; i <= 100; i += 20) {
      setAiConfidence(i)
      await new Promise((resolve) => setTimeout(resolve, 400))
    }
  }

  const copyIdea = (idea) => {
    // Copy to clipboard
    navigator.clipboard
      .writeText(`${idea.category} Idea (${idea.confidence}% Match):\n${idea.text}`)
      .then(() => {
        // Add to copied ideas to show visual feedback
        if (!copiedIdeas.some((copied) => copied.id === idea.id)) {
          setCopiedIdeas((prev) => [...prev, idea])
          showNotification("Idea copied to clipboard!")
        }
      })
      .catch((err) => {
        console.error("Failed to copy:", err)
        showNotification("Failed to copy idea", "error")
      })
  }

  const showNotification = (message, type = "info") => {
    const notification = document.createElement("div")
    notification.className = `notification notification-${type}`
    notification.textContent = message
    document.body.appendChild(notification)

    setTimeout(() => {
      notification.classList.add("fade-out")
      setTimeout(() => document.body.removeChild(notification), 500)
    }, 3000)
  }

  useEffect(() => {
    setAiConfidence(100)
  }, [])

  return (
    <div className="idea-container">
      <div className="idea-header">
        <h1 className="idea-title">
          <span className="idea-title-gradient">AI-Powered</span> Idea Generator
        </h1>
        <p className="idea-subtitle">Transform your challenges into opportunities with advanced AI assistance</p>
        <div className="ai-status">
          <div className="ai-confidence">
            <div className="confidence-bar" style={{ width: `${aiConfidence}%` }}></div>
          </div>
          <span className="ai-status-text">AI System Confidence: {aiConfidence}%</span>
        </div>
      </div>

      <div className="category-selector">
        {categories.map((cat) => (
          <button
            key={cat}
            className={`category-button ${category === cat.toLowerCase() ? "active" : ""}`}
            onClick={() => setCategory(cat.toLowerCase())}
          >
            {cat}
          </button>
        ))}
      </div>

      <div className="idea-input-container">
        <div className="input-header">
          <h3>Describe Your Challenge</h3>
          <button className="tips-toggle" onClick={() => setShowTips(!showTips)}>
            {showTips ? "Hide Tips" : "Show AI Tips"}
          </button>
        </div>

        {showTips && (
          <div className="ai-tips">
            {aiTips.map((tip, index) => (
              <div key={index} className="tip-item">
                <span className="tip-number">{index + 1}</span>
                {tip}
              </div>
            ))}
          </div>
        )}

        <textarea
          className="idea-input"
          placeholder="Describe your topic or problem in detail..."
          value={userInput}
          onChange={(e) => setUserInput(e.target.value)}
        ></textarea>

        <button className={`generate-button ${loading ? "loading" : ""}`} onClick={generateIdeas} disabled={loading}>
          {loading ? (
            <span className="loading-text">
              <span className="dot">.</span>
              <span className="dot">.</span>
              <span className="dot">.</span>
            </span>
          ) : (
            "Generate Ideas"
          )}
        </button>
      </div>

      {generatedIdeas.length > 0 && (
        <div className="idea-results">
          <h2 className="results-title">Generated Ideas</h2>
          <div className="ideas-grid">
            {generatedIdeas.map((idea) => (
              <div key={idea.id} className="idea-card">
                <div className="idea-card-header">
                  <span className="idea-category">{idea.category}</span>
                  <span className="idea-confidence">{idea.confidence}% Match</span>
                </div>
                <p className="idea-text">{idea.text}</p>
                <div className="idea-card-footer">
                  <button
                    className="copy-button"
                    onClick={() => copyIdea(idea)}
                    disabled={copiedIdeas.some((copied) => copied.id === idea.id)}
                  >
                    {copiedIdeas.some((copied) => copied.id === idea.id) ? "Copied" : "Copy Idea"}
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  )
}

export default IdeaGeneration



================================================
File: src/pages/Profile/Profile.css
================================================
@import url("https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&family=Inter:wght@300;400;500;600;700&display=swap");

/* Global Styles */
body {
  font-family: "Inter", sans-serif;
  background-color: #f9f9f7;
  color: #2d3142;
  margin: 0;
  padding: 0;
  line-height: 1.7;
  scroll-behavior: smooth;
}

/* Profile Container */
.pro-profile-container {
  max-width: 1500px;
  margin: 0rem auto;
  background: #ffffff;
  border-radius: 12px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05), 0 1px 3px rgba(0, 0, 0, 0.03);
  overflow: hidden;
  padding: 50px 70px;
  position: relative;
  transition: all 0.4s ease;
  border: 1px solid rgba(0, 0, 0, 0.05);
}

.pro-profile-container:hover {
  transform: translateY(-5px);
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.08), 0 1px 5px rgba(0, 0, 0, 0.03);
}

.pro-profile-container.pro-dark {
  background-color: #1a202c;
  color: #f7fafc;
  box-shadow: 0 25px 60px rgba(0, 0, 0, 0.3);
  border: 1px solid rgba(255, 255, 255, 0.05);
}

/* Header Styles */
.pro-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 35px;
  padding-bottom: 25px;
  border-bottom: 1px solid rgba(0, 0, 0, 0.06);
}

/* Button Styles */
.pro-toggle-btn,
.pro-edit-btn,
.pro-add-btn,
.pro-delete-btn,
.pro-delete-btns {
  padding: 0.9rem 1.6rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.8px;
  transition: all 0.3s ease;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  font-size: 0.85rem;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
}

.pro-toggle-btn,
.pro-delete-btns {
  background-color: #2d3142;
  color: white;
}

.pro-toggle-btn:hover {
  background-color: #3d4263;
  transform: translateY(-2px);
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.12);
}

.pro-edit-btn {
  background-color: #4a5568;
  color: white;
  margin-top: 10px;
  border: 1px solid #2d3748;
}

.pro-edit-btn:hover {
  background-color: #2d3748;
  transform: translateY(-2px);
}

.pro-add-btn {
  background-color: #3d5a80;
  color: white;
  border: none;
}

.pro-add-btn:hover {
  background-color: #2c4a6b;
  transform: translateY(-2px);
}

.pro-delete-btn {
  background-color: #a0aec0;
  color: #1a202c;
  margin-top: 10px;
  font-size: 0.85rem;
}

.pro-delete-btn:hover {
  background-color: #cbd5e0;
  transform: translateY(-2px);
}

/* Profile Header */
.pro-profile-header {
  display: flex;
  align-items: flex-start;
  gap: 3.5rem;
  margin-bottom: 3rem;
  padding: 35px;
  background: linear-gradient(135deg, rgba(61, 90, 128, 0.03), rgba(98, 125, 152, 0.02));
  border-radius: 10px;
  border: 1px solid rgba(0, 0, 0, 0.03);
}

.pro-image-container {
  flex-shrink: 0;
}

.pro-profile-image {
  width: 220px;
  height: 220px;
  object-fit: cover;
  border-radius: 10px;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08), 0 2px 5px rgba(0, 0, 0, 0.05);
  transition: all 0.4s ease;
  border: 3px solid #fff;
}

.pro-profile-image:hover {
  transform: scale(1.02);
  box-shadow: 0 15px 35px rgba(0, 0, 0, 0.12);
}

/* Typography Enhancements */
h1, h2, h3, h4, h5, h6 {
  font-family: "Playfair Display", serif;
  letter-spacing: -0.02em;
  color: #2d3142;
}

h1 {
  font-size: 2.5rem;
  margin-bottom: 0.5rem;
}

h2 {
  font-size: 1.8rem;
  margin-bottom: 1.2rem;
  position: relative;
  padding-bottom: 0.8rem;
}

h2:after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  width: 60px;
  height: 3px;
  background: linear-gradient(to right, #3d5a80, #98c1d9);
  border-radius: 2px;
}

/* Input Styles */
.pro-input,
.pro-textarea {
  width: 100%;
  padding: 14px 18px;
  margin-bottom: 18px;
  border: 1px solid #e2e8f0;
  border-radius: 6px;
  font-size: 1rem;
  background-color: #f8fafc;
  transition: all 0.3s ease;
  font-family: "Inter", sans-serif;
  box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.05);
}

.pro-input:focus,
.pro-textarea:focus {
  outline: none;
  border-color: #3d5a80;
  box-shadow: 0 0 0 3px rgba(61, 90, 128, 0.15);
}

/* Skills Styles */
.pro-skills-list,
.pro-projects-list {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 2rem;
}

.pro-skill,
.pro-project {
  background-color: #fbfcfd;
  border-radius: 8px;
  padding: 28px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.03), 0 1px 2px rgba(0, 0, 0, 0.02);
  transition: all 0.4s ease;
  position: relative;
  border: 1px solid #edf2f7;
}

.pro-skill:hover,
.pro-project:hover {
  transform: translateY(-6px);
  box-shadow: 0 12px 25px rgba(0, 0, 0, 0.06), 0 1px 3px rgba(0, 0, 0, 0.03);
}

.pro-progress-bar {
  height: 10px;
  background-color: #e9ecef;
  border-radius: 5px;
  overflow: hidden;
  margin-top: 15px;
}

.pro-progress-bar-fill {
  height: 100%;
  background: linear-gradient(to right, #3d5a80, #98c1d9);
  transition: width 0.6s cubic-bezier(0.25, 0.1, 0.25, 1);
}

/* Project Styles */
.pro-section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
  padding-bottom: 15px;
  border-bottom: 1px solid rgba(0, 0, 0, 0.06);
}

.pro-project-technologies {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin-top: 15px;
}

.pro-tech-badge {
  background-color: #f0f4f8;
  color: #3d5a80;
  padding: 6px 14px;
  border-radius: 4px;
  font-size: 0.8rem;
  font-weight: 500;
  border: 1px solid #e2e8f0;
  transition: all 0.3s ease;
}

.pro-tech-badge:hover {
  background-color: #e2eaf2;
  border-color: #cbd5e0;
}

/* Contact Link Styles */
.pro-contact-link {
  color: #3d5a80;
  text-decoration: none;
  margin-right: 18px;
  transition: all 0.3s ease;
  display: inline-flex;
  align-items: center;
  gap: 8px;
  font-weight: 500;
  position: relative;
}

.pro-contact-link:after {
  content: "";
  position: absolute;
  bottom: -3px;
  left: 0;
  width: 0;
  height: 2px;
  background-color: #3d5a80;
  transition: width 0.3s ease;
}

.pro-contact-link:hover {
  color: #2c4a6b;
}

.pro-contact-link:hover:after {
  width: 100%;
}

/* Responsive Design */
@media (max-width: 768px) {
  .pro-profile-container {
    padding: 30px;
    margin: 1rem;
  }

  .pro-profile-header {
    flex-direction: column;
    text-align: center;
    align-items: center;
    gap: 1.5rem;
    padding: 25px;
  }

  .pro-image-container img {
    width: 180px;
    height: 180px;
  }

  h2:after {
    left: 50%;
    transform: translateX(-50%);
  }

  .pro-skills-list,
  .pro-projects-list {
    grid-template-columns: 1fr;
  }

  .pro-section-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
  }

  .pro-toggle-btn,
  .pro-edit-btn,
  .pro-add-btn,
  .pro-delete-btn {
    width: 100%;
    margin: 10px 0;
  }
}

/* Print Styles */
@media print {
  .pro-header,
  .pro-toggle-btn,
  .pro-edit-btn,
  .pro-add-btn,
  .pro-delete-btn {
    display: none;
  }

  .pro-profile-container {
    box-shadow: none;
    border: 1px solid #e5e7eb;
    padding: 20px;
    margin: 0;
  }
  
  .pro-profile-header {
    background: none;
    padding: 0;
    border: none;
  }
}

/* Skill Edit Styles */
.pro-skill-edit {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.pro-skill-range {
  width: 100%;
  margin-bottom: 15px;
  -webkit-appearance: none;
  height: 8px;
  border-radius: 4px;
  background: #e2e8f0;
  outline: none;
}

.pro-skill-range::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 18px;
  height: 18px;
  border-radius: 50%;
  background: #3d5a80;
  cursor: pointer;
  border: 2px solid #fff;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
}

/* Project Edit Styles */
.pro-project-edit {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.pro-tech-input {
  flex-grow: 1;
}

.pro-add-tech-btn {
  background-color: #3d5a80;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.3s ease;
  font-weight: 500;
}

.pro-add-tech-btn:hover {
  background-color: #2c4a6b;
  transform: translateY(-2px);
}


================================================
File: src/pages/Profile/Profile.jsx
================================================
import React, { useState, useEffect } from "react";
import "./Profile.css";
import { getUserData, setUserData } from "../../api/userApi";
import { auth } from "../../firebase";

const Profile = () => {
  const [darkMode, setDarkMode] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [profileData, setProfileData] = useState({
    name: "",
    title: "",
    email: "",
    phone: "",
    about: "",
    profileImage: null,
    skills: [],
    projects: [],
    socialMedia: [],
  });

  // Fetch user data from backend on mount
  useEffect(() => {
    const fetchUserData = async () => {
      if (auth.currentUser) {
        const uid = auth.currentUser.uid;
        try {
          const data = await getUserData(uid);
          setProfileData(data);
        } catch (error) {
          console.error("Failed to fetch user data:", error);
        }
      }
    };
    fetchUserData();
  }, []);

  // Save user data to backend when editing is toggled off
  useEffect(() => {
    const saveUserData = async () => {
      if (!isEditing && auth.currentUser) {
        const uid = auth.currentUser.uid;
        try {
          await setUserData(uid, profileData);
        } catch (error) {
          console.error("Failed to save user data:", error);
        }
      }
    };
    saveUserData();
  }, [isEditing, profileData]);

  const toggleDarkMode = () => {
    setDarkMode(!darkMode);
    document.body.classList.toggle("pro-dark-mode");
  };

  const handleEditToggle = () => {
    setIsEditing(!isEditing);
  };

  const handleInputChange = (field, value) => {
    setProfileData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const handleSkillChange = (index, field, value) => {
    const updatedSkills = [...profileData.skills];
    updatedSkills[index] = { ...updatedSkills[index], [field]: value };
    setProfileData((prev) => ({
      ...prev,
      skills: updatedSkills,
    }));
  };

  const addSkill = () => {
    const newSkill = {
      id: Date.now(),
      name: "",
      level: 50,
    };
    setProfileData((prev) => ({
      ...prev,
      skills: [...prev.skills, newSkill],
    }));
  };

  const deleteSkill = (id) => {
    setProfileData((prev) => ({
      ...prev,
      skills: prev.skills.filter((skill) => skill.id !== id),
    }));
  };

  const handleProjectChange = (index, field, value) => {
    const updatedProjects = [...profileData.projects];
    updatedProjects[index] = { ...updatedProjects[index], [field]: value };
    setProfileData((prev) => ({
      ...prev,
      projects: updatedProjects,
    }));
  };

  const addProject = () => {
    const newProject = {
      id: Date.now(),
      title: "",
      description: "",
      technologies: [],
    };
    setProfileData((prev) => ({
      ...prev,
      projects: [...prev.projects, newProject],
    }));
  };

  const deleteProject = (id) => {
    setProfileData((prev) => ({
      ...prev,
      projects: prev.projects.filter((project) => project.id !== id),
    }));
  };

  const handleProfileImageUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setProfileData((prev) => ({
          ...prev,
          profileImage: reader.result,
        }));
      };
      reader.readAsDataURL(file);
    }
  };

  const addSocialMedia = () => {
    const newSocialMedia = {
      id: Date.now(),
      platform: "",
      url: "",
      icon: "",
    };
    setProfileData((prev) => ({
      ...prev,
      socialMedia: [...prev.socialMedia, newSocialMedia],
    }));
  };

  const handleSocialMediaChange = (index, field, value) => {
    const updatedSocialMedia = [...profileData.socialMedia];
    updatedSocialMedia[index] = {
      ...updatedSocialMedia[index],
      [field]: value,
    };
    setProfileData((prev) => ({
      ...prev,
      socialMedia: updatedSocialMedia,
    }));
  };

  const deleteSocialMedia = (id) => {
    setProfileData((prev) => ({
      ...prev,
      socialMedia: prev.socialMedia.filter((social) => social.id !== id),
    }));
  };

  const renderSkillProgressBar = (skill, index) => {
    return (
      <div className="pro-skill" key={skill.id}>
        {isEditing ? (
          <div className="pro-skill-edit">
            <input
              type="text"
              value={skill.name}
              onChange={(e) => handleSkillChange(index, "name", e.target.value)}
              className="pro-input pro-skill-name"
              placeholder="Skill Name"
            />
            <input
              type="range"
              min="0"
              max="100"
              value={skill.level}
              onChange={(e) =>
                handleSkillChange(index, "level", parseInt(e.target.value))
              }
              className="pro-skill-range"
            />
            <button
              onClick={() => deleteSkill(skill.id)}
              className="pro-delete-btn"
            >
              Delete
            </button>
          </div>
        ) : (
          <>
            <div className="pro-skill-header">
              <label>{skill.name}</label>
              <span className="pro-skill-percentage">{skill.level}%</span>
            </div>
            <div className="pro-progress-bar">
              <div
                className="pro-progress-bar-fill"
                style={{ width: `${skill.level}%` }}
              ></div>
            </div>
          </>
        )}
      </div>
    );
  };

  return (
    <div className={`pro-profile-container ${darkMode ? "pro-dark" : ""}`}>
      <div className="pro-header">
        <div className="pro-theme-toggle">
          <button onClick={toggleDarkMode} className="pro-toggle-btn">
            {darkMode ? "Light Mode" : "Dark Mode"}
          </button>
        </div>
      </div>

      <div className="pro-profile-header">
        <div className="pro-image-container">
          {isEditing ? (
            <input
              type="file"
              accept="image/*"
              onChange={handleProfileImageUpload}
              className="pro-file-input"
            />
          ) : (
            <img
              src={
                profileData.profileImage || "https://via.placeholder.com/250"
              }
              alt="Profile"
              className="pro-profile-image"
            />
          )}
        </div>
        <div className="pro-info">
          {isEditing ? (
            <>
              <input
                type="text"
                className="pro-input"
                value={profileData.name}
                onChange={(e) => handleInputChange("name", e.target.value)}
                placeholder="Name"
              />
              <input
                type="text"
                className="pro-input"
                value={profileData.title}
                onChange={(e) => handleInputChange("title", e.target.value)}
                placeholder="Professional Title"
              />
            </>
          ) : (
            <>
              <h1 className="pro-name">{profileData.name}</h1>
              <p className="pro-title">{profileData.title}</p>
            </>
          )}
          <div className="pro-contact-info">
            {isEditing ? (
              <>
                <input
                  type="email"
                  className="pro-input"
                  value={profileData.email}
                  onChange={(e) => handleInputChange("email", e.target.value)}
                  placeholder="Email"
                />
                <input
                  type="tel"
                  className="pro-input"
                  value={profileData.phone}
                  onChange={(e) => handleInputChange("phone", e.target.value)}
                  placeholder="Phone"
                />
              </>
            ) : (
              <>
                {profileData.email && (
                  <a
                    href={`mailto:${profileData.email}`}
                    className="pro-contact-link"
                  >
                    <i className="fas fa-envelope"></i> {profileData.email}
                  </a>
                )}
                {profileData.phone && (
                  <a
                    href={`tel:${profileData.phone}`}
                    className="pro-contact-link"
                  >
                    <i className="fas fa-phone-alt"></i> {profileData.phone}
                  </a>
                )}
              </>
            )}
          </div>
          <button onClick={handleEditToggle} className="pro-edit-btn">
            {isEditing ? "Save Changes" : "Edit Profile"}
          </button>
        </div>
      </div>

      <div className="pro-profile-content">
        <section className="pro-about">
          <h2>About Me</h2>
          {isEditing ? (
            <textarea
              className="pro-input pro-textarea"
              value={profileData.about}
              onChange={(e) => handleInputChange("about", e.target.value)}
              placeholder="About Me"
            />
          ) : (
            profileData.about && <p>{profileData.about}</p>
          )}
        </section>

        <section className="pro-skills">
          <div className="pro-section-header">
            <h2>Skills</h2>
            {isEditing && (
              <button onClick={addSkill} className="pro-add-btn">
                Add Skill
              </button>
            )}
          </div>
          <div className="pro-skills-list">
            {profileData.skills.map(renderSkillProgressBar)}
          </div>
        </section>

        <section className="pro-projects">
          <div className="pro-section-header">
            <h2>Projects</h2>
            {isEditing && (
              <button onClick={addProject} className="pro-add-btn">
                Add Project
              </button>
            )}
          </div>
          <div className="pro-projects-list">
            {profileData.projects.map((project, index) => (
              <div className="pro-project" key={project.id}>
                {isEditing ? (
                  <div className="pro-project-edit">
                    <input
                      type="text"
                      className="pro-input"
                      value={project.title}
                      onChange={(e) =>
                        handleProjectChange(index, "title", e.target.value)
                      }
                      placeholder="Project Title"
                    />
                    <textarea
                      className="pro-input pro-textarea"
                      value={project.description}
                      onChange={(e) =>
                        handleProjectChange(
                          index,
                          "description",
                          e.target.value
                        )
                      }
                      placeholder="Project Description"
                    />
                    <div className="pro-project-technologies">
                      {project.technologies.map((tech, techIndex) => (
                        <input
                          key={techIndex}
                          type="text"
                          className="pro-input pro-tech-input"
                          value={tech}
                          onChange={(e) => {
                            const updatedTechs = [...project.technologies];
                            updatedTechs[techIndex] = e.target.value;
                            handleProjectChange(
                              index,
                              "technologies",
                              updatedTechs
                            );
                          }}
                          placeholder="Technology"
                        />
                      ))}
                      <button
                        onClick={() => {
                          const updatedTechs = [...project.technologies, ""];
                          handleProjectChange(
                            index,
                            "technologies",
                            updatedTechs
                          );
                        }}
                        className="pro-add-tech-btn"
                      >
                        Add Tech
                      </button>
                    </div>
                    <button
                      onClick={() => deleteProject(project.id)}
                      className="pro-delete-btns"
                    >
                      Delete Project
                    </button>
                  </div>
                ) : (
                  <>
                    {project.title && <h3>{project.title}</h3>}
                    {project.description && <p>{project.description}</p>}
                    {project.technologies.length > 0 && (
                      <div className="pro-project-technologies">
                        {project.technologies.map((tech) => (
                          <span key={tech} className="pro-tech-badge">
                            {tech}
                          </span>
                        ))}
                      </div>
                    )}
                  </>
                )}
              </div>
            ))}
          </div>
        </section>

        <section className="pro-social-media">
          <div className="pro-section-header">
            <h2>Social Media</h2>
            {isEditing && (
              <button onClick={addSocialMedia} className="pro-add-btn">
                Add Social Media
              </button>
            )}
          </div>
          <div className="pro-social-media-list">
            {profileData.socialMedia.map((social, index) => (
              <div className="pro-social-media-item" key={social.id}>
                {isEditing ? (
                  <div className="pro-social-media-edit">
                    <input
                      type="text"
                      className="pro-input"
                      value={social.platform}
                      onChange={(e) =>
                        handleSocialMediaChange(
                          index,
                          "platform",
                          e.target.value
                        )
                      }
                      placeholder="Platform"
                    />
                    <input
                      type="text"
                      className="pro-input"
                      value={social.url}
                      onChange={(e) =>
                        handleSocialMediaChange(index, "url", e.target.value)
                      }
                      placeholder="URL"
                    />
                    <input
                      type="text"
                      className="pro-input"
                      value={social.icon}
                      onChange={(e) =>
                        handleSocialMediaChange(index, "icon", e.target.value)
                      }
                      placeholder="Icon Class"
                    />
                    <button
                      onClick={() => deleteSocialMedia(social.id)}
                      className="pro-delete-btn"
                    >
                      Delete
                    </button>
                  </div>
                ) : (
                  social.url && (
                    <a
                      href={social.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="pro-social-media-link"
                    >
                      {social.icon && <i className={social.icon}></i>}
                      {social.platform}
                    </a>
                  )
                )}
              </div>
            ))}
          </div>
        </section>
      </div>
    </div>
  );
};

export default Profile;



================================================
File: src/pages/Projects/Projects.css
================================================
/* Base styles and CSS variables */
:root {
  --primary: #2563eb;
  --primary-hover: #1d4ed8;
  --success: #059669;
  --danger: #dc2626;
  --background-light: #f8fafc;
  --background-dark: #0f172a;
  --card-light: #ffffff;
  --card-dark: #1e293b;
  --text-light: #0f172a;
  --text-dark: #f8fafc;
  --text-muted-light: #64748b;
  --text-muted-dark: #94a3b8;
  --border-light: #e2e8f0;
  --border-dark: #334155;
  --shadow-light: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
    0 2px 4px -1px rgba(0, 0, 0, 0.06);
  --shadow-dark: 0 4px 6px -1px rgba(0, 0, 0, 0.2),
    0 2px 4px -1px rgba(0, 0, 0, 0.1);
}

/* Container styles */
.projects-container {
  max-width: 1440px;
  margin: 0 auto;
  padding: 2.5rem 2rem;
}

/* Header styles */
.projects-header {
  text-align: center;
  margin-bottom: 3rem;
}

.projects-header h1 {
  font-size: 2.5rem;
  font-weight: 700;
  margin-bottom: 1rem;
  background: linear-gradient(135deg, var(--primary) 0%, #4f46e5 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

.projects-header p {
  font-size: 1.125rem;
  color: var(--text-muted-light);
  max-width: 600px;
  margin: 0 auto;
}

.dark-mode .projects-header p {
  color: var(--text-muted-dark);
}

/* Toolbar styles */
.projects-toolbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  flex-wrap: wrap;
  gap: 1rem;
}

.search-box {
  position: relative;
  width: 350px;
}

.search-box input {
  width: 100%;
  padding: 0.875rem 1rem 0.875rem 2.75rem;
  border-radius: 0.75rem;
  border: 2px solid var(--border-light);
  font-size: 1rem;
  background-color: var(--card-light);
  color: var(--text-light);
  transition: all 0.3s ease;
}

.search-box input:focus {
  outline: none;
  border-color: var(--primary);
  box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
}

.dark-mode .search-box input {
  background-color: var(--card-dark);
  color: var(--text-dark);
  border-color: var(--border-dark);
}

.search-icon {
  position: absolute;
  top: 50%;
  left: 1rem;
  transform: translateY(-50%);
  color: var(--text-muted-light);
  pointer-events: none;
}

.dark-mode .search-icon {
  color: var(--text-muted-dark);
}

/* Button styles */
.add-project-btn,
.toggle-theme-btn {
  background-color: var(--primary);
  color: white;
  border: none;
  padding: 0.875rem 1.5rem;
  border-radius: 0.75rem;
  cursor: pointer;
  font-weight: 500;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  transition: all 0.3s ease;
  box-shadow: 0 2px 4px rgba(37, 99, 235, 0.1);
}

.add-project-btn:hover,
.toggle-theme-btn:hover {
  background-color: var(--primary-hover);
  transform: translateY(-1px);
  box-shadow: 0 4px 6px rgba(37, 99, 235, 0.2);
}

.toggle-theme-btn {
  padding: 0.875rem;
}

/* Projects grid */
.projects-list {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
  gap: 2rem;
}

/* Project card styles */
.project-card {
  background-color: var(--card-light);
  border-radius: 1rem;
  padding: 1.75rem;
  box-shadow: var(--shadow-light);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  border: 1px solid var(--border-light);
}

.dark-mode .project-card {
  background-color: var(--card-dark);
  box-shadow: var(--shadow-dark);
  border-color: var(--border-dark);
}

.project-card:hover {
  transform: translateY(0px);
  /* box-shadow: 0 12px 20px -8px rgba(0, 0, 0, 0.15); */
}

.dark-mode .project-card:hover {
  box-shadow: 0 12px 20px -8px rgba(0, 0, 0, 0.3);
}

/* Project header styles */
.project-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.25rem;
}

.project-header h3 {
  font-size: 1.25rem;
  font-weight: 600;
  /* color: var(--text-light); */
}

.dark-mode .project-header h3 {
  /* color: var(--text-dark); */
}

/* Status badge styles */
.status {
  padding: 0.375rem 0.6rem;
  border-radius: 2rem;
  font-size: 0.875rem;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.025em;
}

.status.ongoing {
  background-color: rgba(220, 38, 38, 0.1);
  color: #ef4444;
}

.status.completed {
  background-color: rgba(5, 150, 105, 0.1);
  color: #10b981;
}

/* Progress bar styles */
.progress-bar {
  background-color: var(--border-light);
  height: 8px;
  border-radius: 1rem;
  overflow: hidden;
  margin: 1rem 0;
}

.dark-mode .progress-bar {
  background-color: var(--border-dark);
}

.progress {
  height: 100%;
  background: linear-gradient(135deg, var(--primary) 0%, #4f46e5 100%);
  transition: width 0.3s ease;
}

/* Team info styles */
.team-info h4 {
  font-size: 1rem;
  font-weight: 600;
  /* color: var(--text-light); */
  margin-bottom: 0.75rem;
}

.dark-mode .team-info h4 {
  color: var(--text-dark);
}

.team-info ul {
  list-style: none;
  padding: 0;
  display: flex;
  flex-wrap: wrap;
  gap: 0.75rem;
}

.team-info li {
  background-color: var(--background-light);
  padding: 0.5rem 1rem;
  border-radius: 0.75rem;
  font-size: 0.875rem;
  font-weight: 500;
  border: 1px solid var(--border-light);
}

.dark-mode .team-info li {
  background-color: var(--card-dark);
  border-color: var(--border-dark);
}

/* Action buttons */
.project-actions {
  display: flex;
  justify-content: space-between;
  margin-top: 1.5rem;
  padding-top: 1.5rem;
  border-top: 1px solid var(--border-light);
}

.dark-mode .project-actions {
  border-top-color: var(--border-dark);
}

.action-btn {
  background-color: transparent;
  border: none;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 1rem;
  border-radius: 0.5rem;
  transition: all 0.3s ease;
}

.edit-btn {
  color: var(--primary);
}

.edit-btn:hover {
  background-color: rgba(37, 99, 235, 0.1);
}

.delete-btn {
  color: var(--danger);
}

.delete-btn:hover {
  background-color: rgba(220, 38, 38, 0.1);
}

/* Modal styles */
.modal-backdrop {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  backdrop-filter: blur(4px);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
  opacity: 0;
  animation: fadeIn 0.3s ease forwards;
}

.modal-content {
  background-color: var(--card-light);
  border-radius: 1rem;
  padding: 2.5rem;
  width: 90%;
  max-width: 550px;
  max-height: 85vh;
  overflow-y: auto;
  box-shadow: var(--shadow-light);
  transform: scale(0.95);
  opacity: 0;
  animation: modalEnter 0.3s ease forwards 0.1s;
}

.dark-mode .modal-content {
  background-color: var(--card-dark);
  box-shadow: var(--shadow-dark);
}

.modal-content h2 {
  font-size: 1.5rem;
  font-weight: 600;
  margin-bottom: 2rem;
  color: var(--text-light);
}

.dark-mode .modal-content h2 {
  color: var(--text-dark);
}

/* Form styles */
.form-group {
  margin-bottom: 1.5rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  color: var(--text-light);
}

.dark-mode .form-group label {
  color: var(--text-dark);
}

.form-group input,
.form-group select {
  width: 95%;
  padding: 0.875rem;
  border-radius: 0.75rem;
  border: 2px solid var(--border-light);
  font-size: 1rem;
  background-color: var(--card-light);
  color: var(--text-light);
  transition: all 0.3s ease;
}

.dark-mode .form-group input,
.dark-mode .form-group select {
  background-color: var(--card-dark);
  color: var(--text-dark);
  border-color: var(--border-dark);
}

.form-group input:focus,
.form-group select:focus {
  outline: none;
  border-color: var(--primary);
  box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
}

/* Modal buttons */
.modal-actions {
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
  margin-top: 2.5rem;
}

.btn {
  padding: 0.875rem 1.75rem;
  border-radius: 0.75rem;
  font-size: 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
}

.cancel-btn {
  background-color: var(--border-light);
  color: var(--text-light);
}

.dark-mode .cancel-btn {
  background-color: var(--border-dark);
  color: var(--text-dark);
}

.cancel-btn:hover {
  background-color: var(--text-muted-light);
  color: var(--card-light);
}

.save-btn {
  background-color: var(--primary);
  color: white;
}

.save-btn:hover {
  background-color: var(--primary-hover);
  transform: translateY(-1px);
  box-shadow: 0 4px 6px rgba(37, 99, 235, 0.2);
}

/* Animations */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes modalEnter {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

/* Scrollbar styles */
.modal-content::-webkit-scrollbar {
  width: 8px;
}

.modal-content::-webkit-scrollbar-track {
  background: var(--background-light);
  border-radius: 6px;
}

.dark-mode .modal-content::-webkit-scrollbar-track {
  background: var(--background-dark);
}

.modal-content::-webkit-scrollbar-thumb {
  background-color: var(--text-muted-light);
  border-radius: 6px;
}

.modal-content::-webkit-scrollbar-thumb:hover {
  background-color: var(--text-muted-dark);
}

/* Team input styles */
.team-input {
  display: flex;
  gap: 0.5rem;
  margin-bottom: 1rem;
}

.team-input input {
  flex: 1;
}

.add-team-member-btn {
  background-color: var(--primary);
  color: white;
  border: none;
  padding: 0.875rem 1.5rem;
  border-radius: 0.75rem;
  cursor: pointer;
  font-weight: 500;
  transition: all 0.3s ease;
}

.add-team-member-btn:hover {
  background-color: var(--primary-hover);
  transform: translateY(-1px);
  box-shadow: 0 4px 6px rgba(37, 99, 235, 0.2);
}

/* Team list styles */
.team-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

.team-list li {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.5rem;
  margin-bottom: 0.5rem;
  background-color: var(--background-light);
  border-radius: 0.5rem;
  border: 1px solid var(--border-light);
}

.dark-mode .team-list li {
  background-color: var(--card-dark);
  border-color: var(--border-dark);
}

.remove-team-member-btn {
  background-color: transparent;
  border: none;
  color: var(--danger);
  cursor: pointer;
  padding: 0.25rem 0.5rem;
  border-radius: 0.25rem;
  font-size: 0.875rem;
  transition: all 0.3s ease;
}

.remove-team-member-btn:hover {
  background-color: rgba(220, 38, 38, 0.1);
}

/* Submit button styles */
.submit-btn {
  background-color: var(--success);
  color: white;
  border: none;
}

.submit-btn:hover {
  background-color: #047857;
  transform: translateY(-1px);
  box-shadow: 0 4px 6px rgba(5, 150, 105, 0.2);
}

/* Toolbar actions styles */
.toolbar-actions {
  display: flex;
  gap: 1rem;
  align-items: center;
}

/* Responsive adjustments */
@media (max-width: 640px) {
  .team-input {
    flex-direction: column;
  }

  .add-team-member-btn {
    width: 100%;
  }

  .modal-content {
    padding: 1.5rem;
  }

  .modal-actions {
    flex-direction: column;
    gap: 0.5rem;
  }

  .modal-actions button {
    width: 100%;
  }
}



================================================
File: src/pages/Projects/Projects.jsx
================================================
import React, { useState, useEffect } from "react";
import "./Projects.css";
import { FiSearch } from "react-icons/fi";
import { AiOutlinePlus, AiOutlineEdit, AiOutlineDelete } from "react-icons/ai";

const Projects = () => {
  // Default projects to use if no localStorage data exists
  const defaultProjects = [
    {
      id: 1,
      name: "AI-Powered Team Communication Tool",
      status: "Ongoing",
      deadline: "2024-11-25",
      progress: 65,
      team: ["Aarav", "Diya", "Kabir"],
    },
    {
      id: 2,
      name: "Blockchain-Based Collaboration Suite",
      status: "Completed",
      deadline: "2024-09-15",
      progress: 100,
      team: ["Neha", "Rohan", "Ishaan"],
    },
    {
      id: 3,
      name: "Real-Time Project Tracking Dashboard",
      status: "Ongoing",
      deadline: "2024-12-01",
      progress: 45,
      team: ["Ananya", "Vikram", "Riya"],
    },
    {
      id: 4,
      name: "Next-Gen Task Management Tool",
      status: "Ongoing",
      deadline: "2024-10-15",
      progress: 30,
      team: ["Priya", "Kunal", "Sanya"],
    },
    {
      id: 5,
      name: "Secure Video Conferencing App",
      status: "Completed",
      deadline: "2024-08-30",
      progress: 100,
      team: ["Meera", "Arjun", "Tanvi"],
    },
    {
      id: 6,
      name: "Cloud-Based Document Collaboration",
      status: "Ongoing",
      deadline: "2024-12-20",
      progress: 50,
      team: ["Raj", "Pooja", "Akshay"],
    },
  ];

  // Initialize state with a function to safely retrieve from localStorage
  const [projects, setProjects] = useState(() => {
    try {
      // First, check if we're in a browser environment
      if (typeof window !== "undefined") {
        const savedProjects = localStorage.getItem("projectsData");

        // If savedProjects exists and is not an empty string, parse and return
        if (savedProjects && savedProjects !== "[]") {
          const parsedProjects = JSON.parse(savedProjects);
          return parsedProjects.length > 0 ? parsedProjects : defaultProjects;
        }
      }

      // If no saved projects or localStorage is not available, return default
      return defaultProjects;
    } catch (error) {
      console.error("Error reading localStorage:", error);
      return defaultProjects;
    }
  });

  const [searchTerm, setSearchTerm] = useState("");
  const [isEditing, setIsEditing] = useState(false);
  const [currentProject, setCurrentProject] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [newProject, setNewProject] = useState({
    id: null,
    name: "",
    status: "Ongoing",
    deadline: "",
    progress: 0,
    team: [],
  });
  const [newTeamMember, setNewTeamMember] = useState("");

  // Update localStorage whenever projects change
  useEffect(() => {
    try {
      // Ensure we're in a browser environment
      if (typeof window !== "undefined") {
        localStorage.setItem("projectsData", JSON.stringify(projects));
      }
    } catch (error) {
      console.error("Error saving to localStorage:", error);
    }
  }, [projects]);

  const handleSearch = (e) => {
    setSearchTerm(e.target.value);
  };

  const filteredProjects = projects.filter((project) =>
    project.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleAddProject = () => {
    setShowModal(true);
    setNewProject({
      id: Date.now(), // Unique ID using timestamp
      name: "",
      status: "Ongoing",
      deadline: "",
      progress: 0,
      team: [],
    });
    setNewTeamMember("");
    setIsEditing(false);
  };

  const handleEditProject = (project) => {
    setShowModal(true);
    setIsEditing(true);
    setCurrentProject(project.id);
    setNewProject({ ...project });
  };

  const handleSaveProject = () => {
    if (isEditing) {
      // Update existing project
      setProjects(
        projects.map((project) =>
          project.id === currentProject ? newProject : project
        )
      );
    } else {
      // Add new project
      setProjects([...projects, newProject]);
    }
    setShowModal(false);
  };

  const handleDeleteProject = (id) => {
    setProjects(projects.filter((project) => project.id !== id));
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewProject({
      ...newProject,
      [name]: value,
    });
  };

  const handleAddTeamMember = () => {
    if (newTeamMember && !newProject.team.includes(newTeamMember)) {
      setNewProject({
        ...newProject,
        team: [...newProject.team, newTeamMember],
      });
      setNewTeamMember("");
    }
  };

  const handleRemoveTeamMember = (member) => {
    setNewProject({
      ...newProject,
      team: newProject.team.filter((teamMember) => teamMember !== member),
    });
  };

  return (
    <div className="projects-container">
      <div className="projects-header">
        <h1>Projects Management</h1>
        <p>Manage your ongoing and completed projects in real-time.</p>
      </div>

      <div className="projects-toolbar">
        <div className="search-box">
          <input
            type="text"
            placeholder="Search Projects"
            value={searchTerm}
            onChange={handleSearch}
          />
          <FiSearch className="search-icon" />
        </div>
        <div className="toolbar-actions">
          <button className="add-project-btn" onClick={handleAddProject}>
            <AiOutlinePlus /> Add Project
          </button>
        </div>
      </div>

      <div className="projects-list">
        {filteredProjects.length > 0 ? (
          filteredProjects.map((project) => (
            <div className="project-card" key={project.id}>
              <div className="project-header">
                <h3>{project.name}</h3>
                <div className={`status ${project.status.toLowerCase()}`}>
                  {project.status}
                </div>
              </div>
              <div className="project-info">
                <p>Deadline: {project.deadline}</p>
                <div className="progress-bar">
                  <div
                    className="progress"
                    style={{ width: `${project.progress}%` }}
                  ></div>
                </div>
                <p>{project.progress}% Completed</p>
              </div>
              <div className="team-info">
                <h4>Team:</h4>
                <ul>
                  {project.team.map((member, index) => (
                    <li key={index}>{member}</li>
                  ))}
                </ul>
              </div>
              <div className="project-actions">
                <button
                  className="action-btn edit-btn"
                  onClick={() => handleEditProject(project)}
                >
                  <AiOutlineEdit /> Edit
                </button>
                <button
                  className="action-btn delete-btn"
                  onClick={() => handleDeleteProject(project.id)}
                >
                  <AiOutlineDelete /> Delete
                </button>
              </div>
            </div>
          ))
        ) : (
          <p>No projects found.</p>
        )}
      </div>

      {showModal && (
        <div className="modal-backdrop">
          <div className="modal-content">
            <h2>{isEditing ? "Edit Project" : "Add Project"}</h2>
            <div className="form-group">
              <label>Project Name</label>
              <input
                type="text"
                name="name"
                value={newProject.name}
                onChange={handleInputChange}
              />
            </div>
            <div className="form-group">
              <label>Status</label>
              <select
                name="status"
                value={newProject.status}
                onChange={handleInputChange}
              >
                <option value="Ongoing">Ongoing</option>
                <option value="Completed">Completed</option>
              </select>
            </div>
            <div className="form-group">
              <label>Deadline</label>
              <input
                type="date"
                name="deadline"
                value={newProject.deadline}
                onChange={handleInputChange}
              />
            </div>
            <div className="form-group">
              <label>Progress</label>
              <input
                type="number"
                name="progress"
                value={newProject.progress}
                onChange={handleInputChange}
                min="0"
                max="100"
              />
            </div>
            <div className="form-group">
              <label>Team Members</label>
              <div className="team-input">
                <input
                  type="text"
                  value={newTeamMember}
                  onChange={(e) => setNewTeamMember(e.target.value)}
                  placeholder="Add team member"
                />
                <button
                  className="add-team-member-btn"
                  onClick={handleAddTeamMember}
                >
                  Add
                </button>
              </div>
              <ul className="team-list">
                {newProject.team.map((member, index) => (
                  <li key={index}>
                    {member}{" "}
                    <button
                      className="remove-team-member-btn"
                      onClick={() => handleRemoveTeamMember(member)}
                    >
                      Remove
                    </button>
                  </li>
                ))}
              </ul>
            </div>
            <div className="modal-actions">
              <button
                className="btn cancel-btn"
                onClick={() => setShowModal(false)}
              >
                Cancel
              </button>
              <button className="btn submit-btn" onClick={handleSaveProject}>
                {isEditing ? "Save Changes" : "Add Project"}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Projects;



================================================
File: src/pages/Prompts/Prompts.css
================================================
:root {
  /* Enhanced color palette with more contrast and accessibility */
  --primary-color: #3a7ca5;
  --secondary-color: #39b4a6;
  --background-color: #f0f4f8;
  --text-color-dark: #1a2b3c;
  --text-color-light: #4a5567;
  --accent-color: #e74c3c;
  --accent-color-hover: #c0392b;
  --border-color: #e1e8ed;
  --box-shadow-color: rgba(0, 0, 0, 0.1);
}

/* Improved global reset and base styles */

.prompt-forge-container {
  max-width: 1500px;
  margin: 0px auto;
  background-color: white;
  border-radius: 12px;
  box-shadow: 0 12px 36px var(--box-shadow-color);
  padding: 35px;
  transition: all 0.4s cubic-bezier(0.25, 0.1, 0.25, 1);
}

.prompt-forge-container:hover {
  box-shadow: 0 18px 48px rgba(0, 0, 0, 0.12);
  transform: translateY(0px);
}

.prompt-forge-header {
  text-align: center;
  margin-bottom: 35px;
}

.prompt-forge-header h1 {
  font-size: 2.75rem;
  font-weight: 700;
  color: var(--text-color-dark);
  margin-bottom: 15px;
}

.gradient-text {
  background: linear-gradient(
    135deg,
    var(--primary-color),
    var(--secondary-color)
  );
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.prompt-forge-header p {
  color: var(--text-color-light);
  font-size: 1.1rem;
  max-width: 700px;
  margin: 0 auto;
}

.prompt-input-section {
  margin-bottom: 35px;
}

.input-wrapper {
  display: flex;
  gap: 15px;
  align-items: stretch;
}

.prompt-input {
  flex-grow: 1;
  padding: 14px 18px;
  border: 2px solid var(--border-color);
  border-radius: 25px;
  font-size: 1rem;
  transition: all 0.3s ease;
  outline: none;
}

.prompt-input:focus {
  border-color: var(--primary-color);
  box-shadow: 0 0 0 3px rgba(58, 124, 165, 0.2);
}

.generate-btn,
.reset-btn {
  padding: 14px 24px;
  border: none;
  cursor: pointer;
  font-weight: 600;
  font-size: 1rem;
  transition: all 0.3s ease;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
}

.generate-btn {
  background: linear-gradient(
    135deg,
    var(--primary-color),
    var(--secondary-color)
  );
  border-radius: 50px;
  color: white;
  box-shadow: 0 4px 12px rgba(58, 124, 165, 0.3);
}

.generate-btn:hover {
  opacity: 0.9;
  transform: translateY(-2px);
}

.reset-btn {
  background-color: var(--background-color);
  color: var(--text-color-dark);
  border: 2px solid var(--border-color);
  border-radius: 50px;
}

.reset-btn:hover {
  background-color: #e9ecef;
}

.generate-btn:disabled,
.reset-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  pointer-events: none;
}

/* Recommended Prompts Section */
.recommended-prompts-section {
  margin-bottom: 35px;
  background-color: white;
  border-radius: 12px;
  padding: 25px;
  border: 1px solid var(--border-color);
}

.recommended-prompts-section h3 {
  text-align: center;
  margin-bottom: 25px;
  color: var(--text-color-dark);
  font-size: 1.5rem;
}

.recommended-prompts-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
  gap: 20px;
}

.recommended-prompt-card {
  background-color: var(--background-color);
  border-radius: 10px;
  padding: 20px;
  border: 1px solid var(--border-color);
  transition: all 0.3s ease;
  display: flex;
  flex-direction: column;
}

.recommended-prompt-card:hover {
  transform: translateY(-6px);
  box-shadow: 0 8px 20px var(--box-shadow-color);
  border-color: var(--primary-color);
}

.recommended-prompt-card h4 {
  margin-bottom: 12px;
  color: var(--primary-color);
  font-size: 1.2rem;
}

.recommended-prompt-card p {
  color: var(--text-color-light);
  font-size: 0.95rem;
  flex-grow: 1;
}

.generated-prompt-section {
  background-color: white;
  border-radius: 12px;
  padding: 25px;
  margin-bottom: 35px;
  border: 1px solid var(--border-color);
}

.generated-prompt-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.copy-btn {
  background-color: transparent;
  border: 2px solid var(--primary-color);
  color: var(--primary-color);
  padding: 10px 18px;
  border-radius: 8px;
  transition: all 0.3s ease;
}

.copy-btn:hover {
  background-color: var(--primary-color);
  color: white;
}

.generated-prompt-content {
  background-color: var(--background-color);
  padding: 40px 60px;
  border-radius: 12px;
  max-height: 400px;
  overflow-y: auto;
  border: 1px solid var(--border-color);
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
  font-family: "Arial", sans-serif;
  font-size: 16px;
  line-height: 1.6;
  color: var(--pro-text-color);
}

.prompt-history-section {
  background-color: white;
  border-radius: 12px;
  padding: 25px;
  border: 1px solid var(--border-color);
}

.prompt-history-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.clear-history-btn {
  background-color: var(--accent-color);
  color: white;
  border: none;
  padding: 10px 18px;
  border-radius: 8px;
  transition: background-color 0.3s ease;
}

.clear-history-btn:hover {
  background-color: var(--accent-color-hover);
}

.prompt-history-list {
  max-height: 350px;
  overflow-y: auto;
}

.history-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 10px;
  padding: 15px;
  border-bottom: 1px solid var(--border-color);
  transition: background-color 0.2s ease;
}

.history-item:hover {
  background-color: var(--background-color);
}

.view-history-btn {
  background-color: var(--primary-color);
  color: white;
  border: none;
  padding: 8px 14px;
  border-radius: 6px;
  transition: background-color 0.3s ease;
}

.view-history-btn:hover {
  opacity: 0.9;
}

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.3s ease, visibility 0.3s;
}

.modal-overlay.is-visible {
  opacity: 1;
  visibility: visible;
}

.modal-content {
  background-color: white;
  border-radius: 15px;
  width: 90%;
  max-width: 700px;
  max-height: 85%;
  overflow-y: auto;
  padding: 25px;
  box-shadow: 0 15px 50px var(--box-shadow-color);
  transform: scale(0.7);
  opacity: 0;
  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.modal-content.is-visible {
  transform: scale(1);
  opacity: 1;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid var(--border-color);
  padding-bottom: 15px;
  margin-bottom: 20px;
}

.modal-close-btn {
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: var(--accent-color);
  transition: color 0.3s ease;
}

.modal-close-btn:hover {
  color: var(--accent-color-hover);
}

.modal-body {
  margin-bottom: 25px;
}

.modal-footer {
  display: flex;
  justify-content: flex-end;
  gap: 15px;
}

.modal-copy-btn,
.modal-close-action-btn {
  padding: 12px 20px;
  border-radius: 8px;
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
}

.modal-copy-btn {
  background-color: var(--primary-color);
  color: white;
}

.modal-copy-btn:hover {
  opacity: 0.9;
}

.modal-close-action-btn {
  background-color: var(--background-color);
  color: var(--text-color-dark);
}

.modal-close-action-btn:hover {
  background-color: #e9ecef;
}

/* Responsive Design Improvements */
@media (max-width: 992px) {
  .prompt-forge-container {
    margin: 30px 20px;
    padding: 25px;
  }

  .input-wrapper {
    flex-direction: column;
    gap: 15px;
  }

  .generate-btn,
  .reset-btn {
    width: 100%;
  }

  .recommended-prompts-grid {
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  }
}

@media (max-width: 576px) {
  .prompt-forge-header h1 {
    font-size: 2.2rem;
  }

  .recommended-prompts-grid {
    grid-template-columns: 1fr;
  }

  .modal-content {
    width: 95%;
    max-width: 95%;
    padding: 15px;
  }
}

/* Accessibility Enhancements */
@media (prefers-reduced-motion: reduce) {
  * {
    transition: none !important;
  }
}



================================================
File: src/pages/Prompts/Prompts.jsx
================================================
"use client"

import { useState, useCallback, useEffect } from "react"
import axios from "axios"
import { marked } from "marked"
import DOMPurify from "dompurify"
import { ToastContainer, toast, Slide } from "react-toastify"
import "react-toastify/dist/ReactToastify.css"
import "./Prompts.css"

const RECOMMENDED_PROMPTS = [
  {
    id: 1,
    topic: "Creative Writing",
    description: "Generate a unique story premise that blends sci-fi and historical fiction",
  },
  {
    id: 2,
    topic: "Business Strategy",
    description: "Develop an innovative business model for sustainable technology",
  },
  {
    id: 3,
    topic: "Product Design",
    description: "Create a revolutionary product that solves an everyday problem",
  },
  {
    id: 4,
    topic: "Educational Innovation",
    description: "Design an immersive learning experience for complex scientific concepts",
  },
  {
    id: 5,
    topic: "Social Impact",
    description: "Craft a comprehensive strategy to address urban sustainability",
  },
  {
    id: 6,
    topic: "Health & Wellness",
    description: "Propose a cutting-edge solution to improve mental health care access",
  },
  {
    id: 7,
    topic: "Technology",
    description: "Outline the potential applications of AI in disaster management",
  },
  {
    id: 8,
    topic: "Entertainment",
    description: "Pitch an original concept for a TV series that targets Gen Z audiences",
  },
]

const toastConfig = {
  position: "top-right",
  autoClose: 3000,
  hideProgressBar: false,
  closeOnClick: true,
  pauseOnHover: true,
  draggable: true,
  progress: undefined,
  theme: "light",
  transition: Slide,
}

const DynamicPrompts = () => {
  // Initialize state from localStorage with fallback
  const [userInput, setUserInput] = useState(() => localStorage.getItem("currentUserInput") || "")

  const [generatedPrompt, setGeneratedPrompt] = useState(() => localStorage.getItem("currentGeneratedPrompt") || "")

  const [promptHistory, setPromptHistory] = useState(() => {
    const savedHistory = localStorage.getItem("promptHistory")
    return savedHistory
      ? JSON.parse(savedHistory).map((item) => ({
          ...item,
          timestamp: new Date(item.timestamp),
        }))
      : []
  })

  const [loading, setLoading] = useState(false)
  const [activeModal, setActiveModal] = useState(null)

  const API_KEY = "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"

  // Persist user input to localStorage
  useEffect(() => {
    localStorage.setItem("currentUserInput", userInput)
  }, [userInput])

  // Persist generated prompt to localStorage
  useEffect(() => {
    localStorage.setItem("currentGeneratedPrompt", generatedPrompt)
  }, [generatedPrompt])

  // Update localStorage whenever promptHistory changes
  useEffect(() => {
    localStorage.setItem("promptHistory", JSON.stringify(promptHistory))
  }, [promptHistory])

  const generatePrompt = useCallback(async () => {
    if (!userInput.trim()) {
      toast.info("Please enter a topic to spark AI creativity", toastConfig)
      return
    }

    setLoading(true)
    try {
      const promptTemplate = `
Professional Prompt Engineering Framework:
- Domain: "${userInput}"
- Objective: Craft a multidimensional, strategically nuanced prompt
- Requirements:
  1. Demonstrate intellectual depth
  2. Encourage innovative thinking
  3. Provide clear, actionable guidance
  4. Stimulate comprehensive exploration
`

      const response = await axios.post(
        "https://api.perplexity.ai/chat/completions",
        {
          model: "sonar",
          messages: [
            {
              role: "system",
              content:
                "You are an expert prompt engineer who creates sophisticated, nuanced prompts that inspire creativity and deep thinking.",
            },
            {
              role: "user",
              content: promptTemplate,
            },
          ],
          temperature: 0.7,
          max_tokens: 2000,
        },
        {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${API_KEY}`,
          },
        },
      )

      const text = response.data.choices[0].message.content

      const sanitizedText = DOMPurify.sanitize(marked(text))
      setGeneratedPrompt(sanitizedText)

      const newPromptItem = {
        id: Date.now(),
        topic: userInput,
        prompt: sanitizedText,
        timestamp: new Date(),
      }

      // Limit history to 10 most recent items
      setPromptHistory((prev) => {
        const updatedHistory = [newPromptItem, ...prev.slice(0, 9)]
        return updatedHistory
      })

      toast.success("Prompt Generated Successfully!", toastConfig)
    } catch (error) {
      console.error("Prompt Generation Error:", error)
      toast.error("AI Creativity Temporarily Unavailable", {
        ...toastConfig,
        autoClose: 7500,
      })
    } finally {
      setLoading(false)
    }
  }, [userInput, API_KEY])

  const copyToClipboard = useCallback((text) => {
    const plainText = text.replace(/<[^>]*>/g, "")
    navigator.clipboard
      .writeText(plainText)
      .then(() => toast.success("Prompt Copied to Clipboard", toastConfig))
      .catch(() => toast.error("Clipboard Copy Failed", toastConfig))
  }, [])

  const resetFields = useCallback(() => {
    setUserInput("")
    setGeneratedPrompt("")
    localStorage.removeItem("currentUserInput")
    localStorage.removeItem("currentGeneratedPrompt")
    toast.info("Fields Reset", toastConfig)
  }, [])

  const clearHistory = useCallback(() => {
    setPromptHistory([])
    localStorage.removeItem("promptHistory")
    toast.info("Prompt History Cleared", toastConfig)
  }, [])

  const openHistoryModal = useCallback((prompt) => {
    setActiveModal(prompt)
  }, [])

  const closeModal = useCallback(() => {
    setActiveModal(null)
  }, [])

  const selectRecommendedPrompt = useCallback((prompt) => {
    setUserInput(prompt.description)
    toast.info(`Selected: ${prompt.topic}`, toastConfig)
  }, [])

  useEffect(() => {
    const handleKeyDown = (event) => {
      if (event.key === "Enter" && userInput.trim()) {
        generatePrompt()
      }
    }

    window.addEventListener("keydown", handleKeyDown)
    return () => window.removeEventListener("keydown", handleKeyDown)
  }, [userInput, generatePrompt])

  return (
    <div className="prompt-forge-container">
      <div className="prompt-forge-header">
        <h1>
          Prompt <span className="gradient-text">Forge AI</span>
        </h1>
        <p>Elevate Your Creative Potential Through Intelligent Prompt Engineering</p>
      </div>

      <div className="prompt-input-section">
        <div className="input-wrapper">
          <input
            type="text"
            placeholder="Enter your creative domain..."
            value={userInput}
            onChange={(e) => setUserInput(e.target.value)}
            disabled={loading}
            className="prompt-input"
          />
          <button onClick={generatePrompt} disabled={loading} className="generate-btn">
            {loading ? "Generating..." : "Spark Ideas"}
          </button>
          <button onClick={resetFields} className="reset-btn">
            Reset
          </button>
        </div>
      </div>

      {/* Recommended Prompts Section */}
      <div className="recommended-prompts-section">
        <h3>Recommended Prompts</h3>
        <div className="recommended-prompts-grid">
          {RECOMMENDED_PROMPTS.map((prompt) => (
            <div key={prompt.id} className="recommended-prompt-card" onClick={() => selectRecommendedPrompt(prompt)}>
              <h4>{prompt.topic}</h4>
              <p>{prompt.description}</p>
            </div>
          ))}
        </div>
      </div>

      {generatedPrompt && (
        <div className="generated-prompt-section">
          <div className="generated-prompt-header">
            <h2>Generated Prompt</h2>
            <button onClick={() => copyToClipboard(generatedPrompt)} className="copy-btn">
              Copy Prompt
            </button>
          </div>
          <div className="generated-prompt-content" dangerouslySetInnerHTML={{ __html: generatedPrompt }} />
        </div>
      )}

      {promptHistory.length > 0 && (
        <div className="prompt-history-section">
          <div className="prompt-history-header">
            <h3>Prompt History</h3>
            <button onClick={clearHistory} className="clear-history-btn">
              Clear History
            </button>
          </div>
          <div className="prompt-history-list">
            {promptHistory.map((item) => (
              <div key={item.id} className="history-item">
                <span className="history-topic">{item.topic}</span>
                <span className="history-timestamp">{item.timestamp.toLocaleString()}</span>
                <button onClick={() => openHistoryModal(item)} className="view-history-btn">
                  View
                </button>
              </div>
            ))}
          </div>
        </div>
      )}

      {activeModal && (
        <div className="modal-overlay" onClick={closeModal}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h2>Historical Prompt Details</h2>
              <button onClick={closeModal} className="modal-close-btn">
                Ã—
              </button>
            </div>
            <div className="modal-body" dangerouslySetInnerHTML={{ __html: activeModal.prompt }} />
            <div className="modal-footer">
              <button onClick={() => copyToClipboard(activeModal.prompt)} className="modal-copy-btn">
                Copy Prompt
              </button>
              <button onClick={closeModal} className="modal-close-action-btn">
                Close
              </button>
            </div>
          </div>
        </div>
      )}
      <ToastContainer />
    </div>
  )
}

export default DynamicPrompts



================================================
File: src/pages/Resources/Resources.css
================================================
.re-resources-container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 1.25rem;
  font-family: "Poppins", sans-serif;
}

.re-resources-title {
  font-size: 2.25rem;
  text-align: center;
  margin-bottom: 2rem;
  color: #2c3e50;
  font-weight: 600;
}

.re-resources-filter {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.re-search-container {
  display: flex;
  align-items: center;
  width: 30%;
}

.re-search-icon {
  margin-right: 0.625rem;
  color: #7f8c8d;
  display: none;
}

.re-search-bar {
  flex-grow: 1;
  padding: 0.75rem 1rem;
  border-radius: 0.5rem;
  border: 1px solid #e2e8f0;
  font-size: 1rem;
  transition: all 0.2s ease;
  background-color: #fff;
}

.re-search-bar:focus {
  border-color: #3498db;
  box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
  outline: none;
}

.re-filter-buttons {
  display: flex;
  gap: 0.625rem;
}

.re-filter-button {
  padding: 0.75rem 1.25rem;
  background-color: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: 0.5rem;
  cursor: pointer;
  font-size: 0.875rem;
  transition: all 0.2s ease;
  font-weight: 500;
  color: #64748b;
}

.re-filter-button.re-active,
.re-filter-button:hover {
  background-color: #3498db;
  color: white;
  border-color: #3498db;
}

.re-resources-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.re-resource-card {
  background-color: white;
  border-radius: 0.75rem;
  padding: 1.5rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.06);
  transition: all 0.2s ease;
  cursor: pointer;
  position: relative;
  border: 1px solid #e2e8f0;
}

.re-resource-card:hover {
  transform: translateY(0px);
  /* box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1),
    0 4px 6px -2px rgba(0, 0, 0, 0.05); */
}

.re-resource-icon {
  font-size: 1.875rem;
  margin-bottom: 1rem;
  color: #3498db;
}

.re-resource-title {
  font-size: 1.375rem;
  font-weight: 600;
  color: #2c3e50;
  margin-bottom: 0.75rem;
  line-height: 1.4;
}

.re-resource-description {
  font-size: 1rem;
  color: #64748b;
  line-height: 1.6;
}

.re-resource-date {
  font-size: 0.875rem;
  color: #94a3b8;
  margin-top: 0.5rem;
}

.re-tags {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  margin-top: 1rem;
}

.re-tag {
  background-color: #eef2ff;
  color: #3498db;
  border-radius: 0.375rem;
  padding: 0.375rem 0.75rem;
  font-size: 0.75rem;
  font-weight: 500;
}

.re-pagination {
  display: flex;
  justify-content: center;
  gap: 0.5rem;
  margin-top: 2rem;
}

.re-page-button {
  padding: 0.75rem 1rem;
  border: 1px solid #e2e8f0;
  background-color: #fff;
  border-radius: 0.5rem;
  cursor: pointer;
  transition: all 0.2s ease;
  font-weight: 500;
  color: #64748b;
}

.re-page-button.re-active,
.re-page-button:hover {
  background-color: #3498db;
  color: white;
  border-color: #3498db;
}

.re-resource-modal {
  position: fixed;
  inset: 0;
  background-color: rgba(0, 0, 0, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 1rem;
  z-index: 50;
}

.re-modal-content {
  background-color: white;
  padding: 2rem;
  border-radius: 0.75rem;
  max-width: 32rem;
  width: 100%;
  text-align: center;
  position: relative;
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1),
    0 10px 10px -5px rgba(0, 0, 0, 0.04);
}

.re-close-modal {
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: none;
  border: none;
  font-size: 1.25rem;
  cursor: pointer;
  color: #e74c3c;
  padding: 0.5rem;
  transition: color 0.2s ease;
}

.re-close-modal:hover {
  color: #c0392b;
}

.re-modal-icon {
  font-size: 3rem;
  margin-bottom: 1.5rem;
  color: #3498db;
}

.re-modal-title {
  font-size: 1.625rem;
  color: #2c3e50;
  margin-bottom: 1rem;
  font-weight: 600;
  line-height: 1.4;
}

.re-modal-description {
  font-size: 1.125rem;
  color: #64748b;
  margin-bottom: 1.5rem;
  line-height: 1.6;
}

.re-modal-link {
  font-size: 1.125rem;
  color: #3498db;
  text-decoration: none;
  font-weight: 500;
  transition: color 0.2s ease;
}

.re-modal-link:hover {
  text-decoration: underline;
  color: #2980b9;
}

@media (max-width: 768px) {
  .re-resources-filter {
    flex-direction: column;
    gap: 1rem;
  }

  .re-search-container {
    width: 100%;
  }

  .re-filter-buttons {
    width: 100%;
    justify-content: center;
    flex-wrap: wrap;
  }

  .re-resources-grid {
    grid-template-columns: 1fr;
  }

  .re-modal-content {
    margin: 1rem;
    padding: 1.5rem;
  }
}



================================================
File: src/pages/Resources/Resources.jsx
================================================
import React, { useState, useEffect } from "react";
import "./Resources.css";
import { FaFilePdf, FaVideo, FaLink, FaSearch, FaRobot } from "react-icons/fa";
import axios from "axios";

const resourceData = [
  {
    id: 1,
    title: "Project Plan",
    type: "Document",
    icon: <FaFilePdf />,
    url: "/path-to-document",
    description: "Comprehensive project plan document.",
    tags: ["planning", "documentation"],
    date: "2024-10-01",
  },
  {
    id: 2,
    title: "Introduction Video",
    type: "Video",
    icon: <FaVideo />,
    url: "/path-to-video",
    description: "Overview video about the project.",
    tags: ["video", "overview"],
    date: "2024-10-05",
  },
  {
    id: 3,
    title: "Design Guidelines",
    type: "Document",
    icon: <FaFilePdf />,
    url: "/path-to-design-guidelines",
    description: "UI/UX guidelines for the project.",
    tags: ["design", "UI/UX"],
    date: "2024-09-28",
  },
  {
    id: 4,
    title: "GitHub Repository",
    type: "Link",
    icon: <FaLink />,
    url: "https://github.com/project-repo",
    description: "Access the project's GitHub repository.",
    tags: ["code", "repository"],
    date: "2024-10-02",
  },
  {
    id: 5,
    title: "Marketing Strategy",
    type: "Document",
    icon: <FaFilePdf />,
    url: "/path-to-marketing-strategy",
    description: "Document outlining the marketing strategy.",
    tags: ["marketing", "strategy"],
    date: "2024-09-25",
  },
  {
    id: 6,
    title: "Training Video",
    type: "Video",
    icon: <FaVideo />,
    url: "/path-to-training-video",
    description: "Recorded training session for the team.",
    tags: ["training", "video"],
    date: "2024-10-03",
  },
  {
    id: 7,
    title: "User Manual",
    type: "Document",
    icon: <FaFilePdf />,
    url: "/path-to-user-manual",
    description: "User manual for the application.",
    tags: ["manual", "documentation"],
    date: "2024-09-29",
  },
  {
    id: 8,
    title: "Feedback Form",
    type: "Link",
    icon: <FaLink />,
    url: "/path-to-feedback-form",
    description: "Link to the project feedback form.",
    tags: ["feedback", "survey"],
    date: "2024-10-04",
  },
  {
    id: 9,
    title: "Sprint Review",
    type: "Document",
    icon: <FaFilePdf />,
    url: "/path-to-sprint-review",
    description: "Document summarizing the sprint review.",
    tags: ["sprint", "review"],
    date: "2024-10-06",
  },
  {
    id: 10,
    title: "Team Meeting Notes",
    type: "Document",
    icon: <FaFilePdf />,
    url: "/path-to-meeting-notes",
    description: "Notes from the last team meeting.",
    tags: ["meeting", "notes"],
    date: "2024-10-07",
  },
  {
    id: 11,
    title: "Code Review Guidelines",
    type: "Document",
    icon: <FaFilePdf />,
    url: "/path-to-code-review-guidelines",
    description: "Guidelines for conducting code reviews.",
    tags: ["code", "review", "guidelines"],
    date: "2024-10-08",
  },
  {
    id: 12,
    title: "Project Timeline",
    type: "Document",
    icon: <FaFilePdf />,
    url: "/path-to-project-timeline",
    description: "Visual representation of the project timeline.",
    tags: ["timeline", "planning"],
    date: "2024-10-09",
  },
];

const Resources = () => {
  const [resources, setResources] = useState(resourceData);
  const [selectedType, setSelectedType] = useState("All");
  const [searchTerm, setSearchTerm] = useState("");
  const [activeResource, setActiveResource] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const resourcesPerPage = 3;
  const [aiContent, setAiContent] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchAIContent = async (text) => {
    setLoading(true);
    setError(null);

    // Fallback mock AI content generator
    const mockAIContent = () => {
      const mockResponses = [
        "This comprehensive resource delivers nuanced insights into advanced project management methodologies, providing a strategic framework for navigating complex organizational challenges and optimizing team performance.",

        "A meticulously crafted overview that synthesizes critical project management principles, offering in-depth analysis of key strategic elements, risk mitigation techniques, and collaborative frameworks designed to drive sustainable project success across multiple dimensions.",

        "Detailed documentation that transcends traditional reporting, presenting a holistic approach to team collaboration, communication protocols, and knowledge management strategies that empower teams to achieve unprecedented levels of coordination and operational excellence.",

        "An indispensable reference that contextualizes project dynamics, delivering granular insights into stakeholder engagement, resource allocation, timeline optimization, and adaptive leadership principles crucial for navigating evolving project landscapes.",

        "A pivotal resource that provides transformative guidance, integrating advanced diagnostic tools, predictive analytics, and strategic frameworks to ensure comprehensive project alignment, mitigate potential risks, and consistently deliver high-impact outcomes.",
      ];
      return mockResponses[Math.floor(Math.random() * mockResponses.length)];
    };

    try {
      // Simulate API call with mock content
      return new Promise((resolve) => {
        setTimeout(() => {
          const content = mockAIContent();
          setAiContent(content);
          setLoading(false);
          resolve(content);
        }, 1000);
      });

      // Uncomment and modify the following block if you want to use actual API
      // /*
      // const apiKey = "AIzaSyBRlNfkdImoF0XMv-J5jKWcWCcpL6lKPVQ";
      // const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;

      // const data = {
      //   contents: [
      //     {
      //       parts: [{ text }],
      //     },
      //   ],
      // };

      // const response = await axios.post(url, data, {
      //   headers: { "Content-Type": "application/json" },
      //   timeout: 10000 // 10 second timeout
      // });

      // const result = response.data;
      // if (result && result.contents && result.contents[0].parts[0].text) {
      //   setAiContent(result.contents[0].parts[0].text);
      // } else {
      //   setAiContent("Unable to generate content.");
      // }
      // */
    } catch (error) {
      console.log("Error fetching AI content:", error);
      setError("Failed to generate AI content. Using default description.");
      setAiContent(mockAIContent());
    } finally {
      setLoading(false);
    }
  };

  // Rest of the component remains the same as previous implementation...

  // Filter and search logic
  const filteredResources = resources.filter((resource) => {
    const matchesType =
      selectedType === "All" || resource.type === selectedType;
    const matchesSearch = resource.title
      .toLowerCase()
      .includes(searchTerm.toLowerCase());
    return matchesType && matchesSearch;
  });

  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  const paginatedResources = filteredResources.slice(
    (currentPage - 1) * resourcesPerPage,
    currentPage * resourcesPerPage
  );

  // Handle modal opening
  const openResourceModal = (resource) => {
    setActiveResource(resource);
    fetchAIContent(resource.description); // Fetch AI content for the selected resource
  };

  // Handle modal closing
  const closeResourceModal = () => {
    setActiveResource(null);
    setAiContent(null);
    setError(null);
  };

  return (
    <div className="re-resources-container">
      <h1 className="re-resources-title">Project Resources</h1>

      {/* Filter and Search Section */}
      <div className="re-resources-filter">
        <div className="re-search-container">
          <FaSearch className="re-search-icon" />
          <input
            type="text"
            placeholder="Search resources..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="re-search-bar"
          />
        </div>

        <div className="re-filter-buttons">
          <button
            className={`re-filter-button ${
              selectedType === "All" ? "re-active" : ""
            }`}
            onClick={() => setSelectedType("All")}
          >
            All
          </button>
          <button
            className={`re-filter-button ${
              selectedType === "Document" ? "re-active" : ""
            }`}
            onClick={() => setSelectedType("Document")}
          >
            Documents
          </button>
          <button
            className={`re-filter-button ${
              selectedType === "Video" ? "re-active" : ""
            }`}
            onClick={() => setSelectedType("Video")}
          >
            Videos
          </button>
          <button
            className={`re-filter-button ${
              selectedType === "Link" ? "re-active" : ""
            }`}
            onClick={() => setSelectedType("Link")}
          >
            Links
          </button>
        </div>
      </div>

      {/* Resource Cards Section */}
      <div className="re-resources-grid">
        {paginatedResources.map((resource) => (
          <div
            key={resource.id}
            className="re-resource-card"
            onClick={() => openResourceModal(resource)}
          >
            <div className="re-resource-icon">{resource.icon}</div>
            <h3 className="re-resource-title">{resource.title}</h3>
            <p className="re-resource-description">{resource.description}</p>
            <p className="re-resource-date">
              {new Date(resource.date).toLocaleDateString()}
            </p>
            <div className="re-tags">
              {resource.tags.map((tag, index) => (
                <span key={index} className="re-tag">
                  {tag}
                </span>
              ))}
            </div>
          </div>
        ))}
      </div>

      {/* Pagination */}
      <div className="re-pagination">
        {Array.from({
          length: Math.ceil(filteredResources.length / resourcesPerPage),
        }).map((_, index) => (
          <button
            key={index}
            className={`re-page-button ${
              currentPage === index + 1 ? "re-active" : ""
            }`}
            onClick={() => handlePageChange(index + 1)}
          >
            {index + 1}
          </button>
        ))}
      </div>

      {/* Resource Modal */}
      {activeResource && (
        <div className="re-resource-modal">
          <div className="re-modal-content">
            <button className="re-close-modal" onClick={closeResourceModal}>
              X
            </button>
            <div className="re-modal-icon">{activeResource.icon}</div>
            <h3 className="re-modal-title">{activeResource.title}</h3>
            <p className="re-modal-description">{activeResource.description}</p>
            {loading ? (
              <p>Generating AI insights...</p>
            ) : error ? (
              <div className="re-ai-content error">
                <p>{error}</p>
              </div>
            ) : aiContent ? (
              <div className="re-ai-content">
                <h4>AI-generated insights:</h4>
                <p style={{ whiteSpace: "pre-wrap" }}>{aiContent}</p>
              </div>
            ) : null}
            <a
              href={activeResource.url}
              target="_blank"
              rel="noopener noreferrer"
              className="re-modal-link"
            >
              {activeResource.type === "Document" ? "Download" : "Access"}{" "}
              {activeResource.type}
            </a>
          </div>
        </div>
      )}
    </div>
  );
};

export default Resources;



================================================
File: src/pages/Settings/Settings.css
================================================
:root {
  --primary-color: #2563eb;
  --primary-hover: #1d4ed8;
  --success-color: #059669;
  --danger-color: #dc2626;
  --background: #ffffff;
  --text-primary: #1f2937;
  --text-secondary: #4b5563;
  --border: #e5e7eb;
  --input-background: #f9fafb;
  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1);
  --transition-base: 0.2s ease-in-out;
}

/* Toggle Button Styles */
.toggle-wrapper {
  position: relative;
  min-width: 60px;
}

.toggle {
  position: relative;
  display: inline-flex;
  align-items: center;
  width: 60px;
  height: 32px;
  padding: 4px;
  border: 1px solid var(--border);
  border-radius: 999px;
  background-color: var(--input-background);
  cursor: pointer;
  transition: all var(--transition-base);
}

.toggle.active {
  background-color: var(--primary-color);
  border-color: var(--primary-color);
}

.toggle-thumb {
  position: absolute;
  left: 4px;
  width: 24px;
  height: 24px;
  background-color: white;
  border-radius: 50%;
  box-shadow: var(--shadow-sm);
  transition: transform var(--transition-base);
}

.toggle.active .toggle-thumb {
  transform: translateX(28px);
}

.toggle-label {
  position: absolute;
  right: 8px;
  font-size: 12px;
  font-weight: 500;
  color: var(--text-secondary);
  user-select: none;
}

.toggle.active .toggle-label {
  left: 8px;
  right: auto;
  color: white;
}

/* Rest of your existing styles */
.settings-container {
  max-width: 1500px;
  margin: 0 auto;
  padding: 2rem;
  background-color: var(--background);
  border-radius: 0.75rem;
  box-shadow: var(--shadow-md);
  color: var(--text-primary);
}

.settings-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid var(--border);
}

.settings-header h1 {
  font-size: 1.875rem;
  font-weight: 600;
  color: var(--text-primary);
  margin: 0;
}

.unsaved-changes {
  font-size: 0.875rem;
  color: var(--danger-color);
  animation: pulse 2s infinite;
}

.settings-section {
  margin-bottom: 2rem;
  animation: fadeIn 0.5s ease-out;
}

.settings-section h2 {
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 1rem;
  color: var(--text-primary);
}

.settings-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 1.5rem;
}

.setting-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 1rem;
  padding: 1rem;
  border-radius: 0.5rem;
  background-color: var(--background);
  border: 1px solid var(--border);
  transition: border-color var(--transition-base);
}

.setting-item:hover {
  border-color: var(--primary-color);
}

.setting-item label {
  font-weight: 500;
  color: var(--text-primary);
}

select {
  padding: 0.5rem 2.5rem 0.5rem 1rem;
  font-size: 0.875rem;
  border: 1px solid var(--border);
  border-radius: 0.5rem;
  background-color: var(--input-background);
  color: var(--text-primary);
  cursor: pointer;
  appearance: none;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M19 9l-7 7-7-7'/%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: right 0.75rem center;
  background-size: 1.25em 1.25em;
  min-width: 160px;
  transition: all var(--transition-base);
}

select:hover {
  border-color: var(--primary-color);
}

select:focus {
  outline: none;
  border-color: var(--primary-color);
  box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.2);
}

.settings-footer {
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
  margin-top: 2rem;
  padding-top: 1rem;
  border-top: 1px solid var(--border);
}

.button {
  padding: 0.625rem 1.25rem;
  font-size: 0.875rem;
  font-weight: 500;
  border-radius: 0.5rem;
  cursor: pointer;
  transition: all var(--transition-base);
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: 120px;
}

.button.primary {
  background-color: var(--primary-color);
  color: white;
  border: none;
}

.button.primary:hover:not(:disabled) {
  background-color: var(--primary-hover);
  transform: translateY(-1px);
}

.button.primary:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.button.secondary {
  background-color: var(--background);
  border: 1px solid var(--border);
  color: var(--text-primary);
}

.button.secondary:hover {
  border-color: var(--text-primary);
  background-color: var(--input-background);
}

.button.saving {
  position: relative;
  padding-right: 2.5rem;
}

.button.saving::after {
  content: "";
  position: absolute;
  right: 1rem;
  width: 1rem;
  height: 1rem;
  border: 2px solid transparent;
  border-top-color: white;
  border-radius: 50%;
  animation: spin 0.8s linear infinite;
}

.button.saved {
  background-color: var(--success-color);
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

@keyframes pulse {
  0%,
  100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(5px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@media (max-width: 768px) {
  .settings-container {
    margin: 0;
    padding: 1.5rem;
    border-radius: 0;
  }

  .settings-header {
    flex-direction: column;
    gap: 1rem;
    align-items: flex-start;
  }

  .settings-grid {
    grid-template-columns: 1fr;
  }

  .setting-item {
    flex-direction: column;
    align-items: flex-start;
    gap: 0.5rem;
  }

  select {
    width: 100%;
  }

  .settings-footer {
    flex-direction: column-reverse;
    gap: 0.75rem;
  }

  .button {
    width: 100%;
  }
}

:focus-visible {
  outline: 2px solid var(--primary-color);
  outline-offset: 2px;
}

@media print {
  .settings-container {
    box-shadow: none;
    margin: 0;
    padding: 1rem;
  }

  .button {
    display: none;
  }
}

@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}



================================================
File: src/pages/Settings/Settings.jsx
================================================
// Settings.jsx
import React, { useState, useEffect } from "react";
import "./Settings.css";

const Settings = () => {
  const [preferences, setPreferences] = useState({
    theme: localStorage.getItem("theme") || "light",
    notifications: JSON.parse(localStorage.getItem("notifications")) ?? true,
    dataSharing: JSON.parse(localStorage.getItem("dataSharing")) ?? false,
    language: localStorage.getItem("language") || "English",
    fontSize: localStorage.getItem("fontSize") || "medium",
    autoSave: JSON.parse(localStorage.getItem("autoSave")) ?? true,
    sound: JSON.parse(localStorage.getItem("sound")) ?? true,
    timezone:
      localStorage.getItem("timezone") ||
      Intl.DateTimeFormat().resolvedOptions().timeZone,
  });

  const [isDirty, setIsDirty] = useState(false);
  const [saveStatus, setSaveStatus] = useState("");

  useEffect(() => {
    // Apply theme on mount and change
    document.documentElement.setAttribute("data-theme", preferences.theme);
  }, [preferences.theme]);

  const handleToggle = (key) => {
    setPreferences((prev) => ({ ...prev, [key]: !prev[key] }));
    setIsDirty(true);
  };

  const handleChange = (key, value) => {
    setPreferences((prev) => ({ ...prev, [key]: value }));
    setIsDirty(true);
  };

  const handleSave = () => {
    setSaveStatus("saving");
    // Simulate API call
    setTimeout(() => {
      Object.entries(preferences).forEach(([key, value]) => {
        localStorage.setItem(key, JSON.stringify(value));
      });
      setIsDirty(false);
      setSaveStatus("saved");
      setTimeout(() => setSaveStatus(""), 2000);
    }, 800);
  };

  const handleReset = () => {
    const defaultSettings = {
      theme: "light",
      notifications: true,
      dataSharing: false,
      language: "English",
      fontSize: "medium",
      autoSave: true,
      sound: true,
      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
    };
    setPreferences(defaultSettings);
    setIsDirty(true);
  };

  const timezones = [
    "UTC",
    "America/New_York",
    "America/Los_Angeles",
    "Europe/London",
    "Asia/Tokyo",
    "Australia/Sydney",
  ];

  return (
    <div className="settings-container">
      <header className="settings-header">
        <h1>Settings</h1>
        {isDirty && (
          <span className="unsaved-changes">You have unsaved changes</span>
        )}
      </header>

      <main className="settings-main">
        <section className="settings-section">
          <h2>Appearance</h2>
          <div className="settings-grid">
            <div className="setting-item">
              <label htmlFor="theme">Theme</label>
              <select
                id="theme"
                value={preferences.theme}
                onChange={(e) => handleChange("theme", e.target.value)}
              >
                <option value="light">Light</option>
                <option value="dark">Dark</option>
                <option value="system">System Default</option>
              </select>
            </div>

            <div className="setting-item">
              <label htmlFor="fontSize">Font Size</label>
              <select
                id="fontSize"
                value={preferences.fontSize}
                onChange={(e) => handleChange("fontSize", e.target.value)}
              >
                <option value="small">Small</option>
                <option value="medium">Medium</option>
                <option value="large">Large</option>
              </select>
            </div>
          </div>
        </section>

        <section className="settings-section">
          <h2>Preferences</h2>
          <div className="settings-grid">
            <div className="setting-item">
              <label htmlFor="notifications">Notifications</label>
              <div className="toggle-wrapper">
                <button
                  className={`toggle ${
                    preferences.notifications ? "active" : ""
                  }`}
                  onClick={() => handleToggle("notifications")}
                  aria-pressed={preferences.notifications}
                >
                  <span className="toggle-thumb"></span>
                  <span className="toggle-label">
                    {preferences.notifications ? "On" : "Off"}
                  </span>
                </button>
              </div>
            </div>

            <div className="setting-item">
              <label htmlFor="sound">Sound Effects</label>
              <div className="toggle-wrapper">
                <button
                  className={`toggle ${preferences.sound ? "active" : ""}`}
                  onClick={() => handleToggle("sound")}
                  aria-pressed={preferences.sound}
                >
                  <span className="toggle-thumb"></span>
                  <span className="toggle-label">
                    {preferences.sound ? "On" : "Off"}
                  </span>
                </button>
              </div>
            </div>

            <div className="setting-item">
              <label htmlFor="autoSave">Auto Save</label>
              <div className="toggle-wrapper">
                <button
                  className={`toggle ${preferences.autoSave ? "active" : ""}`}
                  onClick={() => handleToggle("autoSave")}
                  aria-pressed={preferences.autoSave}
                >
                  <span className="toggle-thumb"></span>
                  <span className="toggle-label">
                    {preferences.autoSave ? "On" : "Off"}
                  </span>
                </button>
              </div>
            </div>
          </div>
        </section>

        <section className="settings-section">
          <h2>Privacy & Security</h2>
          <div className="settings-grid">
            <div className="setting-item">
              <label htmlFor="dataSharing">Data Analytics</label>
              <div className="toggle-wrapper">
                <button
                  className={`toggle ${
                    preferences.dataSharing ? "active" : ""
                  }`}
                  onClick={() => handleToggle("dataSharing")}
                  aria-pressed={preferences.dataSharing}
                >
                  <span className="toggle-thumb"></span>
                  <span className="toggle-label">
                    {preferences.dataSharing ? "On" : "Off"}
                  </span>
                </button>
              </div>
            </div>
          </div>
        </section>

        <section className="settings-section">
          <h2>Regional</h2>
          <div className="settings-grid">
            <div className="setting-item">
              <label htmlFor="language">Language</label>
              <select
                id="language"
                value={preferences.language}
                onChange={(e) => handleChange("language", e.target.value)}
              >
                <option value="English">English</option>
                <option value="Spanish">EspaÃ±ol</option>
                <option value="French">FranÃ§ais</option>
                <option value="German">Deutsch</option>
                <option value="Japanese">æ—¥æœ¬èªž</option>
                <option value="Chinese">ä¸­æ–‡</option>
              </select>
            </div>

            <div className="setting-item">
              <label htmlFor="timezone">Time Zone</label>
              <select
                id="timezone"
                value={preferences.timezone}
                onChange={(e) => handleChange("timezone", e.target.value)}
              >
                {timezones.map((tz) => (
                  <option key={tz} value={tz}>
                    {tz.replace("_", " ")}
                  </option>
                ))}
              </select>
            </div>
          </div>
        </section>
      </main>

      <footer className="settings-footer">
        <button className="button secondary" onClick={handleReset}>
          Reset to Defaults
        </button>
        <button
          className={`button primary ${saveStatus}`}
          onClick={handleSave}
          disabled={!isDirty || saveStatus === "saving"}
        >
          {saveStatus === "saving"
            ? "Saving..."
            : saveStatus === "saved"
            ? "Saved!"
            : "Save Changes"}
        </button>
      </footer>
    </div>
  );
};

export default Settings;



================================================
File: src/pages/Summarization/Summarization.css
================================================
/* Modern Light Theme Summarization Component Styles */
:root {
  --primary-color: #3a6ea5;
  --secondary-color: #6b8cb3;
  --text-dark: #1f2937;
  --text-light: #4b5563;
  --background-light: #f9fafb;
  --border-color: #e5e7eb;
  --white: #ffffff;
  --transition-speed: 0.3s;
  --border-radius: 12px;
}

.sum-summarization-container {
  max-width: 1500px;
  margin: 0px auto;
  padding: 40px;
  background: linear-gradient(
    135deg,
    var(--white) 0%,
    var(--background-light) 100%
  );
  border-radius: 20px;
  box-shadow: 0 15px 35px rgba(0, 0, 0, 0.05), 0 5px 15px rgba(0, 0, 0, 0.03);
  border: 1px solid var(--border-color);
  transition: all var(--transition-speed) ease;
}

.sum-summarization-container:hover {
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.08), 0 8px 20px rgba(0, 0, 0, 0.05);
}

.sum-summarization-header {
  text-align: center;
  margin-bottom: 50px;
  position: relative;
  padding-bottom: 20px;
}

.sum-summarization-header::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%);
  width: 100px;
  height: 3px;
  background: linear-gradient(
    90deg,
    transparent,
    var(--primary-color),
    transparent
  );
}

.sum-summarization-header h1 {
  font-size: 2.8em;
  color: var(--text-dark);
  margin-bottom: 15px;
  font-weight: 700;
  letter-spacing: -1px;
  background: linear-gradient(
    120deg,
    var(--primary-color),
    var(--secondary-color)
  );
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  transition: all var(--transition-speed) ease;
}

.sum-summarization-header h1:hover {
  transform: scale(1.02);
}

.sum-subtitle {
  color: var(--text-light);
  font-size: 1.2em;
  font-weight: 400;
  max-width: 700px;
  margin: 0 auto;
  line-height: 1.6;
}

.sum-input-section {
  margin-bottom: 40px;
  position: relative;
}

.sum-textarea-wrapper {
  position: relative;
  margin-bottom: 25px;
}

.sum-summarization-textarea {
  width: 96%;
  min-height: 250px;

  padding: 25px;
  font-size: 17px;
  line-height: 1.7;
  border: 2px solid var(--border-color);
  border-radius: var(--border-radius);
  background: var(--white);
  transition: all var(--transition-speed) ease;
  resize: vertical;
  font-family: "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI",
    sans-serif;
  color: var(--text-dark);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.02);
}

.sum-summarization-textarea:focus {
  outline: none;
  border-color: var(--primary-color);
  box-shadow: 0 0 0 3px rgba(58, 110, 165, 0.1), 0 5px 15px rgba(0, 0, 0, 0.05);
}

.sum-char-count {
  position: absolute;
  bottom: 16px;
  right: 16px;
  color: var(--text-light);
  font-size: 0.9em;
  background: rgba(255, 255, 255, 0.8);
  padding: 4px 8px;
  border-radius: 6px;
  border: 1px solid var(--border-color);
}

.sum-summarization-button {
  width: 25%;
  margin-left: 425px;
  padding: 18px 40px;
  font-size: 1.2em;
  color: var(--white);
  background: linear-gradient(
    135deg,
    var(--primary-color),
    var(--secondary-color)
  );
  border: none;
  border-radius: 50px;
  cursor: pointer;
  transition: all var(--transition-speed) ease;
  font-weight: 600;
  letter-spacing: 0.5px;
  text-transform: uppercase;
  position: relative;
  overflow: hidden;
  box-shadow: 0 10px 25px rgba(58, 110, 165, 0.2);
}

.sum-summarization-button::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    120deg,
    transparent,
    rgba(255, 255, 255, 0.3),
    transparent
  );
  transition: all var(--transition-speed) ease;
}

.sum-summarization-button:hover::before {
  left: 100%;
}

.sum-summarization-button:hover:not(:disabled) {
  transform: translateY(-3px);
  box-shadow: 0 15px 30px rgba(58, 110, 165, 0.25),
    0 5px 15px rgba(58, 110, 165, 0.15);
}

.sum-summarization-button:disabled {
  background: linear-gradient(135deg, #d1d5db, #9ca3af);
  cursor: not-allowed;
  transform: none;
  box-shadow: none;
}

.sum-loading-container {
  display: flex;
  justify-content: center;
  align-items: center;
}

.sum-loading-text {
  display: inline-block;
  margin-right: 10px;
}

.sum-dot {
  display: inline-block;
  width: 8px;
  height: 8px;
  margin: 0 4px;
  border-radius: 50%;
  background-color: var(--primary-color);
  animation: sum-dotAnimation 1.4s infinite;
  opacity: 0;
}

.sum-dot:nth-child(2) {
  animation-delay: 0.5s;
}

.sum-dot:nth-child(3) {
  animation-delay: 1s;
}

@keyframes sum-dotAnimation {
  0%,
  100% {
    opacity: 0;
    transform: scale(0.5);
  }
  50% {
    opacity: 1;
    transform: scale(1);
  }
}

.sum-error-message {
  color: #dc3545;
  background: rgba(220, 53, 69, 0.05);
  border: 1px solid rgba(220, 53, 69, 0.2);
  padding: 15px;
  border-radius: var(--border-radius);
  margin-top: 20px;
  text-align: center;
  animation: sum-fadeIn var(--transition-speed) ease;
  font-weight: 500;
}

.sum-summary-output {
  background: var(--white);
  border-radius: var(--border-radius);
  padding: 30px;
  margin-top: 40px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05), 0 5px 15px rgba(0, 0, 0, 0.03);
  border: 1px solid var(--border-color);
  animation: sum-slideIn var(--transition-speed) ease;
  position: relative;
  overflow: hidden;
}

.sum-summary-output::before {
  content: "";
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: linear-gradient(
    45deg,
    transparent 0%,
    rgba(58, 110, 165, 0.03) 50%,
    transparent 100%
  );
  transform: rotate(-45deg);
  opacity: 0.5;
  z-index: 1;
}

.sum-summary-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 25px;
  padding-bottom: 20px;
  border-bottom: 2px solid var(--border-color);
}

.sum-summary-header h2 {
  font-size: 1.8em;
  color: var(--text-dark);
  margin: 0;
  font-weight: 600;
}

.sum-copy-button {
  padding: 10px 20px;
  font-size: 1em;
  color: var(--primary-color);
  background: transparent;
  border: 2px solid var(--primary-color);
  border-radius: 8px;
  cursor: pointer;
  transition: all var(--transition-speed) ease;
  display: flex;
  align-items: center;
  gap: 8px;
}

.sum-copy-button:hover {
  background: var(--primary-color);
  color: var(--white);
  box-shadow: 0 5px 15px rgba(58, 110, 165, 0.2);
}

.sum-summary-content {
  color: var(--text-light);
  line-height: 1.8;
  font-size: 1.1em;
  letter-spacing: 0.3px;
}

.sum-keyboard-shortcut {
  text-align: center;
  color: var(--text-light);
  font-size: 0.9em;
  margin-top: 25px;
  opacity: 0.7;
}

@keyframes sum-fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes sum-slideIn {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Responsive Design */
@media (max-width: 768px) {
  .sum-summarization-container {
    margin: 30px 15px;
    padding: 25px;
  }

  .sum-summarization-header h1 {
    font-size: 2.3em;
  }

  .sum-subtitle {
    font-size: 1.1em;
  }

  .sum-summarization-textarea {
    min-height: 200px;
    padding: 20px;
    font-size: 16px;
  }

  .sum-summary-output {
    padding: 25px;
  }

  .sum-summary-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 15px;
  }

  .sum-summary-header h2 {
    margin-bottom: 10px;
  }
}

/* Print Optimization */
@media print {
  .sum-summarization-container {
    box-shadow: none;
    border: none;
    margin: 0;
    padding: 20px;
  }

  .sum-summarization-button,
  .sum-copy-button,
  .sum-keyboard-shortcut {
    display: none;
  }

  .sum-summary-output {
    box-shadow: none;
    border: 1px solid var(--border-color);
  }
}



================================================
File: src/pages/Summarization/Summarization.jsx
================================================
"use client"

import { useState } from "react"
import axios from "axios"
import { ToastContainer, toast } from "react-toastify"
import "react-toastify/dist/ReactToastify.css"
import "./Summarization.css"

// Perplexity API key
const PERPLEXITY_API_KEY = "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"

const Summarization = () => {
  const [inputText, setInputText] = useState("")
  const [summary, setSummary] = useState("")
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState("")
  const [charCount, setCharCount] = useState(0)
  const [copySuccess, setCopySuccess] = useState(false)

  const manualData = [
    {
      input:
        "Artificial Intelligence is a branch of computer science aimed at creating systems that can perform tasks typically requiring human intelligence.",
      output: "AI focuses on creating systems that perform tasks requiring human intelligence.",
    },
    {
      input:
        "React is a JavaScript library for building user interfaces, maintained by Meta and a community of individual developers and companies.",
      output: "React is a JavaScript library for building user interfaces, maintained by Meta.",
    },
    {
      input:
        "Climate change refers to significant, long-term changes in the global climate. It is driven by human activities, particularly the burning of fossil fuels, which increase greenhouse gas levels.",
      output:
        "Climate change is significant, long-term shifts in climate caused by human activities like fossil fuel burning.",
    },
  ]

  const handleInputChange = (e) => {
    const text = e.target.value
    setInputText(text)
    setCharCount(text.length)
    setError("")
  }

  const handleSummarize = async () => {
    if (!inputText.trim()) {
      toast.error("Please enter some text to summarize.")
      setError("Please enter some text to summarize.")
      return
    }

    if (inputText.length < 50) {
      toast.warning("Please enter at least 50 characters for better summarization.")
      setError("Please enter at least 50 characters for better summarization.")
      return
    }

    setError("")
    setLoading(true)
    setSummary("")
    setCopySuccess(false)

    const toastId = toast.loading("Generating summary...")

    try {
      // Search for manual data match
      const manualMatch = manualData.find((data) => data.input.trim() === inputText.trim())

      if (manualMatch) {
        setSummary(manualMatch.output)
        toast.update(toastId, {
          render: "Summary generated successfully!",
          type: "success",
          isLoading: false,
          autoClose: 3000,
        })
      } else {
        // API call to Perplexity
        const response = await axios.post(
          "https://api.perplexity.ai/chat/completions",
          {
            model: "sonar",
            messages: [
              {
                role: "system",
                content: "You are a helpful assistant that provides concise summaries of text.",
              },
              {
                role: "user",
                content: `Please provide a concise summary of the following text:\n\n${inputText}`,
              },
            ],
            temperature: 0.7,
            max_tokens: 256,
          },
          {
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${PERPLEXITY_API_KEY}`,
            },
          },
        )

        const summaryText = response.data.choices?.[0]?.message?.content || ""

        if (summaryText) {
          setSummary(summaryText)
          toast.update(toastId, {
            render: "Summary generated successfully!",
            type: "success",
            isLoading: false,
            autoClose: 3000,
          })
        } else {
          setError("No summary could be generated. Please try rephrasing your input.")
          toast.update(toastId, {
            render: "No summary could be generated. Please try rephrasing your input.",
            type: "error",
            isLoading: false,
            autoClose: 3000,
          })
        }
      }
    } catch (err) {
      const errorMessage =
        err.response?.data?.error?.message || "An error occurred. Please check your input and try again."
      setError(errorMessage)
      toast.update(toastId, {
        render: errorMessage,
        type: "error",
        isLoading: false,
        autoClose: 3000,
      })
      console.error("Error details:", err.response?.data || err.message)
    } finally {
      setLoading(false)
    }
  }

  const handleCopy = async (text) => {
    try {
      await navigator.clipboard.writeText(text)
      setCopySuccess(true)
      toast.success("Text copied to clipboard!")
      setTimeout(() => setCopySuccess(false), 2000)
    } catch (err) {
      toast.error("Failed to copy text to clipboard")
      console.error("Failed to copy text:", err)
    }
  }

  const handleKeyPress = (e) => {
    if (e.key === "Enter" && e.ctrlKey) {
      handleSummarize()
      toast.info("Shortcut detected: Ctrl + Enter")
    }
  }

  return (
    <div className="sum-summarization-container">
      <ToastContainer
        position="top-right"
        autoClose={3000}
        hideProgressBar={false}
        newestOnTop
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="light"
      />

      <div className="sum-summarization-header">
        <h1>✨ AI Text Summarization</h1>
        <p className="sum-subtitle">Transform long text into concise summaries instantly</p>
      </div>

      <div className="sum-input-section">
        <div className="sum-textarea-wrapper">
          <textarea
            placeholder="Enter your text here (minimum 50 characters)..."
            value={inputText}
            onChange={handleInputChange}
            onKeyPress={handleKeyPress}
            className="sum-summarization-textarea"
          />
          <div className="sum-char-count">
            {charCount} characters {charCount < 50 && charCount > 0 && "(minimum 50)"}
          </div>
        </div>

        <button
          onClick={handleSummarize}
          disabled={loading || charCount < 50}
          className={`sum-summarization-button ${loading ? "loading" : ""}`}
        >
          {loading ? (
            <span className="sum-loading-text">
              <span className="sum-dot">.</span>
              <span className="sum-dot">.</span>
              <span className="sum-dot">.</span>
            </span>
          ) : (
            "Summarize"
          )}
        </button>

        {error && <div className="sum-error-message">❌ {error}</div>}
      </div>

      {summary && (
        <div className="sum-summary-output">
          <div className="sum-summary-header">
            <h2>Summary</h2>
            <button onClick={() => handleCopy(summary)} className="sum-copy-button" title="Copy to clipboard">
              {copySuccess ? "✅ Copied!" : "📋 Copy"}
            </button>
          </div>
          <div className="sum-summary-content">
            <p>{summary}</p>
          </div>
        </div>
      )}

      <div className="sum-keyboard-shortcut">Pro tip: Press Ctrl + Enter to summarize quickly</div>
    </div>
  )
}

export default Summarization



================================================
File: src/pages/Tasks/Tasks.css
================================================
:root {
  --primary-color: #4a90e2;
  --secondary-color: #3498db;
  --background-light: #f4f4f4;
  --background-hover: #f8fafc;
  --tata-text-color: #333;
  --shadow-color: rgba(0, 0, 0, 0.1);
  --border-radius: 12px;
}

/* Container for tasks */
.tata-tasks-container {
  max-width: 1500px;
  margin: 0 auto;
  padding: 30px;
  background-color: #fefefe;
  border-radius: 25px;
  box-shadow: 0 6px 20px var(--shadow-color);
}

/* Header for tasks */
.tata-tasks-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 25px;
}

/* Header title style */
.tata-tasks-header h2 {
  font-size: 32px;
  font-weight: 700;
  color: #222;
  letter-spacing: -0.5px;
}

/* Button group for filters */
.tata-filter-buttons {
  display: flex;
  gap: 12px;
}

.tata-filter-buttons button {
  padding: 10px 20px;
  border-radius: var(--border-radius);
  background-color: #e7eaf3;
  border: none;
  cursor: pointer;
  font-size: 14px;
  color: #333;
  transition: all 0.3s ease;
  text-transform: uppercase;
}

/* Active and hover states for filter buttons */
.tata-filter-buttons .tata-active,
.tata-filter-buttons button:hover {
  background-color: var(--primary-color);
  color: white;
  box-shadow: 0 4px 12px rgba(74, 144, 226, 0.3);
}

/* Task input container */
.tata-task-input-container {
  display: flex;
  gap: 15px;
  margin-bottom: 25px;
}

.tata-task-input-container input,
.tata-task-input-container select {
  padding: 12px;
  border: 1px solid #d9d9d9;
  border-radius: var(--border-radius);
  font-size: 16px;
  width: 200px;
  transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

/* Style for date input field */
.tata-task-input-container input[type="date"] {
  width: 200px;
}

/* Input and select on focus */
.tata-task-input-container input:focus,
.tata-task-input-container select:focus {
  border-color: var(--primary-color);
  outline: none;
  box-shadow: 0 0 8px rgba(74, 144, 226, 0.3);
}

/* Add task button */
.tata-task-input-container button {
  background-color: #28a745;
  color: #fff;
  border: none;
  padding: 12px 24px;
  border-radius: var(--border-radius);
  cursor: pointer;
  font-size: 15px;
  transition: all 0.3s ease;
}

.tata-task-input-container button:hover {
  background-color: #218838;
  transform: translateY(-3px);
}

/* Task list styling */
.tata-task-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

/* Individual task item */
.tata-task-item {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  background-color: #fff;
  padding: 20px;
  margin-bottom: 15px;
  border-radius: var(--border-radius);
  box-shadow: 0 4px 15px var(--shadow-color);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

/* Hover state for task item */
.tata-task-item:hover {
  /* background-color: var(--background-hover); */
  transform: translateY(0px);
  /* box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15); */
}

/* Task content inside each item */
.tata-task-content {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.tata-task-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

/* Title of the task */
.tata-task-title {
  font-size: 22px;
  font-weight: 600;
  color: #333;
}

/* Priority labels for tasks */
.tata-priority {
  padding: 8px 16px;
  border-radius: 20px;
  font-size: 13px;
  color: #fff;
  text-transform: capitalize;
}

/* Colors for priority levels */
.tata-priority.low {
  background-color: #28a745;
}

.tata-priority.medium {
  background-color: #ffc107;
}

.tata-priority.high {
  background-color: #dc3545;
}

/* Meta information (Assignee and Deadline) */
.tata-task-meta {
  font-size: 14px;
  color: #666;
  display: flex;
  gap: 20px;
}

.tata-task-summary {
  background-color: var(--background-light);
  border-left: 6px solid var(--primary-color);
  padding: 20px;
  margin-top: 15px;
  margin-left: 65px;
  border-radius: var(--border-radius);
  box-shadow: 0 4px 6px var(--shadow-color), 0 1px 3px var(--shadow-color);
  font-size: 15px;
  line-height: 1.7;
  max-height: 350px;
  overflow-y: auto;
  color: var(--tata-text-color);
  transition: all 0.4s cubic-bezier(0.25, 0.1, 0.25, 1);
  position: relative;
}

.tata-task-summary:hover {
  background-color: var(--background-hover);
  box-shadow: 0 8px 15px rgba(0, 0, 0, 0.15), 0 3px 6px rgba(0, 0, 0, 0.1);
  transform: translateY(-5px);
}

.tata-task-summary::before {
  content: "AI Task Breakdown";
  display: block;
  font-weight: 700;
  color: var(--primary-color);
  margin-bottom: 15px;
  font-size: 18px;
  border-bottom: 2px solid var(--primary-color);
  padding-bottom: 8px;
}

.tata-task-summary::-webkit-scrollbar {
  width: 8px;
}

.tata-task-summary::-webkit-scrollbar-track {
  background: var(--background-light);
  border-radius: 4px;
}

.tata-task-summary::-webkit-scrollbar-thumb {
  background-color: var(--primary-color);
  border-radius: 4px;
}

/* Styling for assignee and deadline */
.tata-assignee,
.tata-deadline {
  font-weight: 500;
  color: #555;
}

/* Select input and AI Summary button */
.tata-task-status select,
.tata-ai-summary-btn,
.tata-ai-suggestion-btn {
  padding: 12px;
  margin-left: 10px;
  border: 1px solid #d9d9d9;
  border-radius: var(--border-radius);
  font-size: 14px;
  transition: all 0.3s ease;
}

/* Hover and active states for AI suggestion button */
.tata-ai-suggestion-btn:hover {
  background-color: #eef2f5;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

/* AI suggestion container */
.tata-ai-suggestion {
  margin-left: 10px;
  margin-bottom: 20px;
  background-color: #f4f8fc;
  padding: 15px;
  border-radius: var(--border-radius);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.tata-ai-suggestion-btn {
  background-color: var(--primary-color);
  color: #fff;
  transition: background-color 0.3s ease;
  margin-bottom: 20px;
}

.tata-ai-suggestion-btn:hover {
  background-color: #357ab8;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
  .tata-tasks-container {
    padding: 15px;
  }

  .tata-tasks-header h2 {
    font-size: 24px;
  }

  .tata-task-summary {
    font-size: 14px;
    padding: 15px;
    margin-top: 10px;
  }

  .tata-task-summary::before {
    font-size: 16px;
  }

  .tata-filter-buttons {
    flex-wrap: wrap;
  }

  .tata-task-input-container {
    flex-direction: column;
  }

  .tata-task-input-container input,
  .tata-task-input-container select,
  .tata-task-input-container button {
    width: 100%;
  }
}



================================================
File: src/pages/Tasks/Tasks.jsx
================================================
import React, { useState, useEffect } from "react";
import "./Tasks.css";
import axios from "axios";
import { marked } from "marked";
import DOMPurify from "dompurify";

const REACT_APP_GEMINI_API_KEY = "AIzaSyCFtYlPZVjqZuE6si1piEshIVbFmBfLy7g";
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${REACT_APP_GEMINI_API_KEY}`;

// Configure marked options
marked.setOptions({
  breaks: true,
  gfm: true,
});

const summarizeTask = async (taskDetails) => {
  try {
    const prompt = `Provide a detailed, step-by-step task breakdown for an employee. 
    Analyze the following task details and generate a comprehensive action plan:
    
    Task Title: ${taskDetails.title}
    Priority: ${taskDetails.priority}
    Deadline: ${taskDetails.deadline}
    
    Develop a thorough, professional guide explaining exactly what the employee needs to do to successfully complete this task. Include:
    - Specific action steps
    - Potential challenges
    - Recommended approach
    - Key deliverables
    - Time management suggestions
    
    Format your response in Markdown for better readability.
    Your response should be clear, actionable, and tailored to help the employee understand and execute the task effectively.`;

    const payload = {
      contents: [
        {
          parts: [
            {
              text: prompt,
            },
          ],
        },
      ],
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: 2000,
      },
    };

    const response = await axios.post(GEMINI_API_URL, payload, {
      headers: {
        "Content-Type": "application/json",
      },
    });

    const summary =
      response.data?.candidates?.[0]?.content?.parts?.[0]?.text ||
      "No summary could be generated.";
    return summary.trim();
  } catch (error) {
    console.error(
      "Error summarizing task:",
      error.response?.data || error.message
    );
    return "Unable to generate summary. Please try again later.";
  }
};

const generateSuggestions = (currentTasks) => {
  return currentTasks.length > 0
    ? "Consider prioritizing high-priority tasks and checking upcoming deadlines."
    : "No suggestions available. Add some tasks to get started!";
};

// Component to render sanitized markdown content
const SafeMarkdown = ({ content }) => {
  const createMarkup = () => {
    const rawMarkup = marked(content);
    return { __html: DOMPurify.sanitize(rawMarkup) };
  };

  return (
    <div
      className="markdown-content"
      dangerouslySetInnerHTML={createMarkup()}
    />
  );
};

const Tasks = () => {
  // Load tasks from localStorage on initial render
  const [tasks, setTasks] = useState(() => {
    const savedTasks = localStorage.getItem("tasks");
    return savedTasks
      ? JSON.parse(savedTasks)
      : [
          {
            id: 1,
            title: "Design UI",
            assignee: "John Doe",
            priority: "High",
            deadline: "2024-10-15",
            status: "Completed",
          },
          {
            id: 2,
            title: "Develop API",
            assignee: "Jane Smith",
            priority: "Medium",
            deadline: "2024-10-20",
            status: "Pending",
          },
          {
            id: 3,
            title: "Write Documentation",
            assignee: "Alice Brown",
            priority: "Low",
            deadline: "2024-10-25",
            status: "In Progress",
          },
          {
            id: 4,
            title: "Test Application",
            assignee: "Mark Johnson",
            priority: "High",
            deadline: "2024-10-18",
            status: "Pending",
          },
          {
            id: 5,
            title: "Fix Bugs",
            assignee: "Sarah Lee",
            priority: "Medium",
            deadline: "2024-10-22",
            status: "In Progress",
          },
          {
            id: 6,
            title: "Deploy to Production",
            assignee: "Chris Evans",
            priority: "High",
            deadline: "2024-10-30",
            status: "Pending",
          },
        ];
  });

  const [newTask, setNewTask] = useState({
    title: "",
    assignee: "",
    priority: "Low",
    deadline: "",
    status: "Pending",
  });
  const [filter, setFilter] = useState("All");
  const [taskSummaries, setTaskSummaries] = useState({});
  const [suggestion, setSuggestion] = useState("");
  const [isLoading, setIsLoading] = useState({});

  // Save tasks to localStorage whenever tasks change
  useEffect(() => {
    localStorage.setItem("tasks", JSON.stringify(tasks));
  }, [tasks]);

  const addTask = () => {
    if (
      newTask.title.trim() &&
      newTask.assignee.trim() &&
      newTask.deadline.trim()
    ) {
      const newTaskWithId = {
        ...newTask,
        id: tasks.length > 0 ? Math.max(...tasks.map((t) => t.id)) + 1 : 1,
      };
      setTasks([...tasks, newTaskWithId]);
      resetNewTask();
    }
  };

  const resetNewTask = () => {
    setNewTask({
      title: "",
      assignee: "",
      priority: "Low",
      deadline: "",
      status: "Pending",
    });
  };

  const changeStatus = (id, status) => {
    setTasks(
      tasks.map((task) => (task.id === id ? { ...task, status } : task))
    );
  };

  const handleSummarize = async (task) => {
    setIsLoading((prev) => ({ ...prev, [task.id]: true }));

    try {
      const summary = await summarizeTask(task);
      setTaskSummaries((prevSummaries) => ({
        ...prevSummaries,
        [task.id]: summary,
      }));
    } catch (error) {
      console.error("Summarization failed:", error);
      setTaskSummaries((prevSummaries) => ({
        ...prevSummaries,
        [task.id]: "Failed to generate summary. Please try again.",
      }));
    } finally {
      setIsLoading((prev) => ({ ...prev, [task.id]: false }));
    }
  };

  const handleSuggestion = () => {
    setSuggestion(generateSuggestions(tasks));
  };

  const filteredTasks = tasks.filter((task) =>
    filter === "All" ? true : task.status === filter
  );

  return (
    <div className="tata-tasks-container">
      <header className="tata-tasks-header">
        <h2>Tasks Management</h2>
        <div className="tata-filter-buttons">
          {["All", "Pending", "In Progress", "Completed"].map((status) => (
            <button
              key={status}
              onClick={() => setFilter(status)}
              className={filter === status ? "tata-active" : ""}
            >
              {status}
            </button>
          ))}
        </div>
      </header>

      <section className="tata-task-input-container">
        <input
          type="text"
          value={newTask.title}
          onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}
          placeholder="Task Title"
        />
        <input
          type="text"
          value={newTask.assignee}
          onChange={(e) => setNewTask({ ...newTask, assignee: e.target.value })}
          placeholder="Assignee"
        />
        <select
          value={newTask.priority}
          onChange={(e) => setNewTask({ ...newTask, priority: e.target.value })}
          className="tata-task-priority-select"
        >
          <option value="Low">Low Priority</option>
          <option value="Medium">Medium Priority</option>
          <option value="High">High Priority</option>
        </select>
        <input
          type="date"
          value={newTask.deadline}
          onChange={(e) => setNewTask({ ...newTask, deadline: e.target.value })}
        />
        <button onClick={addTask}>Add Task</button>
      </section>

      <button onClick={handleSuggestion} className="tata-ai-suggestion-btn">
        Get AI Suggestions
      </button>
      {suggestion && (
        <div className="tata-ai-suggestion">
          <SafeMarkdown content={suggestion} />
        </div>
      )}

      <ul className="tata-task-list">
        {filteredTasks.map((task) => (
          <li
            key={task.id}
            className={`tata-task-item ${task.status
              .toLowerCase()
              .replace(" ", "-")}`}
          >
            <div className="tata-task-content">
              <div className="tata-task-header">
                <span className="tata-task-title">{task.title}</span>
                <span
                  className={`tata-priority ${task.priority.toLowerCase()}`}
                >
                  {task.priority}
                </span>
              </div>
              <div className="tata-task-meta">
                <span className="tata-assignee">
                  Assigned to: {task.assignee}
                </span>
                <span className="tata-deadline">Deadline: {task.deadline}</span>
              </div>
            </div>
            <div className="tata-task-status">
              <select
                value={task.status}
                onChange={(e) => changeStatus(task.id, e.target.value)}
                className="tata-task-status-select"
              >
                <option value="Pending">Pending</option>
                <option value="In Progress">In Progress</option>
                <option value="Completed">Completed</option>
              </select>
              <button
                onClick={() => handleSummarize(task)}
                className="tata-ai-summary-btn"
                disabled={isLoading[task.id]}
              >
                {isLoading[task.id] ? "Generating..." : "Summarize"}
              </button>
              {taskSummaries[task.id] && (
                <div className="tata-task-summary">
                  <SafeMarkdown content={taskSummaries[task.id]} />
                </div>
              )}
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default Tasks;



================================================
File: src/pages/Translation/Translation.css
================================================
/* Translation.css - Professional & Classic Edition */
:root {
  --primary-color: #2c3e50;
  --primary-light: #34495e;
  --primary-dark: #1a2530;
  --accent-color: #3498db;
  --accent-light: #5dade2;
  --accent-dark: #2980b9;
  --text-primary: #2c3e50;
  --text-secondary: #7f8c8d;
  --text-light: #ecf0f1;
  --border-color: #dfe6e9;
  --background-light: #f8f9fa;
  --background-white: #ffffff;
  --shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.1);
  --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.1);
  --error-color: #e74c3c;
  --success-color: #27ae60;
  --font-primary: 'Merriweather', Georgia, serif;
  --font-secondary: 'Source Sans Pro', 'Segoe UI', sans-serif;
  --radius-sm: 4px;
  --radius-md: 8px;
  --radius-lg: 12px;
  --transition-fast: 0.2s ease;
  --transition-normal: 0.3s ease;
}

.translation-container {
  max-width: 1500px;
  margin: 0rem auto;
  padding: 2.5rem;
  font-family: var(--font-secondary);
  color: var(--text-primary);
  background: var(--background-white);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-lg);
  transition: all var(--transition-normal);
  border: 1px solid var(--border-color);
}

.translation-header {
  text-align: center;
  margin-bottom: 3rem;
  position: relative;
}

.logo-container {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 1rem;
  margin-bottom: 1rem;
}

.ai-orb {
  width: 48px;
  height: 48px;
  background: linear-gradient(135deg, var(--accent-color), var(--accent-dark));
  border-radius: 50%;
  position: relative;
  animation: pulse 3s infinite;
  box-shadow: 0 0 15px rgba(52, 152, 219, 0.5);
}

@keyframes pulse {
  0% {
    box-shadow: 0 0 0 0 rgba(52, 152, 219, 0.4);
  }
  70% {
    box-shadow: 0 0 0 15px rgba(52, 152, 219, 0);
  }
  100% {
    box-shadow: 0 0 0 0 rgba(52, 152, 219, 0);
  }
}

.translation-title {
  font-family: var(--font-primary);
  font-size: 2.75rem;
  color: var(--primary-color);
  margin: 0;
  font-weight: 700;
  letter-spacing: -0.025em;
}

.translation-title .highlight {
  color: var(--accent-color);
  position: relative;
  margin-left: 0.5rem;
}

.translation-title .highlight::after {
  content: '';
  position: absolute;
  bottom: -5px;
  left: 0;
  width: 100%;
  height: 2px;
  background: var(--accent-color);
  transform: scaleX(0);
  transform-origin: right;
  transition: transform 0.5s ease;
}

.translation-container:hover .translation-title .highlight::after {
  transform: scaleX(1);
  transform-origin: left;
}

.translation-subtitle {
  font-size: 1.1rem;
  color: var(--text-secondary);
  margin-top: 0.75rem;
  font-weight: 400;
  font-style: italic;
}

.translation-main {
  background: var(--background-light);
  border-radius: var(--radius-md);
  padding: 2.5rem;
  box-shadow: inset var(--shadow-sm);
  position: relative;
  border: 1px solid var(--border-color);
}

.input-container {
  position: relative;
  margin-bottom: 2rem;
}

.input-text,
.output-text {
  width: 97%;
  min-height: 150px;
  padding: 1.25rem;
  border: 1px solid var(--border-color);
  border-radius: var(--radius-md);
  font-size: 1.05rem;
  line-height: 1.6;
  transition: all var(--transition-normal);
  resize: vertical;
  background-color: var(--background-white);
  color: var(--text-primary);
  font-family: var(--font-secondary);
  box-shadow: inset var(--shadow-sm);
}

.input-text:focus,
.output-text:focus {
  outline: none;
  border-color: var(--accent-color);
  box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
}

.char-count {
  position: absolute;
  bottom: 0.75rem;
  right: 1.25rem;
  font-size: 0.875rem;
  color: var(--text-secondary);
  opacity: 0.8;
  font-style: italic;
}

.language-controls {
  display: flex;
  gap: 1.5rem;
  align-items: flex-start;
  margin-bottom: 2rem;
  position: relative;
}

.language-select {
  flex: 1;
  display: flex;
  align-items: center;
  gap: 1.5rem;
}

.language-group {
  flex: 1;
  position: relative;
}

.language-group label {
  display: block;
  margin-bottom: 0.75rem;
  font-weight: 600;
  color: var(--primary-color);
  transition: color var(--transition-normal);
  font-family: var(--font-primary);
  font-size: 1.05rem;
}

.language-group select {
  width: 100%;
  padding: 0.875rem 1rem;
  border: 1px solid var(--border-color);
  border-radius: var(--radius-md);
  font-size: 1rem;
  background-color: var(--background-white);
  cursor: pointer;
  transition: all var(--transition-normal);
  appearance: none;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%232c3e50' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: right 0.75rem center;
  background-size: 1.25rem;
  color: var(--text-primary);
  font-family: var(--font-secondary);
  box-shadow: var(--shadow-sm);
}

.language-group select:focus {
  outline: none;
  border-color: var(--accent-color);
  box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
}

.swap-languages {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 48px;
  height: 48px;
  background: var(--background-white);
  border: 1px solid var(--border-color);
  border-radius: 50%;
  cursor: pointer;
  font-size: 1.25rem;
  color: var(--primary-color);
  transition: all var(--transition-normal);
  margin-top: 1.75rem;
  position: relative;
  box-shadow: var(--shadow-sm);
}

.swap-languages:hover {
  background: var(--accent-light);
  border-color: var(--accent-color);
  color: var(--background-white);
  transform: rotate(180deg);
  box-shadow: var(--shadow-md);
}

/* Enhanced Translate Button Styles */
.translate-button {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.75rem;
  padding: 1rem 2rem;
  background: var(--primary-color);
  color: var(--text-light);
  border: none;
  border-radius: 30px;
  font-weight: 600;
  cursor: pointer;
  transition: all var(--transition-normal);
  min-width: 160px;
  margin-top: 2.5rem;
  position: relative;
  overflow: hidden;
  text-transform: uppercase;
  letter-spacing: 1.5px;
  box-shadow: var(--shadow-md);
  font-family: var(--font-secondary);
}

.translate-button::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    120deg,
    transparent,
    rgba(255, 255, 255, 0.2),
    transparent
  );
  transition: all 0.8s ease;
}

.translate-button:hover::before {
  left: 100%;
}

.translate-button:hover {
  background: var(--primary-light);
  transform: translateY(-2px);
  box-shadow: var(--shadow-lg);
}

.translate-button:active {
  transform: translateY(1px);
  box-shadow: var(--shadow-sm);
}

.translate-button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  transform: none;
  box-shadow: none;
}

.loading-spinner {
  width: 18px;
  height: 18px;
  border: 2px solid var(--text-light);
  border-top-color: transparent;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

.output-section {
  margin-top: 2.5rem;
  padding-top: 2.5rem;
  border-top: 1px solid var(--border-color);
}

.result-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
}

.confidence-score {
  font-size: 0.95rem;
  color: var(--text-secondary);
  display: flex;
  align-items: center;
  gap: 0.75rem;
  font-family: var(--font-secondary);
}

.confidence-bar {
  width: 120px;
  height: 8px;
  background: var(--border-color);
  border-radius: 4px;
  overflow: hidden;
}

.confidence-fill {
  height: 100%;
  background: linear-gradient(135deg, var(--accent-color), var(--accent-dark));
  transition: width 0.5s ease;
}

.copy-button {
  padding: 0.625rem 1.25rem;
  background: var(--background-white);
  border: 1px solid var(--border-color);
  border-radius: var(--radius-md);
  color: var(--primary-color);
  font-weight: 600;
  cursor: pointer;
  transition: all var(--transition-normal);
  display: flex;
  align-items: center;
  gap: 0.5rem;
  box-shadow: var(--shadow-sm);
}

.copy-button:hover {
  border-color: var(--accent-color);
  color: var(--accent-color);
  background-color: rgba(52, 152, 219, 0.05);
  box-shadow: var(--shadow-md);
}

.copy-button:active {
  transform: translateY(1px);
}

.alternative-translations {
  margin-top: 2rem;
  padding: 1.25rem;
  background: var(--background-white);
  border-radius: var(--radius-md);
  border: 1px solid var(--border-color);
  box-shadow: var(--shadow-sm);
}

.alternative-translations h4 {
  margin: 0 0 1rem 0;
  color: var(--primary-color);
  font-size: 1rem;
  font-family: var(--font-primary);
  position: relative;
  padding-bottom: 0.5rem;
}

.alternative-translations h4::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  width: 50px;
  height: 2px;
  background: var(--accent-color);
}

.alternative-translations ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

.alternative-translations li {
  padding: 0.75rem 1rem;
  cursor: pointer;
  border-radius: var(--radius-sm);
  transition: all var(--transition-fast);
  color: var(--text-secondary);
  border-left: 2px solid transparent;
  margin-bottom: 0.5rem;
}

.alternative-translations li:hover {
  background: rgba(52, 152, 219, 0.05);
  color: var(--accent-color);
  border-left-color: var(--accent-color);
  padding-left: 1.25rem;
}

.history-section {
  margin-top: 3rem;
  padding-top: 2rem;
  border-top: 1px solid var(--border-color);
}

.history-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
}

.history-header h3 {
  margin: 0;
  color: var(--primary-color);
  font-family: var(--font-primary);
  position: relative;
  padding-bottom: 0.5rem;
}

.history-header h3::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  width: 40px;
  height: 2px;
  background: var(--accent-color);
}

.history-actions {
  display: flex;
  gap: 0.75rem;
}

.clear-history {
  padding: 0.625rem 1.25rem;
  background: var(--background-white);
  border: 1px solid var(--error-color);
  border-radius: var(--radius-md);
  color: var(--error-color);
  font-weight: 600;
  cursor: pointer;
  transition: all var(--transition-normal);
  font-family: var(--font-secondary);
}

.clear-history:hover {
  background: var(--error-color);
  color: var(--text-light);
}

.history-list {
  display: flex;
  flex-direction: column;
  gap: 1.25rem;
}

.history-item {
  background: var(--background-white);
  border: 1px solid var(--border-color);
  border-radius: var(--radius-md);
  padding: 1.5rem;
  transition: all var(--transition-normal);
  box-shadow: var(--shadow-sm);
}

.history-item:hover {
  border-color: var(--accent-color);
  box-shadow: var(--shadow-md);
  transform: translateY(-2px);
}

.history-item-header {
  display: flex;
  justify-content: space-between;
  margin-bottom: 1rem;
  border-bottom: 1px solid var(--border-color);
  padding-bottom: 0.75rem;
}

.history-timestamp {
  font-size: 0.875rem;
  color: var(--text-secondary);
  font-style: italic;
}

.history-confidence {
  font-size: 0.875rem;
  color: var(--accent-color);
  font-weight: 600;
}

.history-content {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.history-original,
.history-translated {
  font-size: 0.95rem;
  line-height: 1.6;
  padding: 0.75rem;
  background: rgba(52, 152, 219, 0.05);
  border-radius: var(--radius-sm);
  border-left: 3px solid var(--accent-color);
}

.history-original strong,
.history-translated strong {
  color: var(--primary-color);
  font-weight: 600;
  margin-right: 0.5rem;
  font-family: var(--font-primary);
}

.error-banner {
  display: flex;
  align-items: center;
  justify-content: space-between;
  background: var(--error-color);
  color: var(--text-light);
  padding: 1rem 1.5rem;
  border-radius: var(--radius-md);
  box-shadow: var(--shadow-md);
  margin-bottom: 2rem;
  animation: slideIn 0.5s ease-out;
  position: relative;
  overflow: hidden;
}

.error-banner::before {
  content: "!";
  position: absolute;
  left: 20px;
  font-size: 2rem;
  font-weight: bold;
  opacity: 0.2;
}

.error-banner p {
  margin: 0;
  padding-left: 2rem;
  flex-grow: 1;
  font-weight: 500;
}

.error-banner button {
  background-color: rgba(255, 255, 255, 0.2);
  color: var(--text-light);
  border: none;
  padding: 0.5rem 1rem;
  border-radius: var(--radius-sm);
  cursor: pointer;
  transition: background-color var(--transition-normal);
}

.error-banner button:hover {
  background-color: rgba(255, 255, 255, 0.3);
}

/* Notification styles */
.notification {
  position: fixed;
  top: 20px;
  right: 20px;
  padding: 15px 25px;
  border-radius: var(--radius-md);
  background: var(--primary-color);
  color: var(--text-light);
  box-shadow: var(--shadow-lg);
  z-index: 1000;
  animation: slideInRight 0.3s ease-out;
  max-width: 350px;
  font-family: var(--font-secondary);
}

.notification.success {
  background: var(--success-color);
}

.notification.error {
  background: var(--error-color);
}

.notification.fade-out {
  animation: fadeOut 0.5s ease-in forwards;
}

@keyframes slideInRight {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes fadeOut {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}

@keyframes slideIn {
  from {
    transform: translateY(-100%);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

/* Responsive styles */
@media (max-width: 992px) {
  .translation-container {
    margin: 1.5rem;
    padding: 2rem;
  }
  
  .translation-title {
    font-size: 2.25rem;
  }
}

@media (max-width: 768px) {
  .translation-container {
    margin: 1rem;
    padding: 1.5rem;
  }

  .translation-main {
    padding: 1.5rem;
  }

  .language-controls {
    flex-direction: column;
  }

  .language-select {
    flex-direction: column;
  }

  .swap-languages {
    margin: 1rem auto;
  }

  .translate-button {
    width: 100%;
  }
  
  .translation-title {
    font-size: 2rem;
  }
  
  .result-header {
    flex-direction: column;
    gap: 1rem;
    align-items: flex-start;
  }
  
  .copy-button {
    align-self: flex-end;
  }
}

@media (max-width: 480px) {
  .translation-container {
    margin: 0.5rem;
    padding: 1rem;
  }
  
  .translation-title {
    font-size: 1.75rem;
  }
  
  .translation-subtitle {
    font-size: 1rem;
  }
  
  .history-item-header {
    flex-direction: column;
    gap: 0.5rem;
  }
}

/* Print styles */
@media print {
  .translation-container {
    box-shadow: none;
    margin: 0;
    padding: 1cm;
  }
  
  .translate-button,
  .copy-button,
  .clear-history,
  .swap-languages {
    display: none;
  }
  
  .input-text, 
  .output-text {
    border: 1px solid #000;
  }
  
  .history-section {
    page-break-before: always;
  }
}


================================================
File: src/pages/Translation/Translation.jsx
================================================
"use client"

import { useState, useEffect } from "react"
import "./Translation.css"

const PERPLEXITY_API_KEY = "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"

const Translation = () => {
  // Retrieve initial state from localStorage or use default values
  const [inputText, setInputText] = useState(() => localStorage.getItem("inputText") || "")
  const [translatedText, setTranslatedText] = useState(() => localStorage.getItem("translatedText") || "")
  const [sourceLanguage, setSourceLanguage] = useState(() => localStorage.getItem("sourceLanguage") || "english")
  const [targetLanguage, setTargetLanguage] = useState(() => localStorage.getItem("targetLanguage") || "spanish")
  const [loading, setLoading] = useState(false)
  const [translationHistory, setTranslationHistory] = useState(() => {
    const savedHistory = localStorage.getItem("translationHistory")
    return savedHistory ? JSON.parse(savedHistory) : []
  })
  const [confidence, setConfidence] = useState(() => Number.parseInt(localStorage.getItem("confidence")) || 0)
  const [suggestions, setSuggestions] = useState(() => {
    const savedSuggestions = localStorage.getItem("suggestions")
    return savedSuggestions ? JSON.parse(savedSuggestions) : []
  })
  const [error, setError] = useState(null)

  // Update localStorage whenever state changes
  useEffect(() => {
    localStorage.setItem("inputText", inputText)
  }, [inputText])

  useEffect(() => {
    localStorage.setItem("translatedText", translatedText)
  }, [translatedText])

  useEffect(() => {
    localStorage.setItem("sourceLanguage", sourceLanguage)
  }, [sourceLanguage])

  useEffect(() => {
    localStorage.setItem("targetLanguage", targetLanguage)
  }, [targetLanguage])

  useEffect(() => {
    localStorage.setItem("translationHistory", JSON.stringify(translationHistory))
  }, [translationHistory])

  useEffect(() => {
    localStorage.setItem("confidence", confidence.toString())
  }, [confidence])

  useEffect(() => {
    localStorage.setItem("suggestions", JSON.stringify(suggestions))
  }, [suggestions])

  const languages = [
    "English",
    "Spanish",
    "French",
    "German",
    "Italian",
    "Portuguese",
    "Chinese",
    "Japanese",
    "Korean",
    "Russian",
    "Arabic",
    "Hindi",
  ]

  const handleTranslate = async () => {
    setError(null)

    if (!inputText.trim()) {
      showNotification("Please provide text to translate.", "error")
      return
    }
    if (sourceLanguage === targetLanguage) {
      showNotification("Source and target languages cannot be the same.", "error")
      return
    }

    setLoading(true)
    try {
      const response = await fetch("https://api.perplexity.ai/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${PERPLEXITY_API_KEY}`,
        },
        body: JSON.stringify({
          model: "sonar",
          messages: [
            {
              role: "system",
              content:
                "You are a professional translator. Provide accurate translations with confidence scores and alternatives.",
            },
            {
              role: "user",
              content: `Translate the following text from ${sourceLanguage} to ${targetLanguage}:

Original Text: "${inputText}"

Provide:
- Precise translation
- Translation confidence (0-100%)
- Up to 3 alternative translations
- Brief explanation of translation nuances

Output Format:
Translation: [Translated Text]
Confidence: [Percentage]%
Alternatives: 
1. [Alternative 1]
2. [Alternative 2]
3. [Alternative 3]
Nuances: [Brief explanation]`,
            },
          ],
          temperature: 0.7,
          max_tokens: 500,
        }),
      })

      if (!response.ok) {
        const errorBody = await response.text()
        throw new Error(`Translation request failed: ${errorBody}`)
      }

      const data = await response.json()

      const parseResponse = (responseData) => {
        try {
          const responseText = responseData.choices?.[0]?.message?.content

          if (!responseText) {
            throw new Error("No translation text found")
          }

          const translationRegex = /Translation:\s*(.+?)(?:\n|$)/is
          const confidenceRegex = /Confidence:\s*(\d+)%/i
          const alternativesRegex = /Alternatives:\s*((?:.+\n?)+)/i

          const translationMatch = responseText.match(translationRegex)
          const confidenceMatch = responseText.match(confidenceRegex)
          const alternativesMatch = responseText.match(alternativesRegex)

          return {
            translatedResult: translationMatch ? translationMatch[1].trim() : responseText.trim(),
            confidenceResult: confidenceMatch
              ? Number.parseInt(confidenceMatch[1])
              : Math.max(75, Math.floor(Math.random() * 95)),
            alternativesResult: alternativesMatch
              ? alternativesMatch[1]
                  .split("\n")
                  .map((alt) => alt.replace(/^\d+\.\s*/, "").trim())
                  .filter((alt) => alt)
              : [],
          }
        } catch (parseError) {
          console.error("Parsing error:", parseError)
          throw new Error("Failed to parse translation response")
        }
      }

      const { translatedResult, confidenceResult, alternativesResult } = parseResponse(data)

      setTranslatedText(translatedResult)
      setConfidence(confidenceResult)
      setSuggestions(alternativesResult.filter((alt) => alt !== translatedResult))

      const newHistory = {
        original: inputText,
        translated: translatedResult,
        source: sourceLanguage,
        target: targetLanguage,
        timestamp: new Date().toLocaleString(),
        confidence: confidenceResult,
      }

      setTranslationHistory((prev) => [newHistory, ...prev])
    } catch (error) {
      console.error("Translation error:", error)
      setError(error.message || "Translation service temporarily unavailable")
      showNotification(error.message || "Translation service temporarily unavailable", "error")
    } finally {
      setLoading(false)
    }
  }

  const showNotification = (message, type = "info") => {
    const notification = document.createElement("div")
    notification.className = `notification ${type}`
    notification.textContent = message
    document.body.appendChild(notification)

    setTimeout(() => {
      notification.classList.add("fade-out")
      setTimeout(() => document.body.removeChild(notification), 500)
    }, 3000)
  }

  const handleCopy = () => {
    navigator.clipboard.writeText(translatedText)
    showNotification("Translation copied to clipboard!", "success")
  }

  const clearHistory = () => {
    setTranslationHistory([])
    localStorage.removeItem("translationHistory")
    showNotification("Translation history cleared!", "success")
  }

  const handleKeyPress = (e) => {
    if (e.key === "Enter" && e.ctrlKey) {
      handleTranslate()
    }
  }

  useEffect(() => {
    document.addEventListener("keydown", handleKeyPress)
    return () => document.removeEventListener("keydown", handleKeyPress)
  }, [inputText, sourceLanguage, targetLanguage])

  // Add a method to clear all persisted data
  const clearAllData = () => {
    // Clear localStorage
    localStorage.removeItem("inputText")
    localStorage.removeItem("translatedText")
    localStorage.removeItem("sourceLanguage")
    localStorage.removeItem("targetLanguage")
    localStorage.removeItem("translationHistory")
    localStorage.removeItem("confidence")
    localStorage.removeItem("suggestions")

    // Reset state
    setInputText("")
    setTranslatedText("")
    setSourceLanguage("english")
    setTargetLanguage("spanish")
    setTranslationHistory([])
    setConfidence(0)
    setSuggestions([])

    showNotification("All data cleared!", "success")
  }

  return (
    <div className="translation-container">
      {error && (
        <div className="error-banner">
          <p>{error}</p>
          <button onClick={() => setError(null)}>Dismiss</button>
        </div>
      )}
      <div className="translation-header">
        <div className="logo-container">
          <div className="ai-orb"></div>
          <h1 className="translation-title">
            Neural<span className="highlight">Translate</span>
          </h1>
        </div>
        <p className="translation-subtitle">Powered by Advanced Neural Networks & Machine Learning</p>
      </div>

      <div className="translation-main">
        <div className="translation-form">
          <div className="input-container">
            <textarea
              className="input-text"
              placeholder="Enter text to translate... (Ctrl + Enter to translate)"
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              onKeyDown={handleKeyPress}
            ></textarea>
            <div className="char-count">{inputText.length} characters</div>
          </div>

          <div className="language-controls">
            <div className="language-select">
              <div className="language-group">
                <label>Source Language</label>
                <select value={sourceLanguage} onChange={(e) => setSourceLanguage(e.target.value)}>
                  {languages.map((lang) => (
                    <option key={lang.toLowerCase()} value={lang.toLowerCase()}>
                      {lang}
                    </option>
                  ))}
                </select>
              </div>

              <div
                className="swap-languages"
                onClick={() => {
                  const temp = sourceLanguage
                  setSourceLanguage(targetLanguage)
                  setTargetLanguage(temp)
                }}
              >
                â‡„
              </div>

              <div className="language-group">
                <label>Target Language</label>
                <select value={targetLanguage} onChange={(e) => setTargetLanguage(e.target.value)}>
                  {languages.map((lang) => (
                    <option key={lang.toLowerCase()} value={lang.toLowerCase()}>
                      {lang}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <button
              className={`translate-button ${loading ? "loading" : ""}`}
              onClick={handleTranslate}
              disabled={loading}
            >
              {loading ? (
                <>
                  <div className="loading-spinner"></div>
                  Translating...
                </>
              ) : (
                "Translate"
              )}
            </button>
          </div>
        </div>

        {translatedText && (
          <div className="output-section">
            <div className="result-header">
              <div className="confidence-score">
                AI Confidence: {confidence}%
                <div className="confidence-bar">
                  <div className="confidence-fill" style={{ width: `${confidence}%` }}></div>
                </div>
              </div>
              <button className="copy-button" onClick={handleCopy}>
                Copy
              </button>
            </div>
            <textarea className="output-text" readOnly value={translatedText}></textarea>

            {suggestions.length > 0 && (
              <div className="alternative-translations">
                <h4>Alternative Translations:</h4>
                <ul>
                  {suggestions.map((alt, idx) => (
                    <li key={idx} onClick={() => setTranslatedText(alt)}>
                      {alt}
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        )}
      </div>

      {translationHistory.length > 0 && (
        <div className="history-section">
          <div className="history-header">
            <h3>Translation History</h3>
            <div className="history-actions">
              <button className="clear-history" onClick={clearHistory}>
                Clear History
              </button>
              <button className="clear-history" onClick={clearAllData}>
                Clear All Data
              </button>
            </div>
          </div>
          <div className="history-list">
            {translationHistory.map((item, index) => (
              <div key={index} className="history-item">
                <div className="history-item-header">
                  <span className="history-timestamp">{item.timestamp}</span>
                  <span className="history-confidence">Confidence: {item.confidence}%</span>
                </div>
                <div className="history-content">
                  <div className="history-original">
                    <strong>{item.source}:</strong> {item.original}
                  </div>
                  <div className="history-translated">
                    <strong>{item.target}:</strong> {item.translated}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  )
}

export default Translation


